

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 01 10:13:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt stack 0
    81  000800  00                 	db	0
    82  000801                     _dpowers:
    83                           	opt stack 0
    84  000801  0001               	dw	1
    85  000803  0000               	dw	0
    86  000805  000A               	dw	10
    87  000807  0000               	dw	0
    88  000809  0064               	dw	100
    89  00080B  0000               	dw	0
    90  00080D  03E8               	dw	1000
    91  00080F  0000               	dw	0
    92  000811  2710               	dw	10000
    93  000813  0000               	dw	0
    94  000815  86A0               	dw	34464
    95  000817  0001               	dw	1
    96  000819  4240               	dw	16960
    97  00081B  000F               	dw	15
    98  00081D  9680               	dw	38528
    99  00081F  0098               	dw	152
   100  000821  E100               	dw	57600
   101  000823  05F5               	dw	1525
   102  000825  CA00               	dw	51712
   103  000827  3B9A               	dw	15258
   104  000829                     __end_of_dpowers:
   105                           	opt stack 0
   106  000829                     __powers_:
   107                           	opt stack 0
   108  000829  00                 	db	0
   109  00082A  80                 	db	128
   110  00082B  3F                 	db	63
   111  00082C  00                 	db	0
   112  00082D  20                 	db	32
   113  00082E  41                 	db	65
   114  00082F  00                 	db	0
   115  000830  C8                 	db	200
   116  000831  42                 	db	66
   117  000832  00                 	db	0
   118  000833  7A                 	db	122
   119  000834  44                 	db	68
   120  000835  40                 	db	64
   121  000836  1C                 	db	28
   122  000837  46                 	db	70
   123  000838  50                 	db	80
   124  000839  C3                 	db	195
   125  00083A  47                 	db	71
   126  00083B  24                 	db	36
   127  00083C  74                 	db	116
   128  00083D  49                 	db	73
   129  00083E  97                 	db	151
   130  00083F  18                 	db	24
   131  000840  4B                 	db	75
   132  000841  BC                 	db	188
   133  000842  BE                 	db	190
   134  000843  4C                 	db	76
   135  000844  6B                 	db	107
   136  000845  6E                 	db	110
   137  000846  4E                 	db	78
   138  000847  03                 	db	3
   139  000848  15                 	db	21
   140  000849  50                 	db	80
   141  00084A  79                 	db	121
   142  00084B  AD                 	db	173
   143  00084C  60                 	db	96
   144  00084D  F3                 	db	243
   145  00084E  49                 	db	73
   146  00084F  71                 	db	113
   147  000850                     __end_of__powers_:
   148                           	opt stack 0
   149  000850                     __npowers_:
   150                           	opt stack 0
   151  000850  00                 	db	0
   152  000851  80                 	db	128
   153  000852  3F                 	db	63
   154  000853  CD                 	db	205
   155  000854  CC                 	db	204
   156  000855  3D                 	db	61
   157  000856  D7                 	db	215
   158  000857  23                 	db	35
   159  000858  3C                 	db	60
   160  000859  12                 	db	18
   161  00085A  83                 	db	131
   162  00085B  3A                 	db	58
   163  00085C  B7                 	db	183
   164  00085D  D1                 	db	209
   165  00085E  38                 	db	56
   166  00085F  C6                 	db	198
   167  000860  27                 	db	39
   168  000861  37                 	db	55
   169  000862  38                 	db	56
   170  000863  86                 	db	134
   171  000864  35                 	db	53
   172  000865  C0                 	db	192
   173  000866  D6                 	db	214
   174  000867  33                 	db	51
   175  000868  CC                 	db	204
   176  000869  2B                 	db	43
   177  00086A  32                 	db	50
   178  00086B  70                 	db	112
   179  00086C  89                 	db	137
   180  00086D  30                 	db	48
   181  00086E  E7                 	db	231
   182  00086F  DB                 	db	219
   183  000870  2E                 	db	46
   184  000871  E5                 	db	229
   185  000872  3C                 	db	60
   186  000873  1E                 	db	30
   187  000874  42                 	db	66
   188  000875  A2                 	db	162
   189  000876  0D                 	db	13
   190  000877                     __end_of__npowers_:
   191                           	opt stack 0
   192  0000                     _PORTC	set	3970
   193  0000                     _TRISD	set	3989
   194  0000                     _TRISC	set	3988
   195  0000                     _ADRESL	set	4035
   196  0000                     _ADRESH	set	4036
   197  0000                     _ADCON2	set	4032
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADCON0	set	4034
   200  0000                     _PORTCbits	set	3970
   201  0000                     _PORTD	set	3971
   202  0000                     _TMR0L	set	4054
   203  0000                     _GO_DONE	set	32273
   204  0000                     _TMR0ON	set	32431
   205  0000                     _T08BIT	set	32430
   206  0000                     _TMR0IF	set	32658
   207  0000                     _T0PS2	set	32426
   208  0000                     _T0PS1	set	32425
   209  0000                     _T0PS0	set	32424
   210  0000                     _PSA	set	32427
   211  0000                     _T0CS	set	32429
   212  000877                     STR_1:
   213  000877  56                 	db	86	;'V'
   214  000878  6F                 	db	111	;'o'
   215  000879  6C                 	db	108	;'l'
   216  00087A  74                 	db	116	;'t'
   217  00087B  20                 	db	32
   218  00087C  3D                 	db	61	;'='
   219  00087D  20                 	db	32
   220  00087E  00                 	db	0
   221  00087F                     STR_2:
   222  00087F  25                 	db	37
   223  000880  33                 	db	51	;'3'
   224  000881  2E                 	db	46
   225  000882  30                 	db	48	;'0'
   226  000883  66                 	db	102	;'f'
   227  000884  00                 	db	0
   228                           
   229                           ; #config settings
   230  000885  00                 	db	0	; dummy byte at the end
   231  0000                     
   232                           	psect	cinit
   233  002744                     __pcinit:
   234                           	opt stack 0
   235  002744                     start_initialization:
   236                           	opt stack 0
   237  002744                     __initialization:
   238                           	opt stack 0
   239  002744                     end_of_initialization:
   240                           	opt stack 0
   241  002744                     __end_of__initialization:
   242                           	opt stack 0
   243  002744  0E00               	movlw	low (__Lmediumconst shr (0+16))
   244  002746  6EF8               	movwf	tblptru,c
   245  002748  0100               	movlb	0
   246  00274A  EF1B  F010         	goto	_main	;jump to C main() function
   247                           tblptru	equ	0xFF8
   248                           
   249                           	psect	cstackBANK0
   250  000060                     __pcstackBANK0:
   251                           	opt stack 0
   252  000060                     _printf$783:
   253                           	opt stack 0
   254                           
   255                           ; 3 bytes @ 0x0
   256  000060                     	ds	3
   257  000063                     printf@ap:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x3
   261  000063                     	ds	2
   262  000065                     printf@val:
   263                           	opt stack 0
   264                           
   265                           ; 4 bytes @ 0x5
   266  000065                     	ds	4
   267  000069                     printf@flag:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x9
   271  000069                     	ds	2
   272  00006B                     printf@width:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0xB
   276  00006B                     	ds	2
   277  00006D                     printf@tmpval:
   278                           	opt stack 0
   279                           
   280                           ; 4 bytes @ 0xD
   281  00006D                     	ds	4
   282  000071                     printf@exp:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x11
   286  000071                     	ds	2
   287  000073                     printf@fval:
   288                           	opt stack 0
   289                           
   290                           ; 3 bytes @ 0x13
   291  000073                     	ds	3
   292  000076                     printf@prec:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x16
   296  000076                     	ds	2
   297  000078                     printf@c:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x18
   301  000078                     	ds	1
   302                           tblptru	equ	0xFF8
   303                           
   304                           	psect	cstackCOMRAM
   305  000001                     __pcstackCOMRAM:
   306                           	opt stack 0
   307  000001                     ??_isdigit:
   308  000001                     ?_capturar_ad:
   309                           	opt stack 0
   310  000001                     ?___awmod:
   311                           	opt stack 0
   312  000001                     ?___ftpack:
   313                           	opt stack 0
   314  000001                     ?___ftneg:
   315                           	opt stack 0
   316  000001                     ?__tdiv_to_l_:
   317                           	opt stack 0
   318  000001                     ?__div_to_l_:
   319                           	opt stack 0
   320  000001                     ?___lldiv:
   321                           	opt stack 0
   322  000001                     ?___llmod:
   323                           	opt stack 0
   324  000001                     delay_ms@tempo:
   325                           	opt stack 0
   326  000001                     ___awmod@dividend:
   327                           	opt stack 0
   328  000001                     __div_to_l_@f1:
   329                           	opt stack 0
   330  000001                     ___ftpack@arg:
   331                           	opt stack 0
   332  000001                     __tdiv_to_l_@f1:
   333                           	opt stack 0
   334  000001                     ___ftge@ff1:
   335                           	opt stack 0
   336  000001                     ___ftneg@f1:
   337                           	opt stack 0
   338  000001                     ___lldiv@dividend:
   339                           	opt stack 0
   340  000001                     ___llmod@dividend:
   341                           	opt stack 0
   342                           
   343                           ; 4 bytes @ 0x0
   344  000001                     	ds	1
   345  000002                     _isdigit$435:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x1
   349  000002                     	ds	1
   350  000003                     ??_capturar_ad:
   351  000003                     enviar_comando_lcd@valor:
   352                           	opt stack 0
   353  000003                     escrever_lcd@valor:
   354                           	opt stack 0
   355  000003                     isdigit@c:
   356                           	opt stack 0
   357  000003                     ___awmod@divisor:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x2
   361  000003                     	ds	1
   362  000004                     putch@x:
   363                           	opt stack 0
   364  000004                     ___ftpack@exp:
   365                           	opt stack 0
   366  000004                     posicionar_cursor@linha:
   367                           	opt stack 0
   368  000004                     __div_to_l_@f2:
   369                           	opt stack 0
   370  000004                     __tdiv_to_l_@f2:
   371                           	opt stack 0
   372  000004                     ___ftge@ff2:
   373                           	opt stack 0
   374                           
   375                           ; 3 bytes @ 0x3
   376  000004                     	ds	1
   377  000005                     ___awmod@counter:
   378                           	opt stack 0
   379  000005                     ___ftpack@sign:
   380                           	opt stack 0
   381  000005                     capturar_ad@resultado:
   382                           	opt stack 0
   383  000005                     ___lldiv@divisor:
   384                           	opt stack 0
   385  000005                     ___llmod@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 4 bytes @ 0x4
   389  000005                     	ds	1
   390  000006                     ??___ftpack:
   391  000006                     ___awmod@sign:
   392                           	opt stack 0
   393  000006                     posicionar_cursor@coluna:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x5
   397  000006                     	ds	1
   398  000007                     ??__tdiv_to_l_:
   399  000007                     ??___ftge:
   400  000007                     ?___awdiv:
   401                           	opt stack 0
   402  000007                     ___awdiv@dividend:
   403                           	opt stack 0
   404  000007                     __div_to_l_@quot:
   405                           	opt stack 0
   406                           
   407                           ; 4 bytes @ 0x6
   408  000007                     	ds	1
   409  000008                     
   410                           ; 1 bytes @ 0x7
   411  000008                     	ds	1
   412  000009                     ?___ftdiv:
   413                           	opt stack 0
   414  000009                     ?___awtoft:
   415                           	opt stack 0
   416  000009                     ?___lltoft:
   417                           	opt stack 0
   418  000009                     ___llmod@counter:
   419                           	opt stack 0
   420  000009                     ___awdiv@divisor:
   421                           	opt stack 0
   422  000009                     ___awtoft@c:
   423                           	opt stack 0
   424  000009                     ___ftdiv@f1:
   425                           	opt stack 0
   426  000009                     ___lldiv@quotient:
   427                           	opt stack 0
   428  000009                     ___lltoft@c:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x8
   432  000009                     	ds	1
   433  00000A                     __tdiv_to_l_@quot:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x9
   437  00000A                     	ds	1
   438  00000B                     ___awdiv@counter:
   439                           	opt stack 0
   440  00000B                     __div_to_l_@cntr:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0xA
   444  00000B                     	ds	1
   445  00000C                     ___awdiv@sign:
   446                           	opt stack 0
   447  00000C                     ___awtoft@sign:
   448                           	opt stack 0
   449  00000C                     __div_to_l_@exp1:
   450                           	opt stack 0
   451  00000C                     ___ftdiv@f2:
   452                           	opt stack 0
   453                           
   454                           ; 3 bytes @ 0xB
   455  00000C                     	ds	1
   456  00000D                     ??___lltoft:
   457  00000D                     ___lldiv@counter:
   458                           	opt stack 0
   459  00000D                     ___awdiv@quotient:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0xC
   463  00000D                     	ds	1
   464  00000E                     __tdiv_to_l_@cntr:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0xD
   468  00000E                     	ds	1
   469  00000F                     ??___ftdiv:
   470  00000F                     ?___wmul:
   471                           	opt stack 0
   472  00000F                     __tdiv_to_l_@exp1:
   473                           	opt stack 0
   474  00000F                     ___wmul@multiplier:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0xE
   478  00000F                     	ds	2
   479  000011                     ___lltoft@exp:
   480                           	opt stack 0
   481  000011                     ___wmul@multiplicand:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x10
   485  000011                     	ds	1
   486  000012                     ___ftdiv@cntr:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x11
   490  000012                     	ds	1
   491  000013                     ___wmul@product:
   492                           	opt stack 0
   493  000013                     ___ftdiv@f3:
   494                           	opt stack 0
   495                           
   496                           ; 3 bytes @ 0x12
   497  000013                     	ds	2
   498  000015                     ?___ftmul:
   499                           	opt stack 0
   500  000015                     ___ftmul@f1:
   501                           	opt stack 0
   502                           
   503                           ; 3 bytes @ 0x14
   504  000015                     	ds	1
   505  000016                     ___ftdiv@exp:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x15
   509  000016                     	ds	1
   510  000017                     ___ftdiv@sign:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x16
   514  000017                     	ds	1
   515  000018                     ___ftmul@f2:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x17
   519  000018                     	ds	3
   520  00001B                     ??___ftmul:
   521                           
   522                           ; 1 bytes @ 0x1A
   523  00001B                     	ds	3
   524  00001E                     ___ftmul@exp:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x1D
   528  00001E                     	ds	1
   529  00001F                     ___ftmul@f3_as_product:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x1E
   533  00001F                     	ds	3
   534  000022                     ___ftmul@cntr:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x21
   538  000022                     	ds	1
   539  000023                     ___ftmul@sign:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x22
   543  000023                     	ds	1
   544  000024                     ?_fround:
   545                           	opt stack 0
   546  000024                     ?_scale:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x23
   550  000024                     	ds	3
   551  000027                     _fround$781:
   552                           	opt stack 0
   553  000027                     _scale$782:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x26
   557  000027                     	ds	3
   558  00002A                     scale@scl:
   559                           	opt stack 0
   560  00002A                     _fround$780:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x29
   564  00002A                     	ds	1
   565  00002B                     ?___fttol:
   566                           	opt stack 0
   567  00002B                     ___fttol@f1:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x2A
   571  00002B                     	ds	2
   572  00002D                     fround@prec:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x2C
   576  00002D                     	ds	1
   577  00002E                     ?___ftadd:
   578                           	opt stack 0
   579  00002E                     ___ftadd@f1:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x2D
   583  00002E                     	ds	1
   584  00002F                     ??___fttol:
   585                           
   586                           ; 1 bytes @ 0x2E
   587  00002F                     	ds	2
   588  000031                     ___ftadd@f2:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x30
   592  000031                     	ds	3
   593  000034                     ??___ftadd:
   594  000034                     ___fttol@sign1:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x33
   598  000034                     	ds	1
   599  000035                     ___fttol@lval:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x34
   603  000035                     	ds	2
   604  000037                     ___ftadd@sign:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x36
   608  000037                     	ds	1
   609  000038                     ___ftadd@exp2:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x37
   613  000038                     	ds	1
   614  000039                     ___ftadd@exp1:
   615                           	opt stack 0
   616  000039                     ___fttol@exp1:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x38
   620  000039                     	ds	1
   621  00003A                     ?___ftsub:
   622                           	opt stack 0
   623  00003A                     ___ftsub@f1:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x39
   627  00003A                     	ds	3
   628  00003D                     ___ftsub@f2:
   629                           	opt stack 0
   630                           
   631                           ; 3 bytes @ 0x3C
   632  00003D                     	ds	3
   633  000040                     ?_printf:
   634                           	opt stack 0
   635  000040                     printf@f:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x3F
   639  000040                     	ds	5
   640  000045                     ??_printf:
   641                           
   642                           ; 1 bytes @ 0x44
   643  000045                     	ds	6
   644  00004B                     main@integral:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x4A
   648  00004B                     	ds	3
   649  00004E                     main@adc:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x4D
   653  00004E                     	ds	2
   654  000050                     main@volts:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x4F
   658  000050                     	ds	3
   659                           tblptru	equ	0xFF8
   660                           
   661 ;;
   662 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   663 ;;
   664 ;; *************** function _main *****************
   665 ;; Defined at:
   666 ;;		line 143 in file "newmain.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;  integral        3   74[COMRAM] float 
   671 ;;  volts           3   79[COMRAM] float 
   672 ;;  adc             2   77[COMRAM] int 
   673 ;; Return value:  Size  Location     Type
   674 ;;                  1    wreg      void 
   675 ;; Registers used:
   676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   682 ;;      Params:         0       0       0       0       0       0       0       0       0
   683 ;;      Locals:         8       0       0       0       0       0       0       0       0
   684 ;;      Temps:          0       0       0       0       0       0       0       0       0
   685 ;;      Totals:         8       0       0       0       0       0       0       0       0
   686 ;;Total ram usage:        8 bytes
   687 ;; Hardware stack levels required when called:    4
   688 ;; This function calls:
   689 ;;		___awtoft
   690 ;;		___ftdiv
   691 ;;		___ftmul
   692 ;;		_capturar_ad
   693 ;;		_inicializa_ad
   694 ;;		_inicializa_lcd
   695 ;;		_inicializa_pinos
   696 ;;		_posicionar_cursor
   697 ;;		_printf
   698 ;; This function is called by:
   699 ;;		Startup code after reset
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           	psect	text0
   704  002036                     __ptext0:
   705                           	opt stack 0
   706  002036                     _main:
   707                           	opt stack 27
   708                           
   709                           ;newmain.c: 145: int adc;
   710                           ;newmain.c: 146: float volts;
   711                           ;newmain.c: 148: inicializa_pinos();
   712                           
   713                           ;incstack = 0
   714  002036  EC92  F013         	call	_inicializa_pinos	;wreg free
   715                           
   716                           ;newmain.c: 149: inicializa_lcd();
   717  00203A  EC38  F013         	call	_inicializa_lcd	;wreg free
   718                           
   719                           ;newmain.c: 150: inicializa_ad();
   720  00203E  EC9B  F013         	call	_inicializa_ad	;wreg free
   721                           
   722                           ;newmain.c: 151: posicionar_cursor(1, 1);
   723  002042  0E00               	movlw	0
   724  002044  6E05               	movwf	posicionar_cursor@linha+1,c
   725  002046  0E01               	movlw	1
   726  002048  6E04               	movwf	posicionar_cursor@linha,c
   727  00204A  0E00               	movlw	0
   728  00204C  6E07               	movwf	posicionar_cursor@coluna+1,c
   729  00204E  0E01               	movlw	1
   730  002050  6E06               	movwf	posicionar_cursor@coluna,c
   731  002052  EC6C  F00A         	call	_posicionar_cursor	;wreg free
   732                           
   733                           ;newmain.c: 152: printf ("Volt = ");
   734  002056  0E77               	movlw	low STR_1
   735  002058  6E40               	movwf	printf@f,c
   736  00205A  0E08               	movlw	high STR_1
   737  00205C  6E41               	movwf	printf@f+1,c
   738  00205E  EC43  F004         	call	_printf	;wreg free
   739  002062                     l3116:
   740                           
   741                           ;newmain.c: 154: {
   742                           ;newmain.c: 155: posicionar_cursor(1, 8);
   743  002062  0E00               	movlw	0
   744  002064  6E05               	movwf	posicionar_cursor@linha+1,c
   745  002066  0E01               	movlw	1
   746  002068  6E04               	movwf	posicionar_cursor@linha,c
   747  00206A  0E00               	movlw	0
   748  00206C  6E07               	movwf	posicionar_cursor@coluna+1,c
   749  00206E  0E08               	movlw	8
   750  002070  6E06               	movwf	posicionar_cursor@coluna,c
   751  002072  EC6C  F00A         	call	_posicionar_cursor	;wreg free
   752                           
   753                           ;newmain.c: 156: adc = capturar_ad();
   754  002076  EC5E  F013         	call	_capturar_ad	;wreg free
   755  00207A  C001  F04E         	movff	?_capturar_ad,main@adc
   756  00207E  C002  F04F         	movff	?_capturar_ad+1,main@adc+1
   757                           
   758                           ;newmain.c: 157: volts = (float)adc;
   759  002082  C04E  F009         	movff	main@adc,___awtoft@c
   760  002086  C04F  F00A         	movff	main@adc+1,___awtoft@c+1
   761  00208A  ECDE  F012         	call	___awtoft	;wreg free
   762  00208E  C009  F050         	movff	?___awtoft,main@volts
   763  002092  C00A  F051         	movff	?___awtoft+1,main@volts+1
   764  002096  C00B  F052         	movff	?___awtoft+2,main@volts+2
   765                           
   766                           ;newmain.c: 158: volts = volts * (5.0 / 1024.0);
   767  00209A  C050  F015         	movff	main@volts,___ftmul@f1
   768  00209E  C051  F016         	movff	main@volts+1,___ftmul@f1+1
   769  0020A2  C052  F017         	movff	main@volts+2,___ftmul@f1+2
   770  0020A6  0E00               	movlw	0
   771  0020A8  6E18               	movwf	___ftmul@f2,c
   772  0020AA  0EA0               	movlw	160
   773  0020AC  6E19               	movwf	___ftmul@f2+1,c
   774  0020AE  0E3B               	movlw	59
   775  0020B0  6E1A               	movwf	___ftmul@f2+2,c
   776  0020B2  EC27  F00F         	call	___ftmul	;wreg free
   777  0020B6  C015  F050         	movff	?___ftmul,main@volts
   778  0020BA  C016  F051         	movff	?___ftmul+1,main@volts+1
   779  0020BE  C017  F052         	movff	?___ftmul+2,main@volts+2
   780                           
   781                           ;newmain.c: 159: volts = volts / 10e-3;
   782  0020C2  C050  F009         	movff	main@volts,___ftdiv@f1
   783  0020C6  C051  F00A         	movff	main@volts+1,___ftdiv@f1+1
   784  0020CA  C052  F00B         	movff	main@volts+2,___ftdiv@f1+2
   785  0020CE  0ED7               	movlw	215
   786  0020D0  6E0C               	movwf	___ftdiv@f2,c
   787  0020D2  0E23               	movlw	35
   788  0020D4  6E0D               	movwf	___ftdiv@f2+1,c
   789  0020D6  0E3C               	movlw	60
   790  0020D8  6E0E               	movwf	___ftdiv@f2+2,c
   791  0020DA  EC90  F010         	call	___ftdiv	;wreg free
   792  0020DE  C009  F050         	movff	?___ftdiv,main@volts
   793  0020E2  C00A  F051         	movff	?___ftdiv+1,main@volts+1
   794  0020E6  C00B  F052         	movff	?___ftdiv+2,main@volts+2
   795                           
   796                           ;newmain.c: 160: float integral=0;
   797  0020EA  0E00               	movlw	0
   798  0020EC  6E4B               	movwf	main@integral,c
   799  0020EE  0E00               	movlw	0
   800  0020F0  6E4C               	movwf	main@integral+1,c
   801  0020F2  0E00               	movlw	0
   802  0020F4  6E4D               	movwf	main@integral+2,c
   803                           
   804                           ;newmain.c: 165: if(volts==125){
   805  0020F6  0EFA               	movlw	250
   806  0020F8  1851               	xorwf	main@volts+1,w,c
   807  0020FA  E1B3               	bnz	l3116
   808  0020FC  0E42               	movlw	66
   809  0020FE  1852               	xorwf	main@volts+2,w,c
   810  002100  1050               	iorwf	main@volts,w,c
   811  002102  A4D8               	btfss	status,2,c
   812  002104  D7AE               	goto	l115
   813                           
   814                           ;newmain.c: 166: printf("%3.0f", volts);
   815  002106  0E7F               	movlw	low STR_2
   816  002108  6E40               	movwf	printf@f,c
   817  00210A  0E08               	movlw	high STR_2
   818  00210C  6E41               	movwf	printf@f+1,c
   819  00210E  C050  F042         	movff	main@volts,?_printf+2
   820  002112  C051  F043         	movff	main@volts+1,?_printf+3
   821  002116  C052  F044         	movff	main@volts+2,?_printf+4
   822  00211A  EC43  F004         	call	_printf	;wreg free
   823  00211E  D7A1               	goto	l115
   824  002120                     __end_of_main:
   825                           	opt stack 0
   826                           tblptru	equ	0xFF8
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _printf *****************
   830 ;; Defined at:
   831 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  f               2   63[COMRAM] PTR const unsigned char 
   834 ;;		 -> STR_2(6), STR_1(8), 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;  tmpval          4   13[BANK0 ] struct .
   837 ;;  val             4    5[BANK0 ] unsigned long 
   838 ;;  fval            3   19[BANK0 ] unsigned long 
   839 ;;  cp              3    0        PTR const unsigned char 
   840 ;;  prec            2   22[BANK0 ] int 
   841 ;;  exp             2   17[BANK0 ] int 
   842 ;;  width           2   11[BANK0 ] int 
   843 ;;  flag            2    9[BANK0 ] unsigned short 
   844 ;;  ap              2    3[BANK0 ] PTR void [1]
   845 ;;		 -> ?_printf(2), 
   846 ;;  len             2    0        unsigned int 
   847 ;;  c               1   24[BANK0 ] char 
   848 ;;  d               1    0        unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  2   63[COMRAM] int 
   851 ;; Registers used:
   852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   858 ;;      Params:         5       0       0       0       0       0       0       0       0
   859 ;;      Locals:         0      25       0       0       0       0       0       0       0
   860 ;;      Temps:          6       0       0       0       0       0       0       0       0
   861 ;;      Totals:        11      25       0       0       0       0       0       0       0
   862 ;;Total ram usage:       36 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    3
   865 ;; This function calls:
   866 ;;		___awdiv
   867 ;;		___ftadd
   868 ;;		___ftge
   869 ;;		___ftmul
   870 ;;		___ftneg
   871 ;;		___ftsub
   872 ;;		___fttol
   873 ;;		___lldiv
   874 ;;		___llmod
   875 ;;		___lltoft
   876 ;;		___wmul
   877 ;;		__div_to_l_
   878 ;;		__tdiv_to_l_
   879 ;;		_fround
   880 ;;		_isdigit
   881 ;;		_putch
   882 ;;		_scale
   883 ;; This function is called by:
   884 ;;		_main
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text1
   889  000886                     __ptext1:
   890                           	opt stack 0
   891  000886                     _printf:
   892                           	opt stack 27
   893                           
   894                           ;doprnt.c: 466: va_list ap;
   895                           ;doprnt.c: 499: signed char c;
   896                           ;doprnt.c: 501: int width;
   897                           ;doprnt.c: 504: int prec;
   898                           ;doprnt.c: 508: unsigned short flag;
   899                           ;doprnt.c: 515: char d;
   900                           ;doprnt.c: 516: double fval;
   901                           ;doprnt.c: 517: int exp;
   902                           ;doprnt.c: 523: union {
   903                           ;doprnt.c: 524: unsigned long vd;
   904                           ;doprnt.c: 525: double integ;
   905                           ;doprnt.c: 526: } tmpval;
   906                           ;doprnt.c: 528: unsigned long val;
   907                           ;doprnt.c: 529: unsigned len;
   908                           ;doprnt.c: 530: const char * cp;
   909                           ;doprnt.c: 533: *ap = __va_start();
   910                           
   911                           ;incstack = 0
   912  000886  0E42               	movlw	low (?_printf+2)
   913  000888  0100               	movlb	0	; () banked
   914  00088A  6F63               	movwf	printf@ap& (0+255),b
   915  00088C  0E00               	movlw	high (?_printf+2)
   916  00088E  6F64               	movwf	(printf@ap+1)& (0+255),b
   917                           
   918                           ;doprnt.c: 536: while(c = *f++) {
   919  000890  EF59  F008         	goto	l229
   920  000894                     
   921                           ; BSR set to: 0
   922                           ;doprnt.c: 538: if(c != '%')
   923                           
   924                           ; BSR set to: 0
   925  000894  0E25               	movlw	37
   926  000896  1978               	xorwf	printf@c& (0+255),w,b
   927  000898  B4D8               	btfsc	status,2,c
   928  00089A  D005               	goto	l158
   929                           
   930                           ; BSR set to: 0
   931                           ;doprnt.c: 540: {
   932                           ;doprnt.c: 541: (putch(c) );
   933  00089C  5178               	movf	printf@c& (0+255),w,b
   934  00089E  ECA7  F013         	call	_putch
   935                           
   936                           ;doprnt.c: 542: continue;
   937  0008A2  EF59  F008         	goto	l229
   938  0008A6                     l158:
   939                           
   940                           ;doprnt.c: 543: }
   941                           ;doprnt.c: 546: width = 0;
   942  0008A6  0E00               	movlw	0
   943  0008A8  0100               	movlb	0	; () banked
   944  0008AA  6F6C               	movwf	(printf@width+1)& (0+255),b
   945  0008AC  0E00               	movlw	0
   946  0008AE  6F6B               	movwf	printf@width& (0+255),b
   947                           
   948                           ;doprnt.c: 548: flag = 0;
   949  0008B0  0E00               	movlw	0
   950  0008B2  6F6A               	movwf	(printf@flag+1)& (0+255),b
   951  0008B4  0E00               	movlw	0
   952  0008B6  6F69               	movwf	printf@flag& (0+255),b
   953                           
   954                           ; BSR set to: 0
   955                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   956  0008B8  C040  FFF6         	movff	printf@f,tblptrl
   957  0008BC  C041  FFF7         	movff	printf@f+1,tblptrh
   958  0008C0                     	if	0	;tblptru may be non-zero
   959  0008C0                     	endif
   960  0008C0                     	if	0	;tblptru may be non-zero
   961  0008C0                     	endif
   962  0008C0  0008               	tblrd		*
   963  0008C2  50F5               	movf	tablat,w,c
   964  0008C4  EC83  F013         	call	_isdigit
   965  0008C8  A0D8               	btfss	status,0,c
   966  0008CA  D034               	goto	u3730
   967                           
   968                           ;doprnt.c: 598: width = 0;
   969  0008CC  0E00               	movlw	0
   970  0008CE  0100               	movlb	0	; () banked
   971  0008D0  6F6C               	movwf	(printf@width+1)& (0+255),b
   972  0008D2  0E00               	movlw	0
   973  0008D4  6F6B               	movwf	printf@width& (0+255),b
   974  0008D6                     
   975                           ;doprnt.c: 600: width *= 10;
   976                           
   977                           ; BSR set to: 0
   978  0008D6  C06B  F00F         	movff	printf@width,___wmul@multiplier
   979  0008DA  C06C  F010         	movff	printf@width+1,___wmul@multiplier+1
   980  0008DE  0E00               	movlw	0
   981  0008E0  6E12               	movwf	___wmul@multiplicand+1,c
   982  0008E2  0E0A               	movlw	10
   983  0008E4  6E11               	movwf	___wmul@multiplicand,c
   984  0008E6  EC25  F013         	call	___wmul	;wreg free
   985  0008EA  C00F  F06B         	movff	?___wmul,printf@width
   986  0008EE  C010  F06C         	movff	?___wmul+1,printf@width+1
   987                           
   988                           ;doprnt.c: 601: width += *f++ - '0';
   989  0008F2  0ED0               	movlw	208
   990  0008F4  6E45               	movwf	??_printf& (0+255),c
   991  0008F6  0EFF               	movlw	255
   992  0008F8  6E46               	movwf	(??_printf+1)& (0+255),c
   993  0008FA  C040  FFF6         	movff	printf@f,tblptrl
   994  0008FE  C041  FFF7         	movff	printf@f+1,tblptrh
   995  000902                     	if	0	;tblptru may be non-zero
   996  000902                     	endif
   997  000902                     	if	0	;tblptru may be non-zero
   998  000902                     	endif
   999  000902  0008               	tblrd		*
  1000  000904  50F5               	movf	tablat,w,c
  1001  000906  6E47               	movwf	(??_printf+2)& (0+255),c
  1002  000908  6A48               	clrf	(??_printf+3)& (0+255),c
  1003  00090A  5045               	movf	??_printf,w,c
  1004  00090C  2647               	addwf	??_printf+2,f,c
  1005  00090E  5046               	movf	??_printf+1,w,c
  1006  000910  2248               	addwfc	??_printf+3,f,c
  1007  000912  5047               	movf	??_printf+2,w,c
  1008  000914  0100               	movlb	0	; () banked
  1009  000916  276B               	addwf	printf@width& (0+255),f,b
  1010  000918  5048               	movf	??_printf+3,w,c
  1011  00091A  236C               	addwfc	(printf@width+1)& (0+255),f,b
  1012                           
  1013                           ; BSR set to: 0
  1014  00091C  4A40               	infsnz	printf@f,f,c
  1015  00091E  2A41               	incf	printf@f+1,f,c
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1019  000920  C040  FFF6         	movff	printf@f,tblptrl
  1020  000924  C041  FFF7         	movff	printf@f+1,tblptrh
  1021  000928                     	if	0	;tblptru may be non-zero
  1022  000928                     	endif
  1023  000928                     	if	0	;tblptru may be non-zero
  1024  000928                     	endif
  1025  000928  0008               	tblrd		*
  1026  00092A  50F5               	movf	tablat,w,c
  1027  00092C  EC83  F013         	call	_isdigit
  1028  000930  B0D8               	btfsc	status,0,c
  1029  000932  D7D1               	goto	l160
  1030  000934                     u3730:
  1031                           
  1032                           ;doprnt.c: 608: }
  1033                           ;doprnt.c: 611: if(*f == '.') {
  1034  000934  C040  FFF6         	movff	printf@f,tblptrl
  1035  000938  C041  FFF7         	movff	printf@f+1,tblptrh
  1036  00093C                     	if	0	;tblptru may be non-zero
  1037  00093C                     	endif
  1038  00093C                     	if	0	;tblptru may be non-zero
  1039  00093C                     	endif
  1040  00093C  0008               	tblrd		*
  1041  00093E  50F5               	movf	tablat,w,c
  1042  000940  0A2E               	xorlw	46
  1043  000942  A4D8               	btfss	status,2,c
  1044  000944  D030               	goto	l162
  1045                           
  1046                           ;doprnt.c: 612: flag |= 0x4000;
  1047  000946  0100               	movlb	0	; () banked
  1048  000948  8D6A               	bsf	(printf@flag+1)& (0+255),6,b
  1049                           
  1050                           ;doprnt.c: 613: f++;
  1051  00094A  4A40               	infsnz	printf@f,f,c
  1052  00094C  2A41               	incf	printf@f+1,f,c
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;doprnt.c: 620: {
  1056                           ;doprnt.c: 621: prec = 0;
  1057  00094E  0E00               	movlw	0
  1058  000950  6F77               	movwf	(printf@prec+1)& (0+255),b
  1059  000952  0E00               	movlw	0
  1060  000954  6F76               	movwf	printf@prec& (0+255),b
  1061                           
  1062                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1063  000956  D01C               	goto	l163
  1064  000958                     
  1065                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1066                           
  1067                           ; BSR set to: 0
  1068  000958  C076  F00F         	movff	printf@prec,___wmul@multiplier
  1069  00095C  C077  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1070  000960  0E00               	movlw	0
  1071  000962  6E12               	movwf	___wmul@multiplicand+1,c
  1072  000964  0E0A               	movlw	10
  1073  000966  6E11               	movwf	___wmul@multiplicand,c
  1074  000968  EC25  F013         	call	___wmul	;wreg free
  1075  00096C  C040  FFF6         	movff	printf@f,tblptrl
  1076  000970  C041  FFF7         	movff	printf@f+1,tblptrh
  1077  000974                     	if	0	;tblptru may be non-zero
  1078  000974                     	endif
  1079  000974                     	if	0	;tblptru may be non-zero
  1080  000974                     	endif
  1081  000974  0008               	tblrd		*
  1082  000976  50F5               	movf	tablat,w,c
  1083  000978  260F               	addwf	?___wmul,f,c
  1084  00097A  0E00               	movlw	0
  1085  00097C  2210               	addwfc	?___wmul+1,f,c
  1086  00097E  0ED0               	movlw	208
  1087  000980  240F               	addwf	?___wmul,w,c
  1088  000982  0100               	movlb	0	; () banked
  1089  000984  6F76               	movwf	printf@prec& (0+255),b
  1090  000986  0EFF               	movlw	255
  1091  000988  2010               	addwfc	?___wmul+1,w,c
  1092  00098A  6F77               	movwf	(printf@prec+1)& (0+255),b
  1093                           
  1094                           ; BSR set to: 0
  1095  00098C  4A40               	infsnz	printf@f,f,c
  1096  00098E  2A41               	incf	printf@f+1,f,c
  1097  000990                     l163:
  1098                           
  1099                           ; BSR set to: 0
  1100                           
  1101                           ; BSR set to: 0
  1102  000990  C040  FFF6         	movff	printf@f,tblptrl
  1103  000994  C041  FFF7         	movff	printf@f+1,tblptrh
  1104  000998                     	if	0	;tblptru may be non-zero
  1105  000998                     	endif
  1106  000998                     	if	0	;tblptru may be non-zero
  1107  000998                     	endif
  1108  000998  0008               	tblrd		*
  1109  00099A  50F5               	movf	tablat,w,c
  1110  00099C  EC83  F013         	call	_isdigit
  1111  0009A0  A0D8               	btfss	status,0,c
  1112  0009A2  D00A               	goto	l167
  1113  0009A4  D7D9               	goto	l164
  1114  0009A6                     l162:
  1115                           
  1116                           ;doprnt.c: 626: prec = 0;
  1117  0009A6  0E00               	movlw	0
  1118  0009A8  0100               	movlb	0	; () banked
  1119  0009AA  6F77               	movwf	(printf@prec+1)& (0+255),b
  1120  0009AC  0E00               	movlw	0
  1121  0009AE  6F76               	movwf	printf@prec& (0+255),b
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;doprnt.c: 628: flag |= 0x1000;
  1125  0009B0  896A               	bsf	(printf@flag+1)& (0+255),4,b
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;doprnt.c: 630: }
  1129                           ;doprnt.c: 635: switch(c = *f++) {
  1130  0009B2  D002               	goto	l167
  1131  0009B4                     
  1132                           ; BSR set to: 0
  1133                           ;doprnt.c: 663: flag |= 0x400;
  1134                           
  1135                           ; BSR set to: 0
  1136  0009B4  856A               	bsf	(printf@flag+1)& (0+255),2,b
  1137                           
  1138                           ;doprnt.c: 664: break;
  1139  0009B6  D012               	goto	l171
  1140  0009B8                     l167:
  1141                           
  1142                           ; BSR set to: 0
  1143  0009B8  C040  FFF6         	movff	printf@f,tblptrl
  1144  0009BC  C041  FFF7         	movff	printf@f+1,tblptrh
  1145  0009C0  4A40               	infsnz	printf@f,f,c
  1146  0009C2  2A41               	incf	printf@f+1,f,c
  1147  0009C4                     	if	0	;tblptru may be non-zero
  1148  0009C4                     	endif
  1149  0009C4                     	if	0	;tblptru may be non-zero
  1150  0009C4                     	endif
  1151  0009C4  0008               	tblrd		*
  1152  0009C6  CFF5 F078          	movff	tablat,printf@c
  1153  0009CA  0100               	movlb	0	; () banked
  1154  0009CC  5178               	movf	printf@c& (0+255),w,b
  1155                           
  1156                           ; Switch size 1, requested type "space"
  1157                           ; Number of cases is 2, Range of values is 0 to 102
  1158                           ; switch strategies available:
  1159                           ; Name         Instructions Cycles
  1160                           ; simple_byte            7     4 (average)
  1161                           ;	Chosen strategy is simple_byte
  1162  0009CE  0A00               	xorlw	0	; case 0
  1163  0009D0  B4D8               	btfsc	status,2,c
  1164  0009D2  0012               	return	
  1165  0009D4  0A66               	xorlw	102	; case 102
  1166  0009D6  B4D8               	btfsc	status,2,c
  1167  0009D8  D7ED               	goto	l170
  1168  0009DA  D36B               	goto	l229
  1169  0009DC                     l171:
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;doprnt.c: 825: if(flag & (0x700)) {
  1173                           
  1174                           ; BSR set to: 0
  1175  0009DC  0E07               	movlw	7
  1176  0009DE  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1177  0009E0  B4D8               	btfsc	status,2,c
  1178  0009E2  D2E5               	goto	l173
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;doprnt.c: 827: if(flag & 0x1000)
  1182  0009E4  A96A               	btfss	(printf@flag+1)& (0+255),4,b
  1183  0009E6  D004               	goto	l174
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;doprnt.c: 829: prec = 6;
  1187  0009E8  0E00               	movlw	0
  1188  0009EA  6F77               	movwf	(printf@prec+1)& (0+255),b
  1189  0009EC  0E06               	movlw	6
  1190  0009EE  6F76               	movwf	printf@prec& (0+255),b
  1191  0009F0                     l174:
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1195                           
  1196                           ; BSR set to: 0
  1197  0009F0  C063  FFD9         	movff	printf@ap,fsr2l
  1198  0009F4  C064  FFDA         	movff	printf@ap+1,fsr2h
  1199  0009F8  CFDE F073          	movff	postinc2,printf@fval
  1200  0009FC  CFDE F074          	movff	postinc2,printf@fval+1
  1201  000A00  CFDD F075          	movff	postdec2,printf@fval+2
  1202                           
  1203                           ; BSR set to: 0
  1204  000A04  0E03               	movlw	3
  1205  000A06  2763               	addwf	printf@ap& (0+255),f,b
  1206  000A08  0E00               	movlw	0
  1207  000A0A  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;doprnt.c: 831: if(fval < 0.0) {
  1211  000A0C  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  1212  000A0E  D011               	goto	l175
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;doprnt.c: 832: fval = -fval;
  1216  000A10  C073  F001         	movff	printf@fval,___ftneg@f1
  1217  000A14  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  1218  000A18  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  1219  000A1C  EC71  F013         	call	___ftneg	;wreg free
  1220  000A20  C001  F073         	movff	?___ftneg,printf@fval
  1221  000A24  C002  F074         	movff	?___ftneg+1,printf@fval+1
  1222  000A28  C003  F075         	movff	?___ftneg+2,printf@fval+2
  1223                           
  1224                           ;doprnt.c: 833: flag |= 0x03;
  1225  000A2C  0E03               	movlw	3
  1226  000A2E  0100               	movlb	0	; () banked
  1227  000A30  1369               	iorwf	printf@flag& (0+255),f,b
  1228  000A32                     l175:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;doprnt.c: 834: }
  1232                           ;doprnt.c: 835: exp = 0;
  1233                           
  1234                           ; BSR set to: 0
  1235  000A32  0E00               	movlw	0
  1236  000A34  6F72               	movwf	(printf@exp+1)& (0+255),b
  1237  000A36  0E00               	movlw	0
  1238  000A38  6F71               	movwf	printf@exp& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;doprnt.c: 836: if( fval!=0) {
  1242  000A3A  5173               	movf	printf@fval& (0+255),w,b
  1243  000A3C  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1244  000A3E  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1245  000A40  B4D8               	btfsc	status,2,c
  1246  000A42  D086               	goto	l180
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1250  000A44  0E82               	movlw	130
  1251  000A46  6E45               	movwf	??_printf& (0+255),c
  1252  000A48  0EFF               	movlw	255
  1253  000A4A  6E46               	movwf	(??_printf+1)& (0+255),c
  1254  000A4C  C073  F047         	movff	printf@fval,??_printf+2
  1255  000A50  C074  F048         	movff	printf@fval+1,??_printf+3
  1256  000A54  C075  F049         	movff	printf@fval+2,??_printf+4
  1257  000A58  C076  F04A         	movff	printf@fval+3,??_printf+5
  1258  000A5C  0E10               	movlw	16
  1259  000A5E  D005               	goto	u3800
  1260  000A60                     u3805:
  1261  000A60  90D8               	bcf	status,0,c
  1262  000A62  324A               	rrcf	??_printf+5,f,c
  1263  000A64  3249               	rrcf	??_printf+4,f,c
  1264  000A66  3248               	rrcf	??_printf+3,f,c
  1265  000A68  3247               	rrcf	??_printf+2,f,c
  1266  000A6A                     u3800:
  1267  000A6A  2EE8               	decfsz	wreg,f,c
  1268  000A6C  D7F9               	goto	u3805
  1269  000A6E  5047               	movf	??_printf+2,w,c
  1270  000A70  2445               	addwf	??_printf,w,c
  1271  000A72  6F71               	movwf	printf@exp& (0+255),b
  1272  000A74  0E00               	movlw	0
  1273  000A76  2046               	addwfc	??_printf+1,w,c
  1274  000A78  6F72               	movwf	(printf@exp+1)& (0+255),b
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;doprnt.c: 838: exp--;
  1278  000A7A  0771               	decf	printf@exp& (0+255),f,b
  1279  000A7C  A0D8               	btfss	status,0,c
  1280  000A7E  0772               	decf	(printf@exp+1)& (0+255),f,b
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;doprnt.c: 839: exp *= 3;
  1284  000A80  C071  F00F         	movff	printf@exp,___wmul@multiplier
  1285  000A84  C072  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1286  000A88  0E00               	movlw	0
  1287  000A8A  6E12               	movwf	___wmul@multiplicand+1,c
  1288  000A8C  0E03               	movlw	3
  1289  000A8E  6E11               	movwf	___wmul@multiplicand,c
  1290  000A90  EC25  F013         	call	___wmul	;wreg free
  1291  000A94  C00F  F071         	movff	?___wmul,printf@exp
  1292  000A98  C010  F072         	movff	?___wmul+1,printf@exp+1
  1293                           
  1294                           ;doprnt.c: 840: exp /= 10;
  1295  000A9C  C071  F007         	movff	printf@exp,___awdiv@dividend
  1296  000AA0  C072  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1297  000AA4  0E00               	movlw	0
  1298  000AA6  6E0A               	movwf	___awdiv@divisor+1,c
  1299  000AA8  0E0A               	movlw	10
  1300  000AAA  6E09               	movwf	___awdiv@divisor,c
  1301  000AAC  ECA2  F011         	call	___awdiv	;wreg free
  1302  000AB0  C007  F071         	movff	?___awdiv,printf@exp
  1303  000AB4  C008  F072         	movff	?___awdiv+1,printf@exp+1
  1304                           
  1305                           ;doprnt.c: 841: if(exp < 0)
  1306  000AB8  0100               	movlb	0	; () banked
  1307  000ABA  AF72               	btfss	(printf@exp+1)& (0+255),7,b
  1308  000ABC  D003               	goto	l177
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;doprnt.c: 842: exp--;
  1312  000ABE  0771               	decf	printf@exp& (0+255),f,b
  1313  000AC0  A0D8               	btfss	status,0,c
  1314  000AC2  0772               	decf	(printf@exp+1)& (0+255),f,b
  1315  000AC4                     l177:
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1319                           
  1320                           ; BSR set to: 0
  1321  000AC4  5171               	movf	printf@exp& (0+255),w,b
  1322  000AC6  0800               	sublw	0
  1323  000AC8  EC68  F008         	call	_scale
  1324  000ACC  C024  F06D         	movff	?_scale,printf@tmpval
  1325  000AD0  C025  F06E         	movff	?_scale+1,printf@tmpval+1
  1326  000AD4  C026  F06F         	movff	?_scale+2,printf@tmpval+2
  1327                           
  1328                           ;doprnt.c: 847: tmpval.integ *= fval;
  1329  000AD8  C06D  F015         	movff	printf@tmpval,___ftmul@f1
  1330  000ADC  C06E  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1331  000AE0  C06F  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1332  000AE4  C073  F018         	movff	printf@fval,___ftmul@f2
  1333  000AE8  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  1334  000AEC  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1335  000AF0  EC27  F00F         	call	___ftmul	;wreg free
  1336  000AF4  C015  F06D         	movff	?___ftmul,printf@tmpval
  1337  000AF8  C016  F06E         	movff	?___ftmul+1,printf@tmpval+1
  1338  000AFC  C017  F06F         	movff	?___ftmul+2,printf@tmpval+2
  1339                           
  1340                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1341  000B00  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1342  000B04  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1343  000B08  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1344  000B0C  0E00               	movlw	0
  1345  000B0E  6E04               	movwf	___ftge@ff2,c
  1346  000B10  0E80               	movlw	128
  1347  000B12  6E05               	movwf	___ftge@ff2+1,c
  1348  000B14  0E3F               	movlw	63
  1349  000B16  6E06               	movwf	___ftge@ff2+2,c
  1350  000B18  EC5A  F011         	call	___ftge	;wreg free
  1351  000B1C  B0D8               	btfsc	status,0,c
  1352  000B1E  D005               	goto	l178
  1353                           
  1354                           ;doprnt.c: 849: exp--;
  1355  000B20  0100               	movlb	0	; () banked
  1356  000B22  0771               	decf	printf@exp& (0+255),f,b
  1357  000B24  A0D8               	btfss	status,0,c
  1358  000B26  0772               	decf	(printf@exp+1)& (0+255),f,b
  1359  000B28  D013               	goto	l180
  1360  000B2A                     l178:
  1361                           
  1362                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1363                           
  1364                           ; BSR set to: 0
  1365  000B2A  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1366  000B2E  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1367  000B32  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1368  000B36  0E00               	movlw	0
  1369  000B38  6E04               	movwf	___ftge@ff2,c
  1370  000B3A  0E20               	movlw	32
  1371  000B3C  6E05               	movwf	___ftge@ff2+1,c
  1372  000B3E  0E41               	movlw	65
  1373  000B40  6E06               	movwf	___ftge@ff2+2,c
  1374  000B42  EC5A  F011         	call	___ftge	;wreg free
  1375  000B46  A0D8               	btfss	status,0,c
  1376  000B48  D003               	goto	l180
  1377                           
  1378                           ;doprnt.c: 851: exp++;
  1379  000B4A  0100               	movlb	0	; () banked
  1380  000B4C  4B71               	infsnz	printf@exp& (0+255),f,b
  1381  000B4E  2B72               	incf	(printf@exp+1)& (0+255),f,b
  1382  000B50                     l180:
  1383                           
  1384                           ;doprnt.c: 852: }
  1385                           ;doprnt.c: 1112: if(prec <= 12)
  1386                           
  1387                           ; BSR set to: 0
  1388                           
  1389                           ; BSR set to: 0
  1390                           
  1391                           ; BSR set to: 0
  1392  000B50  0100               	movlb	0	; () banked
  1393  000B52  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  1394  000B54  D006               	goto	u3840
  1395  000B56  5177               	movf	(printf@prec+1)& (0+255),w,b
  1396  000B58  E11B               	bnz	l2904
  1397  000B5A  0E0D               	movlw	13
  1398  000B5C  5D76               	subwf	printf@prec& (0+255),w,b
  1399  000B5E  B0D8               	btfsc	status,0,c
  1400  000B60  D017               	goto	l181
  1401  000B62                     u3840:
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;doprnt.c: 1113: fval += fround(prec);
  1405  000B62  C073  F02E         	movff	printf@fval,___ftadd@f1
  1406  000B66  C074  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1407  000B6A  C075  F030         	movff	printf@fval+2,___ftadd@f1+2
  1408  000B6E  5176               	movf	printf@prec& (0+255),w,b
  1409  000B70  ECFB  F00B         	call	_fround
  1410  000B74  C024  F031         	movff	?_fround,___ftadd@f2
  1411  000B78  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1412  000B7C  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1413  000B80  EC24  F00D         	call	___ftadd	;wreg free
  1414  000B84  C02E  F073         	movff	?___ftadd,printf@fval
  1415  000B88  C02F  F074         	movff	?___ftadd+1,printf@fval+1
  1416  000B8C  C030  F075         	movff	?___ftadd+2,printf@fval+2
  1417  000B90                     l181:
  1418  000B90                     l2904:
  1419                           
  1420                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1421  000B90  0100               	movlb	0	; () banked
  1422  000B92  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1423  000B94  D006               	goto	u3850
  1424  000B96  5172               	movf	(printf@exp+1)& (0+255),w,b
  1425  000B98  E120               	bnz	l2912
  1426  000B9A  0E0A               	movlw	10
  1427  000B9C  5D71               	subwf	printf@exp& (0+255),w,b
  1428  000B9E  B0D8               	btfsc	status,0,c
  1429  000BA0  D01C               	goto	u3880
  1430  000BA2                     u3850:
  1431                           
  1432                           ; BSR set to: 0
  1433  000BA2  5173               	movf	printf@fval& (0+255),w,b
  1434  000BA4  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1435  000BA6  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1436  000BA8  B4D8               	btfsc	status,2,c
  1437  000BAA  D056               	goto	l182
  1438                           
  1439                           ; BSR set to: 0
  1440  000BAC  C073  F02B         	movff	printf@fval,___fttol@f1
  1441  000BB0  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  1442  000BB4  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  1443  000BB8  ECA1  F00F         	call	___fttol	;wreg free
  1444  000BBC  502B               	movf	?___fttol,w,c
  1445  000BBE  102C               	iorwf	?___fttol+1,w,c
  1446  000BC0  102D               	iorwf	?___fttol+2,w,c
  1447  000BC2  102E               	iorwf	?___fttol+3,w,c
  1448  000BC4  A4D8               	btfss	status,2,c
  1449  000BC6  D048               	goto	l182
  1450  000BC8  0100               	movlb	0	; () banked
  1451  000BCA  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1452  000BCC  D045               	goto	l182
  1453  000BCE  5172               	movf	(printf@exp+1)& (0+255),w,b
  1454  000BD0  E104               	bnz	l2912
  1455  000BD2  0E02               	movlw	2
  1456  000BD4  5D71               	subwf	printf@exp& (0+255),w,b
  1457  000BD6  A0D8               	btfss	status,0,c
  1458  000BD8  D03F               	goto	l182
  1459  000BDA                     u3880:
  1460  000BDA                     l2912:
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1464  000BDA  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1465  000BDE  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1466  000BE2  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1467  000BE6  0E70               	movlw	112
  1468  000BE8  6E04               	movwf	___ftge@ff2,c
  1469  000BEA  0E89               	movlw	137
  1470  000BEC  6E05               	movwf	___ftge@ff2+1,c
  1471  000BEE  0E40               	movlw	64
  1472  000BF0  6E06               	movwf	___ftge@ff2+2,c
  1473  000BF2  EC5A  F011         	call	___ftge	;wreg free
  1474  000BF6  B0D8               	btfsc	status,0,c
  1475  000BF8  D003               	goto	l185
  1476                           
  1477                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1478  000BFA  0100               	movlb	0	; () banked
  1479  000BFC  0EF7               	movlw	247
  1480  000BFE  D002               	goto	L1
  1481  000C00                     l185:
  1482                           
  1483                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1484                           
  1485                           ; BSR set to: 0
  1486  000C00  0100               	movlb	0	; () banked
  1487  000C02  0EF8               	movlw	248
  1488  000C04                     L1:
  1489  000C04  2771               	addwf	printf@exp& (0+255),f,b
  1490  000C06  0EFF               	movlw	255
  1491  000C08  2372               	addwfc	(printf@exp+1)& (0+255),f,b
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;doprnt.c: 1124: }
  1495                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1496                           
  1497                           ; BSR set to: 0
  1498  000C0A  5171               	movf	printf@exp& (0+255),w,b
  1499  000C0C  EC68  F008         	call	_scale
  1500  000C10  C024  F06D         	movff	?_scale,printf@tmpval
  1501  000C14  C025  F06E         	movff	?_scale+1,printf@tmpval+1
  1502  000C18  C026  F06F         	movff	?_scale+2,printf@tmpval+2
  1503                           
  1504                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1505  000C1C  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1506  000C20  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1507  000C24  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1508  000C28  C06D  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1509  000C2C  C06E  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1510  000C30  C06F  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1511  000C34  ECFA  F00D         	call	__tdiv_to_l_	;wreg free
  1512  000C38  C001  F065         	movff	?__tdiv_to_l_,printf@val
  1513  000C3C  C002  F066         	movff	?__tdiv_to_l_+1,printf@val+1
  1514  000C40  C003  F067         	movff	?__tdiv_to_l_+2,printf@val+2
  1515  000C44  C004  F068         	movff	?__tdiv_to_l_+3,printf@val+3
  1516                           
  1517                           ;doprnt.c: 1129: fval = 0.0;
  1518  000C48  0E00               	movlw	0
  1519  000C4A  0100               	movlb	0	; () banked
  1520  000C4C  6F73               	movwf	printf@fval& (0+255),b
  1521  000C4E  0E00               	movlw	0
  1522  000C50  6F74               	movwf	(printf@fval+1)& (0+255),b
  1523  000C52  0E00               	movlw	0
  1524  000C54  6F75               	movwf	(printf@fval+2)& (0+255),b
  1525                           
  1526                           ;doprnt.c: 1130: } else {
  1527  000C56  D033               	goto	l191
  1528  000C58                     l182:
  1529                           
  1530                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1531                           
  1532                           ; BSR set to: 0
  1533  000C58  C073  F02B         	movff	printf@fval,___fttol@f1
  1534  000C5C  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  1535  000C60  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  1536  000C64  ECA1  F00F         	call	___fttol	;wreg free
  1537  000C68  C02B  F065         	movff	?___fttol,printf@val
  1538  000C6C  C02C  F066         	movff	?___fttol+1,printf@val+1
  1539  000C70  C02D  F067         	movff	?___fttol+2,printf@val+2
  1540  000C74  C02E  F068         	movff	?___fttol+3,printf@val+3
  1541                           
  1542                           ;doprnt.c: 1132: fval -= (double)val;
  1543  000C78  C073  F03A         	movff	printf@fval,___ftsub@f1
  1544  000C7C  C074  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1545  000C80  C075  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1546  000C84  C065  F009         	movff	printf@val,___lltoft@c
  1547  000C88  C066  F00A         	movff	printf@val+1,___lltoft@c+1
  1548  000C8C  C067  F00B         	movff	printf@val+2,___lltoft@c+2
  1549  000C90  C068  F00C         	movff	printf@val+3,___lltoft@c+3
  1550  000C94  EC90  F012         	call	___lltoft	;wreg free
  1551  000C98  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1552  000C9C  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1553  000CA0  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1554  000CA4  ECBE  F012         	call	___ftsub	;wreg free
  1555  000CA8  C03A  F073         	movff	?___ftsub,printf@fval
  1556  000CAC  C03B  F074         	movff	?___ftsub+1,printf@fval+1
  1557  000CB0  C03C  F075         	movff	?___ftsub+2,printf@fval+2
  1558                           
  1559                           ;doprnt.c: 1133: exp = 0;
  1560  000CB4  0E00               	movlw	0
  1561  000CB6  0100               	movlb	0	; () banked
  1562  000CB8  6F72               	movwf	(printf@exp+1)& (0+255),b
  1563  000CBA  0E00               	movlw	0
  1564  000CBC  6F71               	movwf	printf@exp& (0+255),b
  1565  000CBE                     l191:
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;doprnt.c: 1134: }
  1569                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1570                           
  1571                           ; BSR set to: 0
  1572  000CBE  0E01               	movlw	1
  1573  000CC0  6F78               	movwf	printf@c& (0+255),b
  1574  000CC2                     l2932:
  1575                           
  1576                           ; BSR set to: 0
  1577  000CC2  0E0A               	movlw	10
  1578  000CC4  1978               	xorwf	printf@c& (0+255),w,b
  1579  000CC6  B4D8               	btfsc	status,2,c
  1580  000CC8  D018               	goto	u3920
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;doprnt.c: 1137: if(val < dpowers[c])
  1584                           
  1585                           ; BSR set to: 0
  1586                           
  1587                           ; BSR set to: 0
  1588  000CCA  5178               	movf	printf@c& (0+255),w,b
  1589  000CCC  0D04               	mullw	4
  1590  000CCE  0E01               	movlw	low _dpowers
  1591  000CD0  24F3               	addwf	prodl,w,c
  1592  000CD2  6EF6               	movwf	tblptrl,c
  1593  000CD4  0E08               	movlw	high _dpowers
  1594  000CD6  20F4               	addwfc	prodh,w,c
  1595  000CD8  6EF7               	movwf	tblptrh,c
  1596  000CDA                     	if	0	;There are less than 3 active tblptr bytes
  1597  000CDA                     	endif
  1598  000CDA  0009               	tblrd		*+
  1599  000CDC  50F5               	movf	tablat,w,c
  1600  000CDE  5D65               	subwf	printf@val& (0+255),w,b
  1601  000CE0  0009               	tblrd		*+
  1602  000CE2  50F5               	movf	tablat,w,c
  1603  000CE4  5966               	subwfb	(printf@val+1)& (0+255),w,b
  1604  000CE6  0009               	tblrd		*+
  1605  000CE8  50F5               	movf	tablat,w,c
  1606  000CEA  5967               	subwfb	(printf@val+2)& (0+255),w,b
  1607  000CEC  0009               	tblrd		*+
  1608  000CEE  50F5               	movf	tablat,w,c
  1609  000CF0  5968               	subwfb	(printf@val+3)& (0+255),w,b
  1610  000CF2  A0D8               	btfss	status,0,c
  1611  000CF4  D002               	goto	u3920
  1612                           
  1613                           ; BSR set to: 0
  1614                           
  1615                           ; BSR set to: 0
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;doprnt.c: 1138: break;
  1619  000CF6  2B78               	incf	printf@c& (0+255),f,b
  1620  000CF8  D7E4               	goto	l2932
  1621  000CFA                     u3920:
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;doprnt.c: 1142: width -= prec + c + exp;
  1625                           
  1626                           ; BSR set to: 0
  1627  000CFA  C078  F045         	movff	printf@c,??_printf
  1628  000CFE  6A46               	clrf	(??_printf+1)& (0+255),c
  1629  000D00  BE45               	btfsc	??_printf& (0+255),7,c
  1630  000D02  0646               	decf	(??_printf+1)& (0+255),f,c
  1631  000D04  5176               	movf	printf@prec& (0+255),w,b
  1632  000D06  2645               	addwf	??_printf,f,c
  1633  000D08  5177               	movf	(printf@prec+1)& (0+255),w,b
  1634  000D0A  2246               	addwfc	??_printf+1,f,c
  1635  000D0C  5171               	movf	printf@exp& (0+255),w,b
  1636  000D0E  2645               	addwf	??_printf,f,c
  1637  000D10  5172               	movf	(printf@exp+1)& (0+255),w,b
  1638  000D12  2246               	addwfc	??_printf+1,f,c
  1639  000D14  5045               	movf	??_printf,w,c
  1640  000D16  5F6B               	subwf	printf@width& (0+255),f,b
  1641  000D18  5046               	movf	??_printf+1,w,c
  1642  000D1A  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  1643                           
  1644                           ;doprnt.c: 1143: if(
  1645                           ;doprnt.c: 1147: prec)
  1646  000D1C  5176               	movf	printf@prec& (0+255),w,b
  1647  000D1E  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  1648  000D20  B4D8               	btfsc	status,2,c
  1649  000D22  D003               	goto	l195
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;doprnt.c: 1148: width--;
  1653  000D24  076B               	decf	printf@width& (0+255),f,b
  1654  000D26  A0D8               	btfss	status,0,c
  1655  000D28  076C               	decf	(printf@width+1)& (0+255),f,b
  1656  000D2A                     l195:
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;doprnt.c: 1149: if(flag & 0x03)
  1660                           
  1661                           ; BSR set to: 0
  1662  000D2A  0E03               	movlw	3
  1663  000D2C  1569               	andwf	printf@flag& (0+255),w,b
  1664  000D2E  6E45               	movwf	??_printf& (0+255),c
  1665  000D30  0E00               	movlw	0
  1666  000D32  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1667  000D34  6E46               	movwf	(??_printf+1)& (0+255),c
  1668  000D36  5045               	movf	??_printf,w,c
  1669  000D38  1046               	iorwf	??_printf+1,w,c
  1670  000D3A  B4D8               	btfsc	status,2,c
  1671  000D3C  D008               	goto	l197
  1672  000D3E  D004               	goto	L2
  1673  000D40                     l2952:
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;doprnt.c: 1181: (putch(' ') );
  1677  000D40  0E20               	movlw	32
  1678  000D42  ECA7  F013         	call	_putch
  1679                           
  1680                           ;doprnt.c: 1182: width--;
  1681  000D46  0100               	movlb	0	; () banked
  1682  000D48                     L2:
  1683  000D48  076B               	decf	printf@width& (0+255),f,b
  1684  000D4A  A0D8               	btfss	status,0,c
  1685  000D4C  076C               	decf	(printf@width+1)& (0+255),f,b
  1686  000D4E                     l197:
  1687                           
  1688                           ; BSR set to: 0
  1689                           
  1690                           ; BSR set to: 0
  1691  000D4E  BF6C               	btfsc	(printf@width+1)& (0+255),7,b
  1692  000D50  D005               	goto	u3950
  1693  000D52  516C               	movf	(printf@width+1)& (0+255),w,b
  1694  000D54  E1F5               	bnz	l2952
  1695  000D56  056B               	decf	printf@width& (0+255),w,b
  1696  000D58  B0D8               	btfsc	status,0,c
  1697  000D5A  D7F2               	goto	l198
  1698  000D5C                     u3950:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;doprnt.c: 1183: }
  1702                           ;doprnt.c: 1188: if(flag & 0x03)
  1703                           
  1704                           ; BSR set to: 0
  1705  000D5C  0E03               	movlw	3
  1706  000D5E  1569               	andwf	printf@flag& (0+255),w,b
  1707  000D60  6E45               	movwf	??_printf& (0+255),c
  1708  000D62  0E00               	movlw	0
  1709  000D64  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1710  000D66  6E46               	movwf	(??_printf+1)& (0+255),c
  1711  000D68  5045               	movf	??_printf,w,c
  1712  000D6A  1046               	iorwf	??_printf+1,w,c
  1713  000D6C  B4D8               	btfsc	status,2,c
  1714  000D6E  D04A               	goto	l201
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;doprnt.c: 1190: (putch('-') );
  1718  000D70  0E2D               	movlw	45
  1719  000D72  ECA7  F013         	call	_putch
  1720                           
  1721                           ;doprnt.c: 1195: }
  1722                           ;doprnt.c: 1196: while(c--) {
  1723  000D76  D046               	goto	l201
  1724  000D78                     
  1725                           ;doprnt.c: 1200: {
  1726                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1727  000D78  C065  F001         	movff	printf@val,___lldiv@dividend
  1728  000D7C  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  1729  000D80  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  1730  000D84  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  1731  000D88  0100               	movlb	0	; () banked
  1732  000D8A  5178               	movf	printf@c& (0+255),w,b
  1733  000D8C  0D04               	mullw	4
  1734  000D8E  0E01               	movlw	low _dpowers
  1735  000D90  24F3               	addwf	prodl,w,c
  1736  000D92  6EF6               	movwf	tblptrl,c
  1737  000D94  0E08               	movlw	high _dpowers
  1738  000D96  20F4               	addwfc	prodh,w,c
  1739  000D98  6EF7               	movwf	tblptrh,c
  1740  000D9A                     	if	0	;There are less than 3 active tblptr bytes
  1741  000D9A                     	endif
  1742  000D9A  0009               	tblrd		*+
  1743  000D9C  CFF5 F005          	movff	tablat,___lldiv@divisor
  1744  000DA0  0009               	tblrd		*+
  1745  000DA2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1746  000DA6  0009               	tblrd		*+
  1747  000DA8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1748  000DAC  000A               	tblrd		*-
  1749  000DAE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1750  000DB2  ECE4  F011         	call	___lldiv	;wreg free
  1751  000DB6  C001  F06D         	movff	?___lldiv,printf@tmpval
  1752  000DBA  C002  F06E         	movff	?___lldiv+1,printf@tmpval+1
  1753  000DBE  C003  F06F         	movff	?___lldiv+2,printf@tmpval+2
  1754  000DC2  C004  F070         	movff	?___lldiv+3,printf@tmpval+3
  1755                           
  1756                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1757  000DC6  C06D  F001         	movff	printf@tmpval,___llmod@dividend
  1758  000DCA  C06E  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1759  000DCE  C06F  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1760  000DD2  C070  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1761  000DD6  0E0A               	movlw	10
  1762  000DD8  6E05               	movwf	___llmod@divisor,c
  1763  000DDA  0E00               	movlw	0
  1764  000DDC  6E06               	movwf	___llmod@divisor+1,c
  1765  000DDE  0E00               	movlw	0
  1766  000DE0  6E07               	movwf	___llmod@divisor+2,c
  1767  000DE2  0E00               	movlw	0
  1768  000DE4  6E08               	movwf	___llmod@divisor+3,c
  1769  000DE6  EC5D  F012         	call	___llmod	;wreg free
  1770  000DEA  C001  F06D         	movff	?___llmod,printf@tmpval
  1771  000DEE  C002  F06E         	movff	?___llmod+1,printf@tmpval+1
  1772  000DF2  C003  F06F         	movff	?___llmod+2,printf@tmpval+2
  1773  000DF6  C004  F070         	movff	?___llmod+3,printf@tmpval+3
  1774                           
  1775                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1776  000DFA  0100               	movlb	0	; () banked
  1777  000DFC  516D               	movf	printf@tmpval& (0+255),w,b
  1778  000DFE  0F30               	addlw	48
  1779  000E00  ECA7  F013         	call	_putch
  1780  000E04                     l201:
  1781  000E04  0100               	movlb	0	; () banked
  1782  000E06  0778               	decf	printf@c& (0+255),f,b
  1783  000E08  2978               	incf	printf@c& (0+255),w,b
  1784  000E0A  B4D8               	btfsc	status,2,c
  1785  000E0C  D008               	goto	l204
  1786  000E0E  D7B4               	goto	l202
  1787  000E10                     l2970:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;doprnt.c: 1208: (putch('0') );
  1791  000E10  0E30               	movlw	48
  1792  000E12  ECA7  F013         	call	_putch
  1793                           
  1794                           ;doprnt.c: 1209: exp--;
  1795  000E16  0100               	movlb	0	; () banked
  1796  000E18  0771               	decf	printf@exp& (0+255),f,b
  1797  000E1A  A0D8               	btfss	status,0,c
  1798  000E1C  0772               	decf	(printf@exp+1)& (0+255),f,b
  1799  000E1E                     l204:
  1800                           
  1801                           ; BSR set to: 0
  1802                           
  1803                           ; BSR set to: 0
  1804  000E1E  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1805  000E20  D005               	goto	u3980
  1806  000E22  5172               	movf	(printf@exp+1)& (0+255),w,b
  1807  000E24  E1F5               	bnz	l2970
  1808  000E26  0571               	decf	printf@exp& (0+255),w,b
  1809  000E28  B0D8               	btfsc	status,0,c
  1810  000E2A  D7F2               	goto	l205
  1811  000E2C                     u3980:
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;doprnt.c: 1210: }
  1815                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1816                           
  1817                           ; BSR set to: 0
  1818  000E2C  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  1819  000E2E  D009               	goto	l207
  1820  000E30  5177               	movf	(printf@prec+1)& (0+255),w,b
  1821  000E32  E104               	bnz	u3990
  1822  000E34  0E09               	movlw	9
  1823  000E36  5D76               	subwf	printf@prec& (0+255),w,b
  1824  000E38  A0D8               	btfss	status,0,c
  1825  000E3A  D003               	goto	l207
  1826  000E3C                     u3990:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1830  000E3C  0E08               	movlw	8
  1831  000E3E  6F78               	movwf	printf@c& (0+255),b
  1832  000E40  D002               	goto	l208
  1833  000E42                     l207:
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;doprnt.c: 1213: else
  1837                           ;doprnt.c: 1214: c = prec;
  1838  000E42  C076  F078         	movff	printf@prec,printf@c
  1839  000E46                     l208:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;doprnt.c: 1215: prec -= c;
  1843                           
  1844                           ; BSR set to: 0
  1845  000E46  5178               	movf	printf@c& (0+255),w,b
  1846  000E48  5F76               	subwf	printf@prec& (0+255),f,b
  1847  000E4A  0E00               	movlw	0
  1848  000E4C  BF78               	btfsc	printf@c& (0+255),7,b
  1849  000E4E  0EFF               	movlw	255
  1850  000E50  5B77               	subwfb	(printf@prec+1)& (0+255),f,b
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;doprnt.c: 1219: if(c)
  1854  000E52  5178               	movf	printf@c& (0+255),w,b
  1855  000E54  B4D8               	btfsc	status,2,c
  1856  000E56  D003               	goto	l209
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;doprnt.c: 1221: (putch('.') );
  1860  000E58  0E2E               	movlw	46
  1861  000E5A  ECA7  F013         	call	_putch
  1862  000E5E                     l209:
  1863                           
  1864                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1865  000E5E  0100               	movlb	0	; () banked
  1866  000E60  5178               	movf	printf@c& (0+255),w,b
  1867  000E62  EC68  F008         	call	_scale
  1868  000E66  C024  F060         	movff	?_scale,_printf$783
  1869  000E6A  C025  F061         	movff	?_scale+1,_printf$783+1
  1870  000E6E  C026  F062         	movff	?_scale+2,_printf$783+2
  1871                           
  1872                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1873  000E72  C073  F018         	movff	printf@fval,___ftmul@f2
  1874  000E76  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  1875  000E7A  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1876  000E7E  C060  F015         	movff	_printf$783,___ftmul@f1
  1877  000E82  C061  F016         	movff	_printf$783+1,___ftmul@f1+1
  1878  000E86  C062  F017         	movff	_printf$783+2,___ftmul@f1+2
  1879  000E8A  EC27  F00F         	call	___ftmul	;wreg free
  1880  000E8E  C015  F02B         	movff	?___ftmul,___fttol@f1
  1881  000E92  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1882  000E96  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1883  000E9A  ECA1  F00F         	call	___fttol	;wreg free
  1884  000E9E  C02B  F065         	movff	?___fttol,printf@val
  1885  000EA2  C02C  F066         	movff	?___fttol+1,printf@val+1
  1886  000EA6  C02D  F067         	movff	?___fttol+2,printf@val+2
  1887  000EAA  C02E  F068         	movff	?___fttol+3,printf@val+3
  1888                           
  1889                           ;doprnt.c: 1228: while(c--) {
  1890  000EAE  D06D               	goto	l210
  1891  000EB0                     
  1892                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1893  000EB0  C065  F001         	movff	printf@val,___lldiv@dividend
  1894  000EB4  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  1895  000EB8  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  1896  000EBC  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  1897  000EC0  0100               	movlb	0	; () banked
  1898  000EC2  5178               	movf	printf@c& (0+255),w,b
  1899  000EC4  0D04               	mullw	4
  1900  000EC6  0E01               	movlw	low _dpowers
  1901  000EC8  24F3               	addwf	prodl,w,c
  1902  000ECA  6EF6               	movwf	tblptrl,c
  1903  000ECC  0E08               	movlw	high _dpowers
  1904  000ECE  20F4               	addwfc	prodh,w,c
  1905  000ED0  6EF7               	movwf	tblptrh,c
  1906  000ED2                     	if	0	;There are less than 3 active tblptr bytes
  1907  000ED2                     	endif
  1908  000ED2  0009               	tblrd		*+
  1909  000ED4  CFF5 F005          	movff	tablat,___lldiv@divisor
  1910  000ED8  0009               	tblrd		*+
  1911  000EDA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1912  000EDE  0009               	tblrd		*+
  1913  000EE0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1914  000EE4  000A               	tblrd		*-
  1915  000EE6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1916  000EEA  ECE4  F011         	call	___lldiv	;wreg free
  1917  000EEE  C001  F06D         	movff	?___lldiv,printf@tmpval
  1918  000EF2  C002  F06E         	movff	?___lldiv+1,printf@tmpval+1
  1919  000EF6  C003  F06F         	movff	?___lldiv+2,printf@tmpval+2
  1920  000EFA  C004  F070         	movff	?___lldiv+3,printf@tmpval+3
  1921                           
  1922                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1923  000EFE  C06D  F001         	movff	printf@tmpval,___llmod@dividend
  1924  000F02  C06E  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1925  000F06  C06F  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1926  000F0A  C070  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1927  000F0E  0E0A               	movlw	10
  1928  000F10  6E05               	movwf	___llmod@divisor,c
  1929  000F12  0E00               	movlw	0
  1930  000F14  6E06               	movwf	___llmod@divisor+1,c
  1931  000F16  0E00               	movlw	0
  1932  000F18  6E07               	movwf	___llmod@divisor+2,c
  1933  000F1A  0E00               	movlw	0
  1934  000F1C  6E08               	movwf	___llmod@divisor+3,c
  1935  000F1E  EC5D  F012         	call	___llmod	;wreg free
  1936  000F22  C001  F06D         	movff	?___llmod,printf@tmpval
  1937  000F26  C002  F06E         	movff	?___llmod+1,printf@tmpval+1
  1938  000F2A  C003  F06F         	movff	?___llmod+2,printf@tmpval+2
  1939  000F2E  C004  F070         	movff	?___llmod+3,printf@tmpval+3
  1940                           
  1941                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1942  000F32  0100               	movlb	0	; () banked
  1943  000F34  516D               	movf	printf@tmpval& (0+255),w,b
  1944  000F36  0F30               	addlw	48
  1945  000F38  ECA7  F013         	call	_putch
  1946                           
  1947                           ;doprnt.c: 1232: val %= dpowers[c];
  1948  000F3C  C065  F001         	movff	printf@val,___llmod@dividend
  1949  000F40  C066  F002         	movff	printf@val+1,___llmod@dividend+1
  1950  000F44  C067  F003         	movff	printf@val+2,___llmod@dividend+2
  1951  000F48  C068  F004         	movff	printf@val+3,___llmod@dividend+3
  1952  000F4C  0100               	movlb	0	; () banked
  1953  000F4E  5178               	movf	printf@c& (0+255),w,b
  1954  000F50  0D04               	mullw	4
  1955  000F52  0E01               	movlw	low _dpowers
  1956  000F54  24F3               	addwf	prodl,w,c
  1957  000F56  6EF6               	movwf	tblptrl,c
  1958  000F58  0E08               	movlw	high _dpowers
  1959  000F5A  20F4               	addwfc	prodh,w,c
  1960  000F5C  6EF7               	movwf	tblptrh,c
  1961  000F5E                     	if	0	;There are less than 3 active tblptr bytes
  1962  000F5E                     	endif
  1963  000F5E  0009               	tblrd		*+
  1964  000F60  CFF5 F005          	movff	tablat,___llmod@divisor
  1965  000F64  0009               	tblrd		*+
  1966  000F66  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1967  000F6A  0009               	tblrd		*+
  1968  000F6C  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1969  000F70  000A               	tblrd		*-
  1970  000F72  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1971  000F76  EC5D  F012         	call	___llmod	;wreg free
  1972  000F7A  C001  F065         	movff	?___llmod,printf@val
  1973  000F7E  C002  F066         	movff	?___llmod+1,printf@val+1
  1974  000F82  C003  F067         	movff	?___llmod+2,printf@val+2
  1975  000F86  C004  F068         	movff	?___llmod+3,printf@val+3
  1976  000F8A                     l210:
  1977  000F8A  0100               	movlb	0	; () banked
  1978  000F8C  0778               	decf	printf@c& (0+255),f,b
  1979  000F8E  2978               	incf	printf@c& (0+255),w,b
  1980  000F90  B4D8               	btfsc	status,2,c
  1981  000F92  D008               	goto	l213
  1982  000F94  D78D               	goto	l211
  1983  000F96                     
  1984                           ; BSR set to: 0
  1985                           ;doprnt.c: 1236: (putch('0') );
  1986                           
  1987                           ; BSR set to: 0
  1988  000F96  0E30               	movlw	48
  1989  000F98  ECA7  F013         	call	_putch
  1990                           
  1991                           ;doprnt.c: 1237: prec--;
  1992  000F9C  0100               	movlb	0	; () banked
  1993  000F9E  0776               	decf	printf@prec& (0+255),f,b
  1994  000FA0  A0D8               	btfss	status,0,c
  1995  000FA2  0777               	decf	(printf@prec+1)& (0+255),f,b
  1996  000FA4                     l213:
  1997                           
  1998                           ; BSR set to: 0
  1999                           
  2000                           ; BSR set to: 0
  2001  000FA4  5176               	movf	printf@prec& (0+255),w,b
  2002  000FA6  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  2003  000FA8  B4D8               	btfsc	status,2,c
  2004  000FAA  D083               	goto	l229
  2005  000FAC  D7F4               	goto	l214
  2006  000FAE                     l173:
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;doprnt.c: 1246: }
  2010                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2011                           
  2012                           ; BSR set to: 0
  2013  000FAE  5176               	movf	printf@prec& (0+255),w,b
  2014  000FB0  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  2015  000FB2  A4D8               	btfss	status,2,c
  2016  000FB4  D008               	goto	l216
  2017                           
  2018                           ; BSR set to: 0
  2019  000FB6  5165               	movf	printf@val& (0+255),w,b
  2020  000FB8  1166               	iorwf	(printf@val+1)& (0+255),w,b
  2021  000FBA  1167               	iorwf	(printf@val+2)& (0+255),w,b
  2022  000FBC  1168               	iorwf	(printf@val+3)& (0+255),w,b
  2023  000FBE  A4D8               	btfss	status,2,c
  2024  000FC0  D002               	goto	l216
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;doprnt.c: 1291: prec++;
  2028  000FC2  4B76               	infsnz	printf@prec& (0+255),f,b
  2029  000FC4  2B77               	incf	(printf@prec+1)& (0+255),f,b
  2030  000FC6                     l216:
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;doprnt.c: 1339: if(c < prec)
  2034                           
  2035                           ; BSR set to: 0
  2036  000FC6  0E80               	movlw	128
  2037  000FC8  BF78               	btfsc	printf@c& (0+255),7,b
  2038  000FCA  0E7F               	movlw	127
  2039  000FCC  6E45               	movwf	??_printf& (0+255),c
  2040  000FCE  5176               	movf	printf@prec& (0+255),w,b
  2041  000FD0  5D78               	subwf	printf@c& (0+255),w,b
  2042  000FD2  5177               	movf	(printf@prec+1)& (0+255),w,b
  2043  000FD4  0A80               	xorlw	128
  2044  000FD6  5845               	subwfb	??_printf& (0+255),w,c
  2045  000FD8  B0D8               	btfsc	status,0,c
  2046  000FDA  D003               	goto	l217
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;doprnt.c: 1340: c = prec;
  2050  000FDC  C076  F078         	movff	printf@prec,printf@c
  2051  000FE0  D010               	goto	l219
  2052  000FE2                     l217:
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;doprnt.c: 1341: else if(prec < c)
  2056                           
  2057                           ; BSR set to: 0
  2058  000FE2  5177               	movf	(printf@prec+1)& (0+255),w,b
  2059  000FE4  0A80               	xorlw	128
  2060  000FE6  6E45               	movwf	??_printf& (0+255),c
  2061  000FE8  5178               	movf	printf@c& (0+255),w,b
  2062  000FEA  5D76               	subwf	printf@prec& (0+255),w,b
  2063  000FEC  0E80               	movlw	128
  2064  000FEE  BF78               	btfsc	printf@c& (0+255),7,b
  2065  000FF0  0E7F               	movlw	127
  2066  000FF2  5845               	subwfb	??_printf& (0+255),w,c
  2067  000FF4  B0D8               	btfsc	status,0,c
  2068  000FF6  D005               	goto	l219
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;doprnt.c: 1342: prec = c;
  2072  000FF8  5178               	movf	printf@c& (0+255),w,b
  2073  000FFA  6F76               	movwf	printf@prec& (0+255),b
  2074  000FFC  6B77               	clrf	(printf@prec+1)& (0+255),b
  2075  000FFE  BF76               	btfsc	printf@prec& (0+255),7,b
  2076  001000  0777               	decf	(printf@prec+1)& (0+255),f,b
  2077  001002                     l219:
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2081                           
  2082                           ; BSR set to: 0
  2083                           
  2084                           ; BSR set to: 0
  2085  001002  516B               	movf	printf@width& (0+255),w,b
  2086  001004  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2087  001006  B4D8               	btfsc	status,2,c
  2088  001008  D00D               	goto	l220
  2089                           
  2090                           ; BSR set to: 0
  2091  00100A  0E03               	movlw	3
  2092  00100C  1569               	andwf	printf@flag& (0+255),w,b
  2093  00100E  6E45               	movwf	??_printf& (0+255),c
  2094  001010  0E00               	movlw	0
  2095  001012  156A               	andwf	(printf@flag+1)& (0+255),w,b
  2096  001014  6E46               	movwf	(??_printf+1)& (0+255),c
  2097  001016  5045               	movf	??_printf,w,c
  2098  001018  1046               	iorwf	??_printf+1,w,c
  2099  00101A  B4D8               	btfsc	status,2,c
  2100  00101C  D003               	goto	l220
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;doprnt.c: 1346: width--;
  2104  00101E  076B               	decf	printf@width& (0+255),f,b
  2105  001020  A0D8               	btfss	status,0,c
  2106  001022  076C               	decf	(printf@width+1)& (0+255),f,b
  2107  001024                     l220:
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2111                           
  2112                           ; BSR set to: 0
  2113  001024  AD6A               	btfss	(printf@flag+1)& (0+255),6,b
  2114  001026  D013               	goto	l223
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;doprnt.c: 1349: if(width > prec)
  2118  001028  516B               	movf	printf@width& (0+255),w,b
  2119  00102A  5D76               	subwf	printf@prec& (0+255),w,b
  2120  00102C  5177               	movf	(printf@prec+1)& (0+255),w,b
  2121  00102E  0A80               	xorlw	128
  2122  001030  6E45               	movwf	??_printf& (0+255),c
  2123  001032  516C               	movf	(printf@width+1)& (0+255),w,b
  2124  001034  0A80               	xorlw	128
  2125  001036  5845               	subwfb	??_printf& (0+255),w,c
  2126  001038  B0D8               	btfsc	status,0,c
  2127  00103A  D005               	goto	l222
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;doprnt.c: 1350: width -= prec;
  2131  00103C  5176               	movf	printf@prec& (0+255),w,b
  2132  00103E  5F6B               	subwf	printf@width& (0+255),f,b
  2133  001040  5177               	movf	(printf@prec+1)& (0+255),w,b
  2134  001042  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  2135  001044  D004               	goto	l223
  2136  001046                     l222:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;doprnt.c: 1351: else
  2140                           ;doprnt.c: 1352: width = 0;
  2141                           
  2142                           ; BSR set to: 0
  2143  001046  0E00               	movlw	0
  2144  001048  6F6C               	movwf	(printf@width+1)& (0+255),b
  2145  00104A  0E00               	movlw	0
  2146  00104C  6F6B               	movwf	printf@width& (0+255),b
  2147  00104E                     l223:
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;doprnt.c: 1353: }
  2151                           ;doprnt.c: 1381: if(width > c)
  2152                           
  2153                           ; BSR set to: 0
  2154                           
  2155                           ; BSR set to: 0
  2156  00104E  0E80               	movlw	128
  2157  001050  BF78               	btfsc	printf@c& (0+255),7,b
  2158  001052  0E7F               	movlw	127
  2159  001054  6E45               	movwf	??_printf& (0+255),c
  2160  001056  516B               	movf	printf@width& (0+255),w,b
  2161  001058  5D78               	subwf	printf@c& (0+255),w,b
  2162  00105A  516C               	movf	(printf@width+1)& (0+255),w,b
  2163  00105C  0A80               	xorlw	128
  2164  00105E  5845               	subwfb	??_printf& (0+255),w,c
  2165  001060  B0D8               	btfsc	status,0,c
  2166  001062  D007               	goto	l224
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;doprnt.c: 1382: width -= c;
  2170  001064  5178               	movf	printf@c& (0+255),w,b
  2171  001066  5F6B               	subwf	printf@width& (0+255),f,b
  2172  001068  0E00               	movlw	0
  2173  00106A  BF78               	btfsc	printf@c& (0+255),7,b
  2174  00106C  0EFF               	movlw	255
  2175  00106E  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  2176  001070  D004               	goto	l225
  2177  001072                     l224:
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;doprnt.c: 1383: else
  2181                           ;doprnt.c: 1384: width = 0;
  2182                           
  2183                           ; BSR set to: 0
  2184  001072  0E00               	movlw	0
  2185  001074  6F6C               	movwf	(printf@width+1)& (0+255),b
  2186  001076  0E00               	movlw	0
  2187  001078  6F6B               	movwf	printf@width& (0+255),b
  2188  00107A                     l225:
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;doprnt.c: 1422: {
  2192                           ;doprnt.c: 1424: if(width
  2193                           ;doprnt.c: 1428: )
  2194                           
  2195                           ; BSR set to: 0
  2196  00107A  516B               	movf	printf@width& (0+255),w,b
  2197  00107C  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2198  00107E  B4D8               	btfsc	status,2,c
  2199  001080  D00B               	goto	u4130
  2200  001082                     u4120:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;doprnt.c: 1430: (putch(' ') );
  2204                           
  2205                           ; BSR set to: 0
  2206                           
  2207                           ;doprnt.c: 1429: do
  2208  001082  0E20               	movlw	32
  2209  001084  ECA7  F013         	call	_putch
  2210                           
  2211                           ;doprnt.c: 1431: while(--width);
  2212  001088  0100               	movlb	0	; () banked
  2213  00108A  076B               	decf	printf@width& (0+255),f,b
  2214  00108C  A0D8               	btfss	status,0,c
  2215  00108E  076C               	decf	(printf@width+1)& (0+255),f,b
  2216  001090  516B               	movf	printf@width& (0+255),w,b
  2217  001092  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2218  001094  A4D8               	btfss	status,2,c
  2219  001096  D7F5               	goto	u4120
  2220  001098                     u4130:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;doprnt.c: 1438: if(flag & 0x03)
  2224                           
  2225                           ; BSR set to: 0
  2226                           
  2227                           ; BSR set to: 0
  2228  001098  0E03               	movlw	3
  2229  00109A  1569               	andwf	printf@flag& (0+255),w,b
  2230  00109C  6E45               	movwf	??_printf& (0+255),c
  2231  00109E  0E00               	movlw	0
  2232  0010A0  156A               	andwf	(printf@flag+1)& (0+255),w,b
  2233  0010A2  6E46               	movwf	(??_printf+1)& (0+255),c
  2234  0010A4  5045               	movf	??_printf,w,c
  2235  0010A6  1046               	iorwf	??_printf+1,w,c
  2236  0010A8  B4D8               	btfsc	status,2,c
  2237  0010AA  D003               	goto	l229
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 1439: (putch('-') );
  2241  0010AC  0E2D               	movlw	45
  2242  0010AE  ECA7  F013         	call	_putch
  2243  0010B2                     l229:
  2244  0010B2  C040  FFF6         	movff	printf@f,tblptrl
  2245  0010B6  C041  FFF7         	movff	printf@f+1,tblptrh
  2246  0010BA  4A40               	infsnz	printf@f,f,c
  2247  0010BC  2A41               	incf	printf@f+1,f,c
  2248  0010BE                     	if	0	;tblptru may be non-zero
  2249  0010BE                     	endif
  2250  0010BE                     	if	0	;tblptru may be non-zero
  2251  0010BE                     	endif
  2252  0010BE  0008               	tblrd		*
  2253  0010C0  CFF5 F078          	movff	tablat,printf@c
  2254  0010C4  0100               	movlb	0	; () banked
  2255  0010C6  5178               	movf	printf@c& (0+255),w,b
  2256  0010C8  B4D8               	btfsc	status,2,c
  2257  0010CA  0012               	return	
  2258  0010CC  EF4A  F004         	goto	l157
  2259  0010D0                     __end_of_printf:
  2260                           	opt stack 0
  2261                           tblptru	equ	0xFF8
  2262                           tblptrh	equ	0xFF7
  2263                           tblptrl	equ	0xFF6
  2264                           tablat	equ	0xFF5
  2265                           prodh	equ	0xFF4
  2266                           prodl	equ	0xFF3
  2267                           wreg	equ	0xFE8
  2268                           postinc2	equ	0xFDE
  2269                           postdec2	equ	0xFDD
  2270                           fsr2h	equ	0xFDA
  2271                           fsr2l	equ	0xFD9
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _scale *****************
  2275 ;; Defined at:
  2276 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  scl             1    wreg     char 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  scl             1   41[COMRAM] char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  3   35[COMRAM] char 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2290 ;;      Params:         3       0       0       0       0       0       0       0       0
  2291 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2293 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2294 ;;Total ram usage:        7 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    2
  2297 ;; This function calls:
  2298 ;;		___awdiv
  2299 ;;		___awmod
  2300 ;;		___ftmul
  2301 ;;		___wmul
  2302 ;; This function is called by:
  2303 ;;		_printf
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text2
  2308  0010D0                     __ptext2:
  2309                           	opt stack 0
  2310  0010D0                     _scale:
  2311                           	opt stack 27
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;incstack = 0
  2315                           ;scale@scl stored from wreg
  2316  0010D0  6E2A               	movwf	scale@scl,c
  2317                           
  2318                           ;doprnt.c: 428: if(scl < 0) {
  2319  0010D2  AE2A               	btfss	scale@scl,7,c
  2320  0010D4  D101               	goto	l146
  2321                           
  2322                           ;doprnt.c: 429: scl = -scl;
  2323  0010D6  6C2A               	negf	scale@scl,c
  2324                           
  2325                           ;doprnt.c: 430: if(scl>=110)
  2326  0010D8  502A               	movf	scale@scl,w,c
  2327  0010DA  0A80               	xorlw	128
  2328  0010DC  0F12               	addlw	-238
  2329  0010DE  A0D8               	btfss	status,0,c
  2330  0010E0  D091               	goto	l147
  2331                           
  2332                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2333  0010E2  0E00               	movlw	0
  2334  0010E4  6E12               	movwf	___wmul@multiplicand+1,c
  2335  0010E6  0E03               	movlw	3
  2336  0010E8  6E11               	movwf	___wmul@multiplicand,c
  2337  0010EA  0E00               	movlw	0
  2338  0010EC  6E0A               	movwf	___awdiv@divisor+1,c
  2339  0010EE  0E0A               	movlw	10
  2340  0010F0  6E09               	movwf	___awdiv@divisor,c
  2341  0010F2  0E00               	movlw	0
  2342  0010F4  6E04               	movwf	___awmod@divisor+1,c
  2343  0010F6  0E64               	movlw	100
  2344  0010F8  6E03               	movwf	___awmod@divisor,c
  2345  0010FA  502A               	movf	scale@scl,w,c
  2346  0010FC  6E01               	movwf	___awmod@dividend,c
  2347  0010FE  6A02               	clrf	___awmod@dividend+1,c
  2348  001100  BE01               	btfsc	___awmod@dividend,7,c
  2349  001102  0602               	decf	___awmod@dividend+1,f,c
  2350  001104  EC25  F012         	call	___awmod	;wreg free
  2351  001108  C001  F007         	movff	?___awmod,___awdiv@dividend
  2352  00110C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2353  001110  ECA2  F011         	call	___awdiv	;wreg free
  2354  001114  0E09               	movlw	9
  2355  001116  2407               	addwf	?___awdiv,w,c
  2356  001118  6E0F               	movwf	___wmul@multiplier,c
  2357  00111A  0E00               	movlw	0
  2358  00111C  2008               	addwfc	?___awdiv+1,w,c
  2359  00111E  6E10               	movwf	___wmul@multiplier+1,c
  2360  001120  EC25  F013         	call	___wmul	;wreg free
  2361  001124  0E50               	movlw	low __npowers_
  2362  001126  240F               	addwf	?___wmul,w,c
  2363  001128  6EF6               	movwf	tblptrl,c
  2364  00112A  0E08               	movlw	high __npowers_
  2365  00112C  2010               	addwfc	?___wmul+1,w,c
  2366  00112E  6EF7               	movwf	tblptrh,c
  2367  001130                     	if	0	;There are less than 3 active tblptr bytes
  2368  001130                     	endif
  2369  001130  0009               	tblrd		*+
  2370  001132  CFF5 F018          	movff	tablat,___ftmul@f2
  2371  001136  0009               	tblrd		*+
  2372  001138  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2373  00113C  000A               	tblrd		*-
  2374  00113E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2375  001142  0E00               	movlw	0
  2376  001144  6E0A               	movwf	___awdiv@divisor+1,c
  2377  001146  0E64               	movlw	100
  2378  001148  6E09               	movwf	___awdiv@divisor,c
  2379  00114A  502A               	movf	scale@scl,w,c
  2380  00114C  6E07               	movwf	___awdiv@dividend,c
  2381  00114E  6A08               	clrf	___awdiv@dividend+1,c
  2382  001150  BE07               	btfsc	___awdiv@dividend,7,c
  2383  001152  0608               	decf	___awdiv@dividend+1,f,c
  2384  001154  ECA2  F011         	call	___awdiv	;wreg free
  2385  001158  0E12               	movlw	18
  2386  00115A  2407               	addwf	?___awdiv,w,c
  2387  00115C  6E0F               	movwf	___wmul@multiplier,c
  2388  00115E  0E00               	movlw	0
  2389  001160  2008               	addwfc	?___awdiv+1,w,c
  2390  001162  6E10               	movwf	___wmul@multiplier+1,c
  2391  001164  0E00               	movlw	0
  2392  001166  6E12               	movwf	___wmul@multiplicand+1,c
  2393  001168  0E03               	movlw	3
  2394  00116A  6E11               	movwf	___wmul@multiplicand,c
  2395  00116C  EC25  F013         	call	___wmul	;wreg free
  2396  001170  0E50               	movlw	low __npowers_
  2397  001172  240F               	addwf	?___wmul,w,c
  2398  001174  6EF6               	movwf	tblptrl,c
  2399  001176  0E08               	movlw	high __npowers_
  2400  001178  2010               	addwfc	?___wmul+1,w,c
  2401  00117A  6EF7               	movwf	tblptrh,c
  2402  00117C                     	if	0	;There are less than 3 active tblptr bytes
  2403  00117C                     	endif
  2404  00117C  0009               	tblrd		*+
  2405  00117E  CFF5 F015          	movff	tablat,___ftmul@f1
  2406  001182  0009               	tblrd		*+
  2407  001184  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2408  001188  000A               	tblrd		*-
  2409  00118A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2410  00118E  EC27  F00F         	call	___ftmul	;wreg free
  2411  001192  C015  F027         	movff	?___ftmul,_scale$782
  2412  001196  C016  F028         	movff	?___ftmul+1,_scale$782+1
  2413  00119A  C017  F029         	movff	?___ftmul+2,_scale$782+2
  2414                           
  2415                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2416  00119E  C027  F015         	movff	_scale$782,___ftmul@f1
  2417  0011A2  C028  F016         	movff	_scale$782+1,___ftmul@f1+1
  2418  0011A6  C029  F017         	movff	_scale$782+2,___ftmul@f1+2
  2419  0011AA  0E00               	movlw	0
  2420  0011AC  6E12               	movwf	___wmul@multiplicand+1,c
  2421  0011AE  0E03               	movlw	3
  2422  0011B0  6E11               	movwf	___wmul@multiplicand,c
  2423  0011B2  0E00               	movlw	0
  2424  0011B4  6E04               	movwf	___awmod@divisor+1,c
  2425  0011B6  0E0A               	movlw	10
  2426  0011B8  6E03               	movwf	___awmod@divisor,c
  2427  0011BA  502A               	movf	scale@scl,w,c
  2428  0011BC  6E01               	movwf	___awmod@dividend,c
  2429  0011BE  6A02               	clrf	___awmod@dividend+1,c
  2430  0011C0  BE01               	btfsc	___awmod@dividend,7,c
  2431  0011C2  0602               	decf	___awmod@dividend+1,f,c
  2432  0011C4  EC25  F012         	call	___awmod	;wreg free
  2433  0011C8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2434  0011CC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2435  0011D0  EC25  F013         	call	___wmul	;wreg free
  2436  0011D4  0E50               	movlw	low __npowers_
  2437  0011D6  240F               	addwf	?___wmul,w,c
  2438  0011D8  6EF6               	movwf	tblptrl,c
  2439  0011DA  0E08               	movlw	high __npowers_
  2440  0011DC  2010               	addwfc	?___wmul+1,w,c
  2441  0011DE  6EF7               	movwf	tblptrh,c
  2442  0011E0                     	if	0	;There are less than 3 active tblptr bytes
  2443  0011E0                     	endif
  2444  0011E0  0009               	tblrd		*+
  2445  0011E2  CFF5 F018          	movff	tablat,___ftmul@f2
  2446  0011E6  0009               	tblrd		*+
  2447  0011E8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2448  0011EC  000A               	tblrd		*-
  2449  0011EE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2450  0011F2  EC27  F00F         	call	___ftmul	;wreg free
  2451  0011F6  C015  F024         	movff	?___ftmul,?_scale
  2452  0011FA  C016  F025         	movff	?___ftmul+1,?_scale+1
  2453  0011FE  C017  F026         	movff	?___ftmul+2,?_scale+2
  2454  001202  0012               	return	
  2455  001204                     l147:
  2456                           
  2457                           ;doprnt.c: 432: else if(scl > 10)
  2458  001204  502A               	movf	scale@scl,w,c
  2459  001206  0A80               	xorlw	128
  2460  001208  0F75               	addlw	-139
  2461  00120A  A0D8               	btfss	status,0,c
  2462  00120C  D053               	goto	l150
  2463                           
  2464                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2465  00120E  0E00               	movlw	0
  2466  001210  6E0A               	movwf	___awdiv@divisor+1,c
  2467  001212  0E0A               	movlw	10
  2468  001214  6E09               	movwf	___awdiv@divisor,c
  2469  001216  502A               	movf	scale@scl,w,c
  2470  001218  6E07               	movwf	___awdiv@dividend,c
  2471  00121A  6A08               	clrf	___awdiv@dividend+1,c
  2472  00121C  BE07               	btfsc	___awdiv@dividend,7,c
  2473  00121E  0608               	decf	___awdiv@dividend+1,f,c
  2474  001220  ECA2  F011         	call	___awdiv	;wreg free
  2475  001224  0E09               	movlw	9
  2476  001226  2407               	addwf	?___awdiv,w,c
  2477  001228  6E0F               	movwf	___wmul@multiplier,c
  2478  00122A  0E00               	movlw	0
  2479  00122C  2008               	addwfc	?___awdiv+1,w,c
  2480  00122E  6E10               	movwf	___wmul@multiplier+1,c
  2481  001230  0E00               	movlw	0
  2482  001232  6E12               	movwf	___wmul@multiplicand+1,c
  2483  001234  0E03               	movlw	3
  2484  001236  6E11               	movwf	___wmul@multiplicand,c
  2485  001238  EC25  F013         	call	___wmul	;wreg free
  2486  00123C  0E50               	movlw	low __npowers_
  2487  00123E  240F               	addwf	?___wmul,w,c
  2488  001240  6EF6               	movwf	tblptrl,c
  2489  001242  0E08               	movlw	high __npowers_
  2490  001244  2010               	addwfc	?___wmul+1,w,c
  2491  001246  6EF7               	movwf	tblptrh,c
  2492  001248                     	if	0	;There are less than 3 active tblptr bytes
  2493  001248                     	endif
  2494  001248  0009               	tblrd		*+
  2495  00124A  CFF5 F015          	movff	tablat,___ftmul@f1
  2496  00124E  0009               	tblrd		*+
  2497  001250  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2498  001254  000A               	tblrd		*-
  2499  001256  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2500  00125A  0E00               	movlw	0
  2501  00125C  6E12               	movwf	___wmul@multiplicand+1,c
  2502  00125E  0E03               	movlw	3
  2503  001260  6E11               	movwf	___wmul@multiplicand,c
  2504  001262  0E00               	movlw	0
  2505  001264  6E04               	movwf	___awmod@divisor+1,c
  2506  001266  0E0A               	movlw	10
  2507  001268  6E03               	movwf	___awmod@divisor,c
  2508  00126A  502A               	movf	scale@scl,w,c
  2509  00126C  6E01               	movwf	___awmod@dividend,c
  2510  00126E  6A02               	clrf	___awmod@dividend+1,c
  2511  001270  BE01               	btfsc	___awmod@dividend,7,c
  2512  001272  0602               	decf	___awmod@dividend+1,f,c
  2513  001274  EC25  F012         	call	___awmod	;wreg free
  2514  001278  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2515  00127C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2516  001280  EC25  F013         	call	___wmul	;wreg free
  2517  001284  0E50               	movlw	low __npowers_
  2518  001286  240F               	addwf	?___wmul,w,c
  2519  001288  6EF6               	movwf	tblptrl,c
  2520  00128A  0E08               	movlw	high __npowers_
  2521  00128C  2010               	addwfc	?___wmul+1,w,c
  2522  00128E  6EF7               	movwf	tblptrh,c
  2523  001290                     	if	0	;There are less than 3 active tblptr bytes
  2524  001290                     	endif
  2525  001290  0009               	tblrd		*+
  2526  001292  CFF5 F018          	movff	tablat,___ftmul@f2
  2527  001296  0009               	tblrd		*+
  2528  001298  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2529  00129C  000A               	tblrd		*-
  2530  00129E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2531  0012A2  EC27  F00F         	call	___ftmul	;wreg free
  2532  0012A6  C015  F024         	movff	?___ftmul,?_scale
  2533  0012AA  C016  F025         	movff	?___ftmul+1,?_scale+1
  2534  0012AE  C017  F026         	movff	?___ftmul+2,?_scale+2
  2535  0012B2  0012               	return	
  2536  0012B4                     l150:
  2537                           
  2538                           ;doprnt.c: 434: return _npowers_[scl];
  2539  0012B4  502A               	movf	scale@scl,w,c
  2540  0012B6  0D03               	mullw	3
  2541  0012B8  0E50               	movlw	low __npowers_
  2542  0012BA  24F3               	addwf	prodl,w,c
  2543  0012BC  6EF6               	movwf	tblptrl,c
  2544  0012BE  0E08               	movlw	high __npowers_
  2545  0012C0  20F4               	addwfc	prodh,w,c
  2546  0012C2  6EF7               	movwf	tblptrh,c
  2547  0012C4                     	if	0	;There are less than 3 active tblptr bytes
  2548  0012C4                     	endif
  2549  0012C4  0009               	tblrd		*+
  2550  0012C6  CFF5 F024          	movff	tablat,?_scale
  2551  0012CA  0009               	tblrd		*+
  2552  0012CC  CFF5 F025          	movff	tablat,?_scale+1
  2553  0012D0  000A               	tblrd		*-
  2554  0012D2  CFF5 F026          	movff	tablat,?_scale+2
  2555  0012D6  0012               	return	
  2556  0012D8                     l146:
  2557                           
  2558                           ;doprnt.c: 435: }
  2559                           ;doprnt.c: 436: if(scl>=110)
  2560  0012D8  502A               	movf	scale@scl,w,c
  2561  0012DA  0A80               	xorlw	128
  2562  0012DC  0F12               	addlw	-238
  2563  0012DE  A0D8               	btfss	status,0,c
  2564  0012E0  D091               	goto	l151
  2565                           
  2566                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2567  0012E2  0E00               	movlw	0
  2568  0012E4  6E12               	movwf	___wmul@multiplicand+1,c
  2569  0012E6  0E03               	movlw	3
  2570  0012E8  6E11               	movwf	___wmul@multiplicand,c
  2571  0012EA  0E00               	movlw	0
  2572  0012EC  6E0A               	movwf	___awdiv@divisor+1,c
  2573  0012EE  0E0A               	movlw	10
  2574  0012F0  6E09               	movwf	___awdiv@divisor,c
  2575  0012F2  0E00               	movlw	0
  2576  0012F4  6E04               	movwf	___awmod@divisor+1,c
  2577  0012F6  0E64               	movlw	100
  2578  0012F8  6E03               	movwf	___awmod@divisor,c
  2579  0012FA  502A               	movf	scale@scl,w,c
  2580  0012FC  6E01               	movwf	___awmod@dividend,c
  2581  0012FE  6A02               	clrf	___awmod@dividend+1,c
  2582  001300  BE01               	btfsc	___awmod@dividend,7,c
  2583  001302  0602               	decf	___awmod@dividend+1,f,c
  2584  001304  EC25  F012         	call	___awmod	;wreg free
  2585  001308  C001  F007         	movff	?___awmod,___awdiv@dividend
  2586  00130C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2587  001310  ECA2  F011         	call	___awdiv	;wreg free
  2588  001314  0E09               	movlw	9
  2589  001316  2407               	addwf	?___awdiv,w,c
  2590  001318  6E0F               	movwf	___wmul@multiplier,c
  2591  00131A  0E00               	movlw	0
  2592  00131C  2008               	addwfc	?___awdiv+1,w,c
  2593  00131E  6E10               	movwf	___wmul@multiplier+1,c
  2594  001320  EC25  F013         	call	___wmul	;wreg free
  2595  001324  0E29               	movlw	low __powers_
  2596  001326  240F               	addwf	?___wmul,w,c
  2597  001328  6EF6               	movwf	tblptrl,c
  2598  00132A  0E08               	movlw	high __powers_
  2599  00132C  2010               	addwfc	?___wmul+1,w,c
  2600  00132E  6EF7               	movwf	tblptrh,c
  2601  001330                     	if	0	;There are less than 3 active tblptr bytes
  2602  001330                     	endif
  2603  001330  0009               	tblrd		*+
  2604  001332  CFF5 F018          	movff	tablat,___ftmul@f2
  2605  001336  0009               	tblrd		*+
  2606  001338  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2607  00133C  000A               	tblrd		*-
  2608  00133E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2609  001342  0E00               	movlw	0
  2610  001344  6E0A               	movwf	___awdiv@divisor+1,c
  2611  001346  0E64               	movlw	100
  2612  001348  6E09               	movwf	___awdiv@divisor,c
  2613  00134A  502A               	movf	scale@scl,w,c
  2614  00134C  6E07               	movwf	___awdiv@dividend,c
  2615  00134E  6A08               	clrf	___awdiv@dividend+1,c
  2616  001350  BE07               	btfsc	___awdiv@dividend,7,c
  2617  001352  0608               	decf	___awdiv@dividend+1,f,c
  2618  001354  ECA2  F011         	call	___awdiv	;wreg free
  2619  001358  0E12               	movlw	18
  2620  00135A  2407               	addwf	?___awdiv,w,c
  2621  00135C  6E0F               	movwf	___wmul@multiplier,c
  2622  00135E  0E00               	movlw	0
  2623  001360  2008               	addwfc	?___awdiv+1,w,c
  2624  001362  6E10               	movwf	___wmul@multiplier+1,c
  2625  001364  0E00               	movlw	0
  2626  001366  6E12               	movwf	___wmul@multiplicand+1,c
  2627  001368  0E03               	movlw	3
  2628  00136A  6E11               	movwf	___wmul@multiplicand,c
  2629  00136C  EC25  F013         	call	___wmul	;wreg free
  2630  001370  0E29               	movlw	low __powers_
  2631  001372  240F               	addwf	?___wmul,w,c
  2632  001374  6EF6               	movwf	tblptrl,c
  2633  001376  0E08               	movlw	high __powers_
  2634  001378  2010               	addwfc	?___wmul+1,w,c
  2635  00137A  6EF7               	movwf	tblptrh,c
  2636  00137C                     	if	0	;There are less than 3 active tblptr bytes
  2637  00137C                     	endif
  2638  00137C  0009               	tblrd		*+
  2639  00137E  CFF5 F015          	movff	tablat,___ftmul@f1
  2640  001382  0009               	tblrd		*+
  2641  001384  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2642  001388  000A               	tblrd		*-
  2643  00138A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2644  00138E  EC27  F00F         	call	___ftmul	;wreg free
  2645  001392  C015  F027         	movff	?___ftmul,_scale$782
  2646  001396  C016  F028         	movff	?___ftmul+1,_scale$782+1
  2647  00139A  C017  F029         	movff	?___ftmul+2,_scale$782+2
  2648                           
  2649                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2650  00139E  C027  F015         	movff	_scale$782,___ftmul@f1
  2651  0013A2  C028  F016         	movff	_scale$782+1,___ftmul@f1+1
  2652  0013A6  C029  F017         	movff	_scale$782+2,___ftmul@f1+2
  2653  0013AA  0E00               	movlw	0
  2654  0013AC  6E12               	movwf	___wmul@multiplicand+1,c
  2655  0013AE  0E03               	movlw	3
  2656  0013B0  6E11               	movwf	___wmul@multiplicand,c
  2657  0013B2  0E00               	movlw	0
  2658  0013B4  6E04               	movwf	___awmod@divisor+1,c
  2659  0013B6  0E0A               	movlw	10
  2660  0013B8  6E03               	movwf	___awmod@divisor,c
  2661  0013BA  502A               	movf	scale@scl,w,c
  2662  0013BC  6E01               	movwf	___awmod@dividend,c
  2663  0013BE  6A02               	clrf	___awmod@dividend+1,c
  2664  0013C0  BE01               	btfsc	___awmod@dividend,7,c
  2665  0013C2  0602               	decf	___awmod@dividend+1,f,c
  2666  0013C4  EC25  F012         	call	___awmod	;wreg free
  2667  0013C8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2668  0013CC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2669  0013D0  EC25  F013         	call	___wmul	;wreg free
  2670  0013D4  0E29               	movlw	low __powers_
  2671  0013D6  240F               	addwf	?___wmul,w,c
  2672  0013D8  6EF6               	movwf	tblptrl,c
  2673  0013DA  0E08               	movlw	high __powers_
  2674  0013DC  2010               	addwfc	?___wmul+1,w,c
  2675  0013DE  6EF7               	movwf	tblptrh,c
  2676  0013E0                     	if	0	;There are less than 3 active tblptr bytes
  2677  0013E0                     	endif
  2678  0013E0  0009               	tblrd		*+
  2679  0013E2  CFF5 F018          	movff	tablat,___ftmul@f2
  2680  0013E6  0009               	tblrd		*+
  2681  0013E8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2682  0013EC  000A               	tblrd		*-
  2683  0013EE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2684  0013F2  EC27  F00F         	call	___ftmul	;wreg free
  2685  0013F6  C015  F024         	movff	?___ftmul,?_scale
  2686  0013FA  C016  F025         	movff	?___ftmul+1,?_scale+1
  2687  0013FE  C017  F026         	movff	?___ftmul+2,?_scale+2
  2688  001402  0012               	return	
  2689  001404                     l151:
  2690                           
  2691                           ;doprnt.c: 438: else if(scl > 10)
  2692  001404  502A               	movf	scale@scl,w,c
  2693  001406  0A80               	xorlw	128
  2694  001408  0F75               	addlw	-139
  2695  00140A  A0D8               	btfss	status,0,c
  2696  00140C  D053               	goto	l153
  2697                           
  2698                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2699  00140E  0E00               	movlw	0
  2700  001410  6E0A               	movwf	___awdiv@divisor+1,c
  2701  001412  0E0A               	movlw	10
  2702  001414  6E09               	movwf	___awdiv@divisor,c
  2703  001416  502A               	movf	scale@scl,w,c
  2704  001418  6E07               	movwf	___awdiv@dividend,c
  2705  00141A  6A08               	clrf	___awdiv@dividend+1,c
  2706  00141C  BE07               	btfsc	___awdiv@dividend,7,c
  2707  00141E  0608               	decf	___awdiv@dividend+1,f,c
  2708  001420  ECA2  F011         	call	___awdiv	;wreg free
  2709  001424  0E09               	movlw	9
  2710  001426  2407               	addwf	?___awdiv,w,c
  2711  001428  6E0F               	movwf	___wmul@multiplier,c
  2712  00142A  0E00               	movlw	0
  2713  00142C  2008               	addwfc	?___awdiv+1,w,c
  2714  00142E  6E10               	movwf	___wmul@multiplier+1,c
  2715  001430  0E00               	movlw	0
  2716  001432  6E12               	movwf	___wmul@multiplicand+1,c
  2717  001434  0E03               	movlw	3
  2718  001436  6E11               	movwf	___wmul@multiplicand,c
  2719  001438  EC25  F013         	call	___wmul	;wreg free
  2720  00143C  0E29               	movlw	low __powers_
  2721  00143E  240F               	addwf	?___wmul,w,c
  2722  001440  6EF6               	movwf	tblptrl,c
  2723  001442  0E08               	movlw	high __powers_
  2724  001444  2010               	addwfc	?___wmul+1,w,c
  2725  001446  6EF7               	movwf	tblptrh,c
  2726  001448                     	if	0	;There are less than 3 active tblptr bytes
  2727  001448                     	endif
  2728  001448  0009               	tblrd		*+
  2729  00144A  CFF5 F015          	movff	tablat,___ftmul@f1
  2730  00144E  0009               	tblrd		*+
  2731  001450  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2732  001454  000A               	tblrd		*-
  2733  001456  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2734  00145A  0E00               	movlw	0
  2735  00145C  6E12               	movwf	___wmul@multiplicand+1,c
  2736  00145E  0E03               	movlw	3
  2737  001460  6E11               	movwf	___wmul@multiplicand,c
  2738  001462  0E00               	movlw	0
  2739  001464  6E04               	movwf	___awmod@divisor+1,c
  2740  001466  0E0A               	movlw	10
  2741  001468  6E03               	movwf	___awmod@divisor,c
  2742  00146A  502A               	movf	scale@scl,w,c
  2743  00146C  6E01               	movwf	___awmod@dividend,c
  2744  00146E  6A02               	clrf	___awmod@dividend+1,c
  2745  001470  BE01               	btfsc	___awmod@dividend,7,c
  2746  001472  0602               	decf	___awmod@dividend+1,f,c
  2747  001474  EC25  F012         	call	___awmod	;wreg free
  2748  001478  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2749  00147C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2750  001480  EC25  F013         	call	___wmul	;wreg free
  2751  001484  0E29               	movlw	low __powers_
  2752  001486  240F               	addwf	?___wmul,w,c
  2753  001488  6EF6               	movwf	tblptrl,c
  2754  00148A  0E08               	movlw	high __powers_
  2755  00148C  2010               	addwfc	?___wmul+1,w,c
  2756  00148E  6EF7               	movwf	tblptrh,c
  2757  001490                     	if	0	;There are less than 3 active tblptr bytes
  2758  001490                     	endif
  2759  001490  0009               	tblrd		*+
  2760  001492  CFF5 F018          	movff	tablat,___ftmul@f2
  2761  001496  0009               	tblrd		*+
  2762  001498  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2763  00149C  000A               	tblrd		*-
  2764  00149E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2765  0014A2  EC27  F00F         	call	___ftmul	;wreg free
  2766  0014A6  C015  F024         	movff	?___ftmul,?_scale
  2767  0014AA  C016  F025         	movff	?___ftmul+1,?_scale+1
  2768  0014AE  C017  F026         	movff	?___ftmul+2,?_scale+2
  2769  0014B2  0012               	return	
  2770  0014B4                     l153:
  2771                           
  2772                           ;doprnt.c: 440: return _powers_[scl];
  2773  0014B4  502A               	movf	scale@scl,w,c
  2774  0014B6  0D03               	mullw	3
  2775  0014B8  0E29               	movlw	low __powers_
  2776  0014BA  24F3               	addwf	prodl,w,c
  2777  0014BC  6EF6               	movwf	tblptrl,c
  2778  0014BE  0E08               	movlw	high __powers_
  2779  0014C0  20F4               	addwfc	prodh,w,c
  2780  0014C2  6EF7               	movwf	tblptrh,c
  2781  0014C4                     	if	0	;There are less than 3 active tblptr bytes
  2782  0014C4                     	endif
  2783  0014C4  0009               	tblrd		*+
  2784  0014C6  CFF5 F024          	movff	tablat,?_scale
  2785  0014CA  0009               	tblrd		*+
  2786  0014CC  CFF5 F025          	movff	tablat,?_scale+1
  2787  0014D0  000A               	tblrd		*-
  2788  0014D2  CFF5 F026          	movff	tablat,?_scale+2
  2789  0014D6  0012               	return	
  2790  0014D8                     __end_of_scale:
  2791                           	opt stack 0
  2792                           tblptru	equ	0xFF8
  2793                           tblptrh	equ	0xFF7
  2794                           tblptrl	equ	0xFF6
  2795                           tablat	equ	0xFF5
  2796                           prodh	equ	0xFF4
  2797                           prodl	equ	0xFF3
  2798                           wreg	equ	0xFE8
  2799                           postinc2	equ	0xFDE
  2800                           postdec2	equ	0xFDD
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _putch *****************
  2806 ;; Defined at:
  2807 ;;		line 52 in file "newmain.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  x               1    wreg     unsigned char 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  x               1    3[COMRAM] unsigned char 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         0       0       0       0       0       0       0       0       0
  2822 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2824 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2825 ;;Total ram usage:        1 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    2
  2828 ;; This function calls:
  2829 ;;		_escrever_lcd
  2830 ;; This function is called by:
  2831 ;;		_printf
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text3
  2836  00274E                     __ptext3:
  2837                           	opt stack 0
  2838  00274E                     _putch:
  2839                           	opt stack 27
  2840                           
  2841                           ;incstack = 0
  2842                           ;putch@x stored from wreg
  2843  00274E  6E04               	movwf	putch@x,c
  2844                           
  2845                           ;newmain.c: 54: escrever_lcd(x);
  2846  002750  5004               	movf	putch@x,w,c
  2847  002752  EC12  F013         	call	_escrever_lcd
  2848  002756  0012               	return		;funcret
  2849  002758                     __end_of_putch:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           prodh	equ	0xFF4
  2856                           prodl	equ	0xFF3
  2857                           wreg	equ	0xFE8
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _escrever_lcd *****************
  2865 ;; Defined at:
  2866 ;;		line 42 in file "newmain.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  valor           1    wreg     unsigned char 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  valor           1    2[COMRAM] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0
  2881 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2883 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2884 ;;Total ram usage:        1 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    1
  2887 ;; This function calls:
  2888 ;;		_delay_ms
  2889 ;; This function is called by:
  2890 ;;		_putch
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text4
  2895  002624                     __ptext4:
  2896                           	opt stack 0
  2897  002624                     _escrever_lcd:
  2898                           	opt stack 27
  2899                           
  2900                           ;incstack = 0
  2901                           ;escrever_lcd@valor stored from wreg
  2902  002624  6E03               	movwf	escrever_lcd@valor,c
  2903                           
  2904                           ;newmain.c: 44: PORTD = valor;
  2905  002626  C003  FF83         	movff	escrever_lcd@valor,3971	;volatile
  2906                           
  2907                           ;newmain.c: 45: PORTCbits.RC0 = 1;
  2908  00262A  8082               	bsf	3970,0,c	;volatile
  2909                           
  2910                           ;newmain.c: 46: PORTCbits.RC1 = 1;
  2911  00262C  8282               	bsf	3970,1,c	;volatile
  2912                           
  2913                           ;newmain.c: 47: delay_ms(1);
  2914  00262E  0E00               	movlw	0
  2915  002630  6E02               	movwf	delay_ms@tempo+1,c
  2916  002632  0E01               	movlw	1
  2917  002634  6E01               	movwf	delay_ms@tempo,c
  2918  002636  ECFA  F012         	call	_delay_ms	;wreg free
  2919                           
  2920                           ;newmain.c: 48: PORTCbits.RC1 = 0;
  2921  00263A  9282               	bcf	3970,1,c	;volatile
  2922                           
  2923                           ;newmain.c: 49: delay_ms(1);
  2924  00263C  0E00               	movlw	0
  2925  00263E  6E02               	movwf	delay_ms@tempo+1,c
  2926  002640  0E01               	movlw	1
  2927  002642  6E01               	movwf	delay_ms@tempo,c
  2928  002644  ECFA  F012         	call	_delay_ms	;wreg free
  2929  002648  0012               	return		;funcret
  2930  00264A                     __end_of_escrever_lcd:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           wreg	equ	0xFE8
  2939                           postinc2	equ	0xFDE
  2940                           postdec2	equ	0xFDD
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _isdigit *****************
  2946 ;; Defined at:
  2947 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  c               1    wreg     unsigned char 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  c               1    2[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;		None               void
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0
  2962 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2963 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2964 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2965 ;;Total ram usage:        3 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_printf
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text5
  2975  002706                     __ptext5:
  2976                           	opt stack 0
  2977  002706                     _isdigit:
  2978                           	opt stack 29
  2979                           
  2980                           ;incstack = 0
  2981                           ;isdigit@c stored from wreg
  2982  002706  6E03               	movwf	isdigit@c,c
  2983  002708  0E00               	movlw	0
  2984  00270A  6E02               	movwf	_isdigit$435,c
  2985  00270C  0E3A               	movlw	58
  2986  00270E  6003               	cpfslt	isdigit@c,c
  2987  002710  D005               	goto	l595
  2988  002712  0E2F               	movlw	47
  2989  002714  6403               	cpfsgt	isdigit@c,c
  2990  002716  D002               	goto	l595
  2991  002718  0E01               	movlw	1
  2992  00271A  6E02               	movwf	_isdigit$435,c
  2993  00271C                     l595:
  2994  00271C  C002  F001         	movff	_isdigit$435,??_isdigit
  2995  002720  3001               	rrcf	??_isdigit,w,c
  2996  002722  0012               	return	
  2997  002724                     __end_of_isdigit:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           prodh	equ	0xFF4
  3004                           prodl	equ	0xFF3
  3005                           wreg	equ	0xFE8
  3006                           postinc2	equ	0xFDE
  3007                           postdec2	equ	0xFDD
  3008                           fsr2h	equ	0xFDA
  3009                           fsr2l	equ	0xFD9
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _fround *****************
  3013 ;; Defined at:
  3014 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;  prec            1    wreg     unsigned char 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  prec            1   44[COMRAM] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  3   35[COMRAM] unsigned char 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3028 ;;      Params:         3       0       0       0       0       0       0       0       0
  3029 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3031 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3032 ;;Total ram usage:       10 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    2
  3035 ;; This function calls:
  3036 ;;		___awdiv
  3037 ;;		___awmod
  3038 ;;		___ftmul
  3039 ;;		___wmul
  3040 ;; This function is called by:
  3041 ;;		_printf
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text6
  3046  0017F6                     __ptext6:
  3047                           	opt stack 0
  3048  0017F6                     _fround:
  3049                           	opt stack 27
  3050                           
  3051                           ;incstack = 0
  3052                           ;fround@prec stored from wreg
  3053  0017F6  6E2D               	movwf	fround@prec,c
  3054                           
  3055                           ;doprnt.c: 413: if(prec>=110)
  3056  0017F8  0E6D               	movlw	109
  3057  0017FA  642D               	cpfsgt	fround@prec,c
  3058  0017FC  D09F               	goto	l140
  3059                           
  3060                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3061  0017FE  0E00               	movlw	0
  3062  001800  6E12               	movwf	___wmul@multiplicand+1,c
  3063  001802  0E03               	movlw	3
  3064  001804  6E11               	movwf	___wmul@multiplicand,c
  3065  001806  0E00               	movlw	0
  3066  001808  6E0A               	movwf	___awdiv@divisor+1,c
  3067  00180A  0E0A               	movlw	10
  3068  00180C  6E09               	movwf	___awdiv@divisor,c
  3069  00180E  0E00               	movlw	0
  3070  001810  6E04               	movwf	___awmod@divisor+1,c
  3071  001812  0E64               	movlw	100
  3072  001814  6E03               	movwf	___awmod@divisor,c
  3073  001816  C02D  F001         	movff	fround@prec,___awmod@dividend
  3074  00181A  6A02               	clrf	___awmod@dividend+1,c
  3075  00181C  EC25  F012         	call	___awmod	;wreg free
  3076  001820  C001  F007         	movff	?___awmod,___awdiv@dividend
  3077  001824  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3078  001828  ECA2  F011         	call	___awdiv	;wreg free
  3079  00182C  0E09               	movlw	9
  3080  00182E  2407               	addwf	?___awdiv,w,c
  3081  001830  6E0F               	movwf	___wmul@multiplier,c
  3082  001832  0E00               	movlw	0
  3083  001834  2008               	addwfc	?___awdiv+1,w,c
  3084  001836  6E10               	movwf	___wmul@multiplier+1,c
  3085  001838  EC25  F013         	call	___wmul	;wreg free
  3086  00183C  0E50               	movlw	low __npowers_
  3087  00183E  240F               	addwf	?___wmul,w,c
  3088  001840  6EF6               	movwf	tblptrl,c
  3089  001842  0E08               	movlw	high __npowers_
  3090  001844  2010               	addwfc	?___wmul+1,w,c
  3091  001846  6EF7               	movwf	tblptrh,c
  3092  001848                     	if	0	;There are less than 3 active tblptr bytes
  3093  001848                     	endif
  3094  001848  0009               	tblrd		*+
  3095  00184A  CFF5 F018          	movff	tablat,___ftmul@f2
  3096  00184E  0009               	tblrd		*+
  3097  001850  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3098  001854  000A               	tblrd		*-
  3099  001856  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3100  00185A  0E00               	movlw	0
  3101  00185C  6E0A               	movwf	___awdiv@divisor+1,c
  3102  00185E  0E64               	movlw	100
  3103  001860  6E09               	movwf	___awdiv@divisor,c
  3104  001862  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3105  001866  6A08               	clrf	___awdiv@dividend+1,c
  3106  001868  ECA2  F011         	call	___awdiv	;wreg free
  3107  00186C  0E12               	movlw	18
  3108  00186E  2407               	addwf	?___awdiv,w,c
  3109  001870  6E0F               	movwf	___wmul@multiplier,c
  3110  001872  0E00               	movlw	0
  3111  001874  2008               	addwfc	?___awdiv+1,w,c
  3112  001876  6E10               	movwf	___wmul@multiplier+1,c
  3113  001878  0E00               	movlw	0
  3114  00187A  6E12               	movwf	___wmul@multiplicand+1,c
  3115  00187C  0E03               	movlw	3
  3116  00187E  6E11               	movwf	___wmul@multiplicand,c
  3117  001880  EC25  F013         	call	___wmul	;wreg free
  3118  001884  0E50               	movlw	low __npowers_
  3119  001886  240F               	addwf	?___wmul,w,c
  3120  001888  6EF6               	movwf	tblptrl,c
  3121  00188A  0E08               	movlw	high __npowers_
  3122  00188C  2010               	addwfc	?___wmul+1,w,c
  3123  00188E  6EF7               	movwf	tblptrh,c
  3124  001890                     	if	0	;There are less than 3 active tblptr bytes
  3125  001890                     	endif
  3126  001890  0009               	tblrd		*+
  3127  001892  CFF5 F015          	movff	tablat,___ftmul@f1
  3128  001896  0009               	tblrd		*+
  3129  001898  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3130  00189C  000A               	tblrd		*-
  3131  00189E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3132  0018A2  EC27  F00F         	call	___ftmul	;wreg free
  3133  0018A6  C015  F02A         	movff	?___ftmul,_fround$780
  3134  0018AA  C016  F02B         	movff	?___ftmul+1,_fround$780+1
  3135  0018AE  C017  F02C         	movff	?___ftmul+2,_fround$780+2
  3136                           
  3137                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3138  0018B2  0E00               	movlw	0
  3139  0018B4  6E12               	movwf	___wmul@multiplicand+1,c
  3140  0018B6  0E03               	movlw	3
  3141  0018B8  6E11               	movwf	___wmul@multiplicand,c
  3142  0018BA  0E00               	movlw	0
  3143  0018BC  6E04               	movwf	___awmod@divisor+1,c
  3144  0018BE  0E0A               	movlw	10
  3145  0018C0  6E03               	movwf	___awmod@divisor,c
  3146  0018C2  C02D  F001         	movff	fround@prec,___awmod@dividend
  3147  0018C6  6A02               	clrf	___awmod@dividend+1,c
  3148  0018C8  EC25  F012         	call	___awmod	;wreg free
  3149  0018CC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3150  0018D0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3151  0018D4  EC25  F013         	call	___wmul	;wreg free
  3152  0018D8  0E50               	movlw	low __npowers_
  3153  0018DA  240F               	addwf	?___wmul,w,c
  3154  0018DC  6EF6               	movwf	tblptrl,c
  3155  0018DE  0E08               	movlw	high __npowers_
  3156  0018E0  2010               	addwfc	?___wmul+1,w,c
  3157  0018E2  6EF7               	movwf	tblptrh,c
  3158  0018E4                     	if	0	;There are less than 3 active tblptr bytes
  3159  0018E4                     	endif
  3160  0018E4  0009               	tblrd		*+
  3161  0018E6  CFF5 F018          	movff	tablat,___ftmul@f2
  3162  0018EA  0009               	tblrd		*+
  3163  0018EC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3164  0018F0  000A               	tblrd		*-
  3165  0018F2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3166  0018F6  C02A  F015         	movff	_fround$780,___ftmul@f1
  3167  0018FA  C02B  F016         	movff	_fround$780+1,___ftmul@f1+1
  3168  0018FE  C02C  F017         	movff	_fround$780+2,___ftmul@f1+2
  3169  001902  EC27  F00F         	call	___ftmul	;wreg free
  3170  001906  C015  F027         	movff	?___ftmul,_fround$781
  3171  00190A  C016  F028         	movff	?___ftmul+1,_fround$781+1
  3172  00190E  C017  F029         	movff	?___ftmul+2,_fround$781+2
  3173                           
  3174                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3175  001912  C027  F015         	movff	_fround$781,___ftmul@f1
  3176  001916  C028  F016         	movff	_fround$781+1,___ftmul@f1+1
  3177  00191A  C029  F017         	movff	_fround$781+2,___ftmul@f1+2
  3178  00191E  0E00               	movlw	0
  3179  001920  6E18               	movwf	___ftmul@f2,c
  3180  001922  0E00               	movlw	0
  3181  001924  6E19               	movwf	___ftmul@f2+1,c
  3182  001926  0E3F               	movlw	63
  3183  001928  6E1A               	movwf	___ftmul@f2+2,c
  3184  00192A  EC27  F00F         	call	___ftmul	;wreg free
  3185  00192E  C015  F024         	movff	?___ftmul,?_fround
  3186  001932  C016  F025         	movff	?___ftmul+1,?_fround+1
  3187  001936  C017  F026         	movff	?___ftmul+2,?_fround+2
  3188  00193A  0012               	return	
  3189  00193C                     l140:
  3190                           
  3191                           ;doprnt.c: 415: else if(prec > 10)
  3192  00193C  0E0A               	movlw	10
  3193  00193E  642D               	cpfsgt	fround@prec,c
  3194  001940  D063               	goto	l143
  3195                           
  3196                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3197  001942  0E00               	movlw	0
  3198  001944  6E12               	movwf	___wmul@multiplicand+1,c
  3199  001946  0E03               	movlw	3
  3200  001948  6E11               	movwf	___wmul@multiplicand,c
  3201  00194A  0E00               	movlw	0
  3202  00194C  6E04               	movwf	___awmod@divisor+1,c
  3203  00194E  0E0A               	movlw	10
  3204  001950  6E03               	movwf	___awmod@divisor,c
  3205  001952  C02D  F001         	movff	fround@prec,___awmod@dividend
  3206  001956  6A02               	clrf	___awmod@dividend+1,c
  3207  001958  EC25  F012         	call	___awmod	;wreg free
  3208  00195C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3209  001960  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3210  001964  EC25  F013         	call	___wmul	;wreg free
  3211  001968  0E50               	movlw	low __npowers_
  3212  00196A  240F               	addwf	?___wmul,w,c
  3213  00196C  6EF6               	movwf	tblptrl,c
  3214  00196E  0E08               	movlw	high __npowers_
  3215  001970  2010               	addwfc	?___wmul+1,w,c
  3216  001972  6EF7               	movwf	tblptrh,c
  3217  001974                     	if	0	;There are less than 3 active tblptr bytes
  3218  001974                     	endif
  3219  001974  0009               	tblrd		*+
  3220  001976  CFF5 F018          	movff	tablat,___ftmul@f2
  3221  00197A  0009               	tblrd		*+
  3222  00197C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3223  001980  000A               	tblrd		*-
  3224  001982  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3225  001986  0E00               	movlw	0
  3226  001988  6E0A               	movwf	___awdiv@divisor+1,c
  3227  00198A  0E0A               	movlw	10
  3228  00198C  6E09               	movwf	___awdiv@divisor,c
  3229  00198E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3230  001992  6A08               	clrf	___awdiv@dividend+1,c
  3231  001994  ECA2  F011         	call	___awdiv	;wreg free
  3232  001998  0E09               	movlw	9
  3233  00199A  2407               	addwf	?___awdiv,w,c
  3234  00199C  6E0F               	movwf	___wmul@multiplier,c
  3235  00199E  0E00               	movlw	0
  3236  0019A0  2008               	addwfc	?___awdiv+1,w,c
  3237  0019A2  6E10               	movwf	___wmul@multiplier+1,c
  3238  0019A4  0E00               	movlw	0
  3239  0019A6  6E12               	movwf	___wmul@multiplicand+1,c
  3240  0019A8  0E03               	movlw	3
  3241  0019AA  6E11               	movwf	___wmul@multiplicand,c
  3242  0019AC  EC25  F013         	call	___wmul	;wreg free
  3243  0019B0  0E50               	movlw	low __npowers_
  3244  0019B2  240F               	addwf	?___wmul,w,c
  3245  0019B4  6EF6               	movwf	tblptrl,c
  3246  0019B6  0E08               	movlw	high __npowers_
  3247  0019B8  2010               	addwfc	?___wmul+1,w,c
  3248  0019BA  6EF7               	movwf	tblptrh,c
  3249  0019BC                     	if	0	;There are less than 3 active tblptr bytes
  3250  0019BC                     	endif
  3251  0019BC  0009               	tblrd		*+
  3252  0019BE  CFF5 F015          	movff	tablat,___ftmul@f1
  3253  0019C2  0009               	tblrd		*+
  3254  0019C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3255  0019C8  000A               	tblrd		*-
  3256  0019CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3257  0019CE  EC27  F00F         	call	___ftmul	;wreg free
  3258  0019D2  C015  F02A         	movff	?___ftmul,_fround$780
  3259  0019D6  C016  F02B         	movff	?___ftmul+1,_fround$780+1
  3260  0019DA  C017  F02C         	movff	?___ftmul+2,_fround$780+2
  3261                           
  3262                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3263  0019DE  C02A  F015         	movff	_fround$780,___ftmul@f1
  3264  0019E2  C02B  F016         	movff	_fround$780+1,___ftmul@f1+1
  3265  0019E6  C02C  F017         	movff	_fround$780+2,___ftmul@f1+2
  3266  0019EA  0E00               	movlw	0
  3267  0019EC  6E18               	movwf	___ftmul@f2,c
  3268  0019EE  0E00               	movlw	0
  3269  0019F0  6E19               	movwf	___ftmul@f2+1,c
  3270  0019F2  0E3F               	movlw	63
  3271  0019F4  6E1A               	movwf	___ftmul@f2+2,c
  3272  0019F6  EC27  F00F         	call	___ftmul	;wreg free
  3273  0019FA  C015  F024         	movff	?___ftmul,?_fround
  3274  0019FE  C016  F025         	movff	?___ftmul+1,?_fround+1
  3275  001A02  C017  F026         	movff	?___ftmul+2,?_fround+2
  3276  001A06  0012               	return	
  3277  001A08                     l143:
  3278                           
  3279                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3280  001A08  502D               	movf	fround@prec,w,c
  3281  001A0A  0D03               	mullw	3
  3282  001A0C  0E50               	movlw	low __npowers_
  3283  001A0E  24F3               	addwf	prodl,w,c
  3284  001A10  6EF6               	movwf	tblptrl,c
  3285  001A12  0E08               	movlw	high __npowers_
  3286  001A14  20F4               	addwfc	prodh,w,c
  3287  001A16  6EF7               	movwf	tblptrh,c
  3288  001A18                     	if	0	;There are less than 3 active tblptr bytes
  3289  001A18                     	endif
  3290  001A18  0009               	tblrd		*+
  3291  001A1A  CFF5 F015          	movff	tablat,___ftmul@f1
  3292  001A1E  0009               	tblrd		*+
  3293  001A20  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3294  001A24  000A               	tblrd		*-
  3295  001A26  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3296  001A2A  0E00               	movlw	0
  3297  001A2C  6E18               	movwf	___ftmul@f2,c
  3298  001A2E  0E00               	movlw	0
  3299  001A30  6E19               	movwf	___ftmul@f2+1,c
  3300  001A32  0E3F               	movlw	63
  3301  001A34  6E1A               	movwf	___ftmul@f2+2,c
  3302  001A36  EC27  F00F         	call	___ftmul	;wreg free
  3303  001A3A  C015  F024         	movff	?___ftmul,?_fround
  3304  001A3E  C016  F025         	movff	?___ftmul+1,?_fround+1
  3305  001A42  C017  F026         	movff	?___ftmul+2,?_fround+2
  3306  001A46  0012               	return	
  3307  001A48                     __end_of_fround:
  3308                           	opt stack 0
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           prodh	equ	0xFF4
  3314                           prodl	equ	0xFF3
  3315                           wreg	equ	0xFE8
  3316                           postinc2	equ	0xFDE
  3317                           postdec2	equ	0xFDD
  3318                           fsr2h	equ	0xFDA
  3319                           fsr2l	equ	0xFD9
  3320                           status	equ	0xFD8
  3321                           
  3322 ;; *************** function ___wmul *****************
  3323 ;; Defined at:
  3324 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  multiplier      2   14[COMRAM] unsigned int 
  3327 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;  product         2   18[COMRAM] unsigned int 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  2   14[COMRAM] unsigned int 
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0, prodl, prodh
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3339 ;;      Params:         4       0       0       0       0       0       0       0       0
  3340 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3342 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3343 ;;Total ram usage:        6 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_fround
  3349 ;;		_scale
  3350 ;;		_printf
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text7
  3355  00264A                     __ptext7:
  3356                           	opt stack 0
  3357  00264A                     ___wmul:
  3358                           	opt stack 28
  3359                           
  3360                           ;incstack = 0
  3361  00264A  500F               	movf	___wmul@multiplier,w,c
  3362  00264C  0211               	mulwf	___wmul@multiplicand,c
  3363  00264E  CFF3 F013          	movff	prodl,___wmul@product
  3364  002652  CFF4 F014          	movff	prodh,___wmul@product+1
  3365  002656  500F               	movf	___wmul@multiplier,w,c
  3366  002658  0212               	mulwf	___wmul@multiplicand+1,c
  3367  00265A  50F3               	movf	prodl,w,c
  3368  00265C  2614               	addwf	___wmul@product+1,f,c
  3369  00265E  5010               	movf	___wmul@multiplier+1,w,c
  3370  002660  0211               	mulwf	___wmul@multiplicand,c
  3371  002662  50F3               	movf	prodl,w,c
  3372  002664  2614               	addwf	___wmul@product+1,f,c
  3373  002666  C013  F00F         	movff	___wmul@product,?___wmul
  3374  00266A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3375  00266E  0012               	return	
  3376  002670                     __end_of___wmul:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           wreg	equ	0xFE8
  3385                           postinc2	equ	0xFDE
  3386                           postdec2	equ	0xFDD
  3387                           fsr2h	equ	0xFDA
  3388                           fsr2l	equ	0xFD9
  3389                           status	equ	0xFD8
  3390                           
  3391 ;; *************** function ___ftmul *****************
  3392 ;; Defined at:
  3393 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  f1              3   20[COMRAM] float 
  3396 ;;  f2              3   23[COMRAM] float 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3399 ;;  sign            1   34[COMRAM] unsigned char 
  3400 ;;  cntr            1   33[COMRAM] unsigned char 
  3401 ;;  exp             1   29[COMRAM] unsigned char 
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  3   20[COMRAM] float 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3411 ;;      Params:         6       0       0       0       0       0       0       0       0
  3412 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3413 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3414 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3415 ;;Total ram usage:       15 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    1
  3418 ;; This function calls:
  3419 ;;		___ftpack
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;;		_fround
  3423 ;;		_scale
  3424 ;;		_printf
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text8
  3429  001E4E                     __ptext8:
  3430                           	opt stack 0
  3431  001E4E                     ___ftmul:
  3432                           	opt stack 27
  3433                           
  3434                           ;incstack = 0
  3435  001E4E  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3436  001E52  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3437  001E54  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3438  001E56  3416               	rlcf	___ftmul@f1+1,w,c
  3439  001E58  361B               	rlcf	??___ftmul& (0+255),f,c
  3440  001E5A  E301               	bnc	u2431
  3441  001E5C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3442  001E5E                     u2431:
  3443  001E5E  501B               	movf	??___ftmul,w,c
  3444  001E60  6E1E               	movwf	___ftmul@exp,c
  3445  001E62  501E               	movf	___ftmul@exp,w,c
  3446  001E64  A4D8               	btfss	status,2,c
  3447  001E66  D007               	goto	l559
  3448  001E68  0E00               	movlw	0
  3449  001E6A  6E15               	movwf	?___ftmul,c
  3450  001E6C  0E00               	movlw	0
  3451  001E6E  6E16               	movwf	?___ftmul+1,c
  3452  001E70  0E00               	movlw	0
  3453  001E72  6E17               	movwf	?___ftmul+2,c
  3454  001E74  0012               	return	
  3455  001E76                     l559:
  3456  001E76  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3457  001E7A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3458  001E7C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3459  001E7E  3419               	rlcf	___ftmul@f2+1,w,c
  3460  001E80  361B               	rlcf	??___ftmul& (0+255),f,c
  3461  001E82  E301               	bnc	u2451
  3462  001E84  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3463  001E86                     u2451:
  3464  001E86  501B               	movf	??___ftmul,w,c
  3465  001E88  6E23               	movwf	___ftmul@sign,c
  3466  001E8A  5023               	movf	___ftmul@sign,w,c
  3467  001E8C  A4D8               	btfss	status,2,c
  3468  001E8E  D007               	goto	l561
  3469  001E90  0E00               	movlw	0
  3470  001E92  6E15               	movwf	?___ftmul,c
  3471  001E94  0E00               	movlw	0
  3472  001E96  6E16               	movwf	?___ftmul+1,c
  3473  001E98  0E00               	movlw	0
  3474  001E9A  6E17               	movwf	?___ftmul+2,c
  3475  001E9C  0012               	return	
  3476  001E9E                     l561:
  3477  001E9E  5023               	movf	___ftmul@sign,w,c
  3478  001EA0  0F7B               	addlw	123
  3479  001EA2  261E               	addwf	___ftmul@exp,f,c
  3480  001EA4  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3481  001EA8  501A               	movf	___ftmul@f2+2,w,c
  3482  001EAA  1A23               	xorwf	___ftmul@sign,f,c
  3483  001EAC  0E80               	movlw	128
  3484  001EAE  1623               	andwf	___ftmul@sign,f,c
  3485  001EB0  8E16               	bsf	___ftmul@f1+1,7,c
  3486  001EB2  8E19               	bsf	___ftmul@f2+1,7,c
  3487  001EB4  0EFF               	movlw	255
  3488  001EB6  1618               	andwf	___ftmul@f2,f,c
  3489  001EB8  0EFF               	movlw	255
  3490  001EBA  1619               	andwf	___ftmul@f2+1,f,c
  3491  001EBC  0E00               	movlw	0
  3492  001EBE  161A               	andwf	___ftmul@f2+2,f,c
  3493  001EC0  0E00               	movlw	0
  3494  001EC2  6E1F               	movwf	___ftmul@f3_as_product,c
  3495  001EC4  0E00               	movlw	0
  3496  001EC6  6E20               	movwf	___ftmul@f3_as_product+1,c
  3497  001EC8  0E00               	movlw	0
  3498  001ECA  6E21               	movwf	___ftmul@f3_as_product+2,c
  3499  001ECC  0E07               	movlw	7
  3500  001ECE  6E22               	movwf	___ftmul@cntr,c
  3501  001ED0  A015               	btfss	___ftmul@f1,0,c
  3502  001ED2  D006               	goto	l563
  3503  001ED4  5018               	movf	___ftmul@f2,w,c
  3504  001ED6  261F               	addwf	___ftmul@f3_as_product,f,c
  3505  001ED8  5019               	movf	___ftmul@f2+1,w,c
  3506  001EDA  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3507  001EDC  501A               	movf	___ftmul@f2+2,w,c
  3508  001EDE  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3509  001EE0                     l563:
  3510  001EE0  90D8               	bcf	status,0,c
  3511  001EE2  3217               	rrcf	___ftmul@f1+2,f,c
  3512  001EE4  3216               	rrcf	___ftmul@f1+1,f,c
  3513  001EE6  3215               	rrcf	___ftmul@f1,f,c
  3514  001EE8  90D8               	bcf	status,0,c
  3515  001EEA  3618               	rlcf	___ftmul@f2,f,c
  3516  001EEC  3619               	rlcf	___ftmul@f2+1,f,c
  3517  001EEE  361A               	rlcf	___ftmul@f2+2,f,c
  3518  001EF0  2E22               	decfsz	___ftmul@cntr,f,c
  3519  001EF2  D7EE               	goto	l562
  3520  001EF4  0E09               	movlw	9
  3521  001EF6  6E22               	movwf	___ftmul@cntr,c
  3522  001EF8  A015               	btfss	___ftmul@f1,0,c
  3523  001EFA  D006               	goto	l566
  3524  001EFC  5018               	movf	___ftmul@f2,w,c
  3525  001EFE  261F               	addwf	___ftmul@f3_as_product,f,c
  3526  001F00  5019               	movf	___ftmul@f2+1,w,c
  3527  001F02  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3528  001F04  501A               	movf	___ftmul@f2+2,w,c
  3529  001F06  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3530  001F08                     l566:
  3531  001F08  90D8               	bcf	status,0,c
  3532  001F0A  3217               	rrcf	___ftmul@f1+2,f,c
  3533  001F0C  3216               	rrcf	___ftmul@f1+1,f,c
  3534  001F0E  3215               	rrcf	___ftmul@f1,f,c
  3535  001F10  90D8               	bcf	status,0,c
  3536  001F12  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3537  001F14  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3538  001F16  321F               	rrcf	___ftmul@f3_as_product,f,c
  3539  001F18  2E22               	decfsz	___ftmul@cntr,f,c
  3540  001F1A  D7EE               	goto	l565
  3541  001F1C  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3542  001F20  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3543  001F24  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3544  001F28  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3545  001F2C  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3546  001F30  EC03  F011         	call	___ftpack	;wreg free
  3547  001F34  C001  F015         	movff	?___ftpack,?___ftmul
  3548  001F38  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3549  001F3C  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3550  001F40  0012               	return	
  3551  001F42                     __end_of___ftmul:
  3552                           	opt stack 0
  3553                           tblptru	equ	0xFF8
  3554                           tblptrh	equ	0xFF7
  3555                           tblptrl	equ	0xFF6
  3556                           tablat	equ	0xFF5
  3557                           prodh	equ	0xFF4
  3558                           prodl	equ	0xFF3
  3559                           wreg	equ	0xFE8
  3560                           postinc2	equ	0xFDE
  3561                           postdec2	equ	0xFDD
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function ___awmod *****************
  3567 ;; Defined at:
  3568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  dividend        2    0[COMRAM] int 
  3571 ;;  divisor         2    2[COMRAM] int 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  sign            1    5[COMRAM] unsigned char 
  3574 ;;  counter         1    4[COMRAM] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  2    0[COMRAM] int 
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3584 ;;      Params:         4       0       0       0       0       0       0       0       0
  3585 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3586 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3587 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3588 ;;Total ram usage:        6 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_fround
  3594 ;;		_scale
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text9
  3599  00244A                     __ptext9:
  3600                           	opt stack 0
  3601  00244A                     ___awmod:
  3602                           	opt stack 28
  3603                           
  3604                           ;incstack = 0
  3605  00244A  0E00               	movlw	0
  3606  00244C  6E06               	movwf	___awmod@sign,c
  3607  00244E  AE02               	btfss	___awmod@dividend+1,7,c
  3608  002450  D006               	goto	l412
  3609  002452  6C01               	negf	___awmod@dividend,c
  3610  002454  1E02               	comf	___awmod@dividend+1,f,c
  3611  002456  B0D8               	btfsc	status,0,c
  3612  002458  2A02               	incf	___awmod@dividend+1,f,c
  3613  00245A  0E01               	movlw	1
  3614  00245C  6E06               	movwf	___awmod@sign,c
  3615  00245E                     l412:
  3616  00245E  AE04               	btfss	___awmod@divisor+1,7,c
  3617  002460  D004               	goto	l413
  3618  002462  6C03               	negf	___awmod@divisor,c
  3619  002464  1E04               	comf	___awmod@divisor+1,f,c
  3620  002466  B0D8               	btfsc	status,0,c
  3621  002468  2A04               	incf	___awmod@divisor+1,f,c
  3622  00246A                     l413:
  3623  00246A  5003               	movf	___awmod@divisor,w,c
  3624  00246C  1004               	iorwf	___awmod@divisor+1,w,c
  3625  00246E  B4D8               	btfsc	status,2,c
  3626  002470  D018               	goto	l420
  3627  002472  0E01               	movlw	1
  3628  002474  6E05               	movwf	___awmod@counter,c
  3629  002476  D004               	goto	l415
  3630  002478  90D8               	bcf	status,0,c
  3631  00247A  3603               	rlcf	___awmod@divisor,f,c
  3632  00247C  3604               	rlcf	___awmod@divisor+1,f,c
  3633  00247E  2A05               	incf	___awmod@counter,f,c
  3634  002480                     l415:
  3635  002480  AE04               	btfss	___awmod@divisor+1,7,c
  3636  002482  D7FA               	goto	l416
  3637  002484                     u2580:
  3638  002484  5003               	movf	___awmod@divisor,w,c
  3639  002486  5C01               	subwf	___awmod@dividend,w,c
  3640  002488  5004               	movf	___awmod@divisor+1,w,c
  3641  00248A  5802               	subwfb	___awmod@dividend+1,w,c
  3642  00248C  A0D8               	btfss	status,0,c
  3643  00248E  D004               	goto	l419
  3644  002490  5003               	movf	___awmod@divisor,w,c
  3645  002492  5E01               	subwf	___awmod@dividend,f,c
  3646  002494  5004               	movf	___awmod@divisor+1,w,c
  3647  002496  5A02               	subwfb	___awmod@dividend+1,f,c
  3648  002498                     l419:
  3649  002498  90D8               	bcf	status,0,c
  3650  00249A  3204               	rrcf	___awmod@divisor+1,f,c
  3651  00249C  3203               	rrcf	___awmod@divisor,f,c
  3652  00249E  2E05               	decfsz	___awmod@counter,f,c
  3653  0024A0  D7F1               	goto	u2580
  3654  0024A2                     l420:
  3655  0024A2  5006               	movf	___awmod@sign,w,c
  3656  0024A4  B4D8               	btfsc	status,2,c
  3657  0024A6  D004               	goto	l421
  3658  0024A8  6C01               	negf	___awmod@dividend,c
  3659  0024AA  1E02               	comf	___awmod@dividend+1,f,c
  3660  0024AC  B0D8               	btfsc	status,0,c
  3661  0024AE  2A02               	incf	___awmod@dividend+1,f,c
  3662  0024B0                     l421:
  3663  0024B0  C001  F001         	movff	___awmod@dividend,?___awmod
  3664  0024B4  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3665  0024B8  0012               	return	
  3666  0024BA                     __end_of___awmod:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           wreg	equ	0xFE8
  3675                           postinc2	equ	0xFDE
  3676                           postdec2	equ	0xFDD
  3677                           fsr2h	equ	0xFDA
  3678                           fsr2l	equ	0xFD9
  3679                           status	equ	0xFD8
  3680                           
  3681 ;; *************** function ___awdiv *****************
  3682 ;; Defined at:
  3683 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;  dividend        2    6[COMRAM] int 
  3686 ;;  divisor         2    8[COMRAM] int 
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;  quotient        2   12[COMRAM] int 
  3689 ;;  sign            1   11[COMRAM] unsigned char 
  3690 ;;  counter         1   10[COMRAM] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  2    6[COMRAM] int 
  3693 ;; Registers used:
  3694 ;;		wreg, status,2, status,0
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3700 ;;      Params:         4       0       0       0       0       0       0       0       0
  3701 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3703 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3704 ;;Total ram usage:        8 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; This function calls:
  3707 ;;		Nothing
  3708 ;; This function is called by:
  3709 ;;		_fround
  3710 ;;		_scale
  3711 ;;		_printf
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text10
  3716  002344                     __ptext10:
  3717                           	opt stack 0
  3718  002344                     ___awdiv:
  3719                           	opt stack 28
  3720                           
  3721                           ;incstack = 0
  3722  002344  0E00               	movlw	0
  3723  002346  6E0C               	movwf	___awdiv@sign,c
  3724  002348  AE0A               	btfss	___awdiv@divisor+1,7,c
  3725  00234A  D006               	goto	l399
  3726  00234C  6C09               	negf	___awdiv@divisor,c
  3727  00234E  1E0A               	comf	___awdiv@divisor+1,f,c
  3728  002350  B0D8               	btfsc	status,0,c
  3729  002352  2A0A               	incf	___awdiv@divisor+1,f,c
  3730  002354  0E01               	movlw	1
  3731  002356  6E0C               	movwf	___awdiv@sign,c
  3732  002358                     l399:
  3733  002358  AE08               	btfss	___awdiv@dividend+1,7,c
  3734  00235A  D006               	goto	l400
  3735  00235C  6C07               	negf	___awdiv@dividend,c
  3736  00235E  1E08               	comf	___awdiv@dividend+1,f,c
  3737  002360  B0D8               	btfsc	status,0,c
  3738  002362  2A08               	incf	___awdiv@dividend+1,f,c
  3739  002364  0E01               	movlw	1
  3740  002366  1A0C               	xorwf	___awdiv@sign,f,c
  3741  002368                     l400:
  3742  002368  0E00               	movlw	0
  3743  00236A  6E0E               	movwf	___awdiv@quotient+1,c
  3744  00236C  0E00               	movlw	0
  3745  00236E  6E0D               	movwf	___awdiv@quotient,c
  3746  002370  5009               	movf	___awdiv@divisor,w,c
  3747  002372  100A               	iorwf	___awdiv@divisor+1,w,c
  3748  002374  B4D8               	btfsc	status,2,c
  3749  002376  D01C               	goto	l407
  3750  002378  0E01               	movlw	1
  3751  00237A  6E0B               	movwf	___awdiv@counter,c
  3752  00237C  D004               	goto	l402
  3753  00237E  90D8               	bcf	status,0,c
  3754  002380  3609               	rlcf	___awdiv@divisor,f,c
  3755  002382  360A               	rlcf	___awdiv@divisor+1,f,c
  3756  002384  2A0B               	incf	___awdiv@counter,f,c
  3757  002386                     l402:
  3758  002386  AE0A               	btfss	___awdiv@divisor+1,7,c
  3759  002388  D7FA               	goto	l403
  3760  00238A                     u2520:
  3761  00238A  90D8               	bcf	status,0,c
  3762  00238C  360D               	rlcf	___awdiv@quotient,f,c
  3763  00238E  360E               	rlcf	___awdiv@quotient+1,f,c
  3764  002390  5009               	movf	___awdiv@divisor,w,c
  3765  002392  5C07               	subwf	___awdiv@dividend,w,c
  3766  002394  500A               	movf	___awdiv@divisor+1,w,c
  3767  002396  5808               	subwfb	___awdiv@dividend+1,w,c
  3768  002398  A0D8               	btfss	status,0,c
  3769  00239A  D005               	goto	l406
  3770  00239C  5009               	movf	___awdiv@divisor,w,c
  3771  00239E  5E07               	subwf	___awdiv@dividend,f,c
  3772  0023A0  500A               	movf	___awdiv@divisor+1,w,c
  3773  0023A2  5A08               	subwfb	___awdiv@dividend+1,f,c
  3774  0023A4  800D               	bsf	___awdiv@quotient,0,c
  3775  0023A6                     l406:
  3776  0023A6  90D8               	bcf	status,0,c
  3777  0023A8  320A               	rrcf	___awdiv@divisor+1,f,c
  3778  0023AA  3209               	rrcf	___awdiv@divisor,f,c
  3779  0023AC  2E0B               	decfsz	___awdiv@counter,f,c
  3780  0023AE  D7ED               	goto	u2520
  3781  0023B0                     l407:
  3782  0023B0  500C               	movf	___awdiv@sign,w,c
  3783  0023B2  B4D8               	btfsc	status,2,c
  3784  0023B4  D004               	goto	l408
  3785  0023B6  6C0D               	negf	___awdiv@quotient,c
  3786  0023B8  1E0E               	comf	___awdiv@quotient+1,f,c
  3787  0023BA  B0D8               	btfsc	status,0,c
  3788  0023BC  2A0E               	incf	___awdiv@quotient+1,f,c
  3789  0023BE                     l408:
  3790  0023BE  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3791  0023C2  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3792  0023C6  0012               	return	
  3793  0023C8                     __end_of___awdiv:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           wreg	equ	0xFE8
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           fsr2h	equ	0xFDA
  3805                           fsr2l	equ	0xFD9
  3806                           status	equ	0xFD8
  3807                           
  3808 ;; *************** function __tdiv_to_l_ *****************
  3809 ;; Defined at:
  3810 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  f1              3    0[COMRAM] float 
  3813 ;;  f2              3    3[COMRAM] float 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  quot            4    9[COMRAM] unsigned long 
  3816 ;;  exp1            1   14[COMRAM] unsigned char 
  3817 ;;  cntr            1   13[COMRAM] unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  4    0[COMRAM] unsigned long 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3827 ;;      Params:         6       0       0       0       0       0       0       0       0
  3828 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3829 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3830 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3831 ;;Total ram usage:       15 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; This function calls:
  3834 ;;		Nothing
  3835 ;; This function is called by:
  3836 ;;		_printf
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text11
  3841  001BF4                     __ptext11:
  3842                           	opt stack 0
  3843  001BF4                     __tdiv_to_l_:
  3844                           	opt stack 29
  3845                           
  3846                           ;incstack = 0
  3847  001BF4  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3848  001BF8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3849  001BFA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3850  001BFC  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3851  001BFE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3852  001C00  E301               	bnc	u2701
  3853  001C02  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3854  001C04                     u2701:
  3855  001C04  5007               	movf	??__tdiv_to_l_,w,c
  3856  001C06  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3857  001C08  500F               	movf	__tdiv_to_l_@exp1,w,c
  3858  001C0A  A4D8               	btfss	status,2,c
  3859  001C0C  D009               	goto	l535
  3860  001C0E  0E00               	movlw	0
  3861  001C10  6E01               	movwf	?__tdiv_to_l_,c
  3862  001C12  0E00               	movlw	0
  3863  001C14  6E02               	movwf	?__tdiv_to_l_+1,c
  3864  001C16  0E00               	movlw	0
  3865  001C18  6E03               	movwf	?__tdiv_to_l_+2,c
  3866  001C1A  0E00               	movlw	0
  3867  001C1C  6E04               	movwf	?__tdiv_to_l_+3,c
  3868  001C1E  0012               	return	
  3869  001C20                     l535:
  3870  001C20  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3871  001C24  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3872  001C26  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3873  001C28  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3874  001C2A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3875  001C2C  E301               	bnc	u2721
  3876  001C2E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3877  001C30                     u2721:
  3878  001C30  5007               	movf	??__tdiv_to_l_,w,c
  3879  001C32  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3880  001C34  500E               	movf	__tdiv_to_l_@cntr,w,c
  3881  001C36  A4D8               	btfss	status,2,c
  3882  001C38  D009               	goto	l537
  3883  001C3A  0E00               	movlw	0
  3884  001C3C  6E01               	movwf	?__tdiv_to_l_,c
  3885  001C3E  0E00               	movlw	0
  3886  001C40  6E02               	movwf	?__tdiv_to_l_+1,c
  3887  001C42  0E00               	movlw	0
  3888  001C44  6E03               	movwf	?__tdiv_to_l_+2,c
  3889  001C46  0E00               	movlw	0
  3890  001C48  6E04               	movwf	?__tdiv_to_l_+3,c
  3891  001C4A  0012               	return	
  3892  001C4C                     l537:
  3893  001C4C  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3894  001C4E  0EFF               	movlw	255
  3895  001C50  1601               	andwf	__tdiv_to_l_@f1,f,c
  3896  001C52  0EFF               	movlw	255
  3897  001C54  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3898  001C56  0E00               	movlw	0
  3899  001C58  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3900  001C5A  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3901  001C5C  0EFF               	movlw	255
  3902  001C5E  1604               	andwf	__tdiv_to_l_@f2,f,c
  3903  001C60  0EFF               	movlw	255
  3904  001C62  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3905  001C64  0E00               	movlw	0
  3906  001C66  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3907  001C68  0E00               	movlw	0
  3908  001C6A  6E0A               	movwf	__tdiv_to_l_@quot,c
  3909  001C6C  0E00               	movlw	0
  3910  001C6E  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3911  001C70  0E00               	movlw	0
  3912  001C72  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3913  001C74  0E00               	movlw	0
  3914  001C76  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3915  001C78  0E7F               	movlw	127
  3916  001C7A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3917  001C7C  500E               	movf	__tdiv_to_l_@cntr,w,c
  3918  001C7E  0F98               	addlw	152
  3919  001C80  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3920  001C82  0E18               	movlw	24
  3921  001C84  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3922  001C86                     l538:
  3923  001C86  90D8               	bcf	status,0,c
  3924  001C88  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3925  001C8A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3926  001C8C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3927  001C8E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3928  001C90  5004               	movf	__tdiv_to_l_@f2,w,c
  3929  001C92  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3930  001C94  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3931  001C96  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3932  001C98  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3933  001C9A  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3934  001C9C  A0D8               	btfss	status,0,c
  3935  001C9E  D007               	goto	l539
  3936  001CA0  5004               	movf	__tdiv_to_l_@f2,w,c
  3937  001CA2  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3938  001CA4  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3939  001CA6  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3940  001CA8  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3941  001CAA  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3942  001CAC  800A               	bsf	__tdiv_to_l_@quot,0,c
  3943  001CAE                     l539:
  3944  001CAE  90D8               	bcf	status,0,c
  3945  001CB0  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3946  001CB2  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3947  001CB4  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3948  001CB6  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3949  001CB8  D7E6               	goto	l538
  3950  001CBA  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3951  001CBC  D016               	goto	l541
  3952  001CBE  500F               	movf	__tdiv_to_l_@exp1,w,c
  3953  001CC0  0A80               	xorlw	128
  3954  001CC2  0F97               	addlw	151
  3955  001CC4  B0D8               	btfsc	status,0,c
  3956  001CC6  D009               	goto	l542
  3957  001CC8  0E00               	movlw	0
  3958  001CCA  6E01               	movwf	?__tdiv_to_l_,c
  3959  001CCC  0E00               	movlw	0
  3960  001CCE  6E02               	movwf	?__tdiv_to_l_+1,c
  3961  001CD0  0E00               	movlw	0
  3962  001CD2  6E03               	movwf	?__tdiv_to_l_+2,c
  3963  001CD4  0E00               	movlw	0
  3964  001CD6  6E04               	movwf	?__tdiv_to_l_+3,c
  3965  001CD8  0012               	return	
  3966  001CDA                     l542:
  3967  001CDA  90D8               	bcf	status,0,c
  3968  001CDC  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3969  001CDE  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3970  001CE0  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3971  001CE2  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3972  001CE4  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3973  001CE6  D7F9               	goto	l542
  3974  001CE8  D015               	goto	u2780
  3975  001CEA                     l541:
  3976  001CEA  0E17               	movlw	23
  3977  001CEC  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3978  001CEE  D00F               	goto	l547
  3979  001CF0  0E00               	movlw	0
  3980  001CF2  6E01               	movwf	?__tdiv_to_l_,c
  3981  001CF4  0E00               	movlw	0
  3982  001CF6  6E02               	movwf	?__tdiv_to_l_+1,c
  3983  001CF8  0E00               	movlw	0
  3984  001CFA  6E03               	movwf	?__tdiv_to_l_+2,c
  3985  001CFC  0E00               	movlw	0
  3986  001CFE  6E04               	movwf	?__tdiv_to_l_+3,c
  3987  001D00  0012               	return	
  3988  001D02  90D8               	bcf	status,0,c
  3989  001D04  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3990  001D06  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3991  001D08  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3992  001D0A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3993  001D0C  060F               	decf	__tdiv_to_l_@exp1,f,c
  3994  001D0E                     l547:
  3995  001D0E  500F               	movf	__tdiv_to_l_@exp1,w,c
  3996  001D10  A4D8               	btfss	status,2,c
  3997  001D12  D7F7               	goto	l548
  3998  001D14                     u2780:
  3999  001D14  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4000  001D18  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4001  001D1C  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4002  001D20  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4003  001D24  0012               	return		;funcret
  4004  001D26                     __end_of__tdiv_to_l_:
  4005                           	opt stack 0
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           wreg	equ	0xFE8
  4013                           postinc2	equ	0xFDE
  4014                           postdec2	equ	0xFDD
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function __div_to_l_ *****************
  4020 ;; Defined at:
  4021 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  f1              3    0[COMRAM] unsigned long 
  4024 ;;  f2              3    3[COMRAM] unsigned long 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  quot            4    6[COMRAM] unsigned long 
  4027 ;;  exp1            1   11[COMRAM] unsigned char 
  4028 ;;  cntr            1   10[COMRAM] unsigned char 
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  4    0[COMRAM] unsigned long 
  4031 ;; Registers used:
  4032 ;;		wreg, status,2, status,0
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4038 ;;      Params:         6       0       0       0       0       0       0       0       0
  4039 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4041 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4042 ;;Total ram usage:       12 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; This function calls:
  4045 ;;		Nothing
  4046 ;; This function is called by:
  4047 ;;		_printf
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           	psect	text12
  4052  001D26                     __ptext12:
  4053                           	opt stack 0
  4054  001D26                     __div_to_l_:
  4055                           	opt stack 29
  4056                           
  4057                           ;incstack = 0
  4058  001D26  3403               	rlcf	__div_to_l_@f1+2,w,c
  4059  001D28  3404               	rlcf	__div_to_l_@f1+3,w,c
  4060  001D2A  6E0C               	movwf	__div_to_l_@exp1,c
  4061  001D2C  500C               	movf	__div_to_l_@exp1,w,c
  4062  001D2E  A4D8               	btfss	status,2,c
  4063  001D30  D009               	goto	l431
  4064  001D32  0E00               	movlw	0
  4065  001D34  6E01               	movwf	?__div_to_l_,c
  4066  001D36  0E00               	movlw	0
  4067  001D38  6E02               	movwf	?__div_to_l_+1,c
  4068  001D3A  0E00               	movlw	0
  4069  001D3C  6E03               	movwf	?__div_to_l_+2,c
  4070  001D3E  0E00               	movlw	0
  4071  001D40  6E04               	movwf	?__div_to_l_+3,c
  4072  001D42  0012               	return	
  4073  001D44                     l431:
  4074  001D44  3406               	rlcf	__div_to_l_@f2+2,w,c
  4075  001D46  3407               	rlcf	__div_to_l_@f2+3,w,c
  4076  001D48  6E0B               	movwf	__div_to_l_@cntr,c
  4077  001D4A  500B               	movf	__div_to_l_@cntr,w,c
  4078  001D4C  A4D8               	btfss	status,2,c
  4079  001D4E  D009               	goto	l433
  4080  001D50  0E00               	movlw	0
  4081  001D52  6E01               	movwf	?__div_to_l_,c
  4082  001D54  0E00               	movlw	0
  4083  001D56  6E02               	movwf	?__div_to_l_+1,c
  4084  001D58  0E00               	movlw	0
  4085  001D5A  6E03               	movwf	?__div_to_l_+2,c
  4086  001D5C  0E00               	movlw	0
  4087  001D5E  6E04               	movwf	?__div_to_l_+3,c
  4088  001D60  0012               	return	
  4089  001D62                     l433:
  4090  001D62  8E03               	bsf	__div_to_l_@f1+2,7,c
  4091  001D64  0EFF               	movlw	255
  4092  001D66  1601               	andwf	__div_to_l_@f1,f,c
  4093  001D68  0EFF               	movlw	255
  4094  001D6A  1602               	andwf	__div_to_l_@f1+1,f,c
  4095  001D6C  0EFF               	movlw	255
  4096  001D6E  1603               	andwf	__div_to_l_@f1+2,f,c
  4097  001D70  0E00               	movlw	0
  4098  001D72  1604               	andwf	__div_to_l_@f1+3,f,c
  4099  001D74  8E06               	bsf	__div_to_l_@f2+2,7,c
  4100  001D76  0EFF               	movlw	255
  4101  001D78  1604               	andwf	__div_to_l_@f2,f,c
  4102  001D7A  0EFF               	movlw	255
  4103  001D7C  1605               	andwf	__div_to_l_@f2+1,f,c
  4104  001D7E  0EFF               	movlw	255
  4105  001D80  1606               	andwf	__div_to_l_@f2+2,f,c
  4106  001D82  0E00               	movlw	0
  4107  001D84  1607               	andwf	__div_to_l_@f2+3,f,c
  4108  001D86  0E00               	movlw	0
  4109  001D88  6E07               	movwf	__div_to_l_@quot,c
  4110  001D8A  0E00               	movlw	0
  4111  001D8C  6E08               	movwf	__div_to_l_@quot+1,c
  4112  001D8E  0E00               	movlw	0
  4113  001D90  6E09               	movwf	__div_to_l_@quot+2,c
  4114  001D92  0E00               	movlw	0
  4115  001D94  6E0A               	movwf	__div_to_l_@quot+3,c
  4116  001D96  0E7F               	movlw	127
  4117  001D98  5E0C               	subwf	__div_to_l_@exp1,f,c
  4118  001D9A  500B               	movf	__div_to_l_@cntr,w,c
  4119  001D9C  0FA0               	addlw	160
  4120  001D9E  5E0C               	subwf	__div_to_l_@exp1,f,c
  4121  001DA0  0E20               	movlw	32
  4122  001DA2  6E0B               	movwf	__div_to_l_@cntr,c
  4123  001DA4  90D8               	bcf	status,0,c
  4124  001DA6  3607               	rlcf	__div_to_l_@quot,f,c
  4125  001DA8  3608               	rlcf	__div_to_l_@quot+1,f,c
  4126  001DAA  3609               	rlcf	__div_to_l_@quot+2,f,c
  4127  001DAC  360A               	rlcf	__div_to_l_@quot+3,f,c
  4128  001DAE  5004               	movf	__div_to_l_@f2,w,c
  4129  001DB0  5C01               	subwf	__div_to_l_@f1,w,c
  4130  001DB2  5005               	movf	__div_to_l_@f2+1,w,c
  4131  001DB4  5802               	subwfb	__div_to_l_@f1+1,w,c
  4132  001DB6  5006               	movf	__div_to_l_@f2+2,w,c
  4133  001DB8  5803               	subwfb	__div_to_l_@f1+2,w,c
  4134  001DBA  5007               	movf	__div_to_l_@f2+3,w,c
  4135  001DBC  5804               	subwfb	__div_to_l_@f1+3,w,c
  4136  001DBE  A0D8               	btfss	status,0,c
  4137  001DC0  D009               	goto	l435
  4138  001DC2  5004               	movf	__div_to_l_@f2,w,c
  4139  001DC4  5E01               	subwf	__div_to_l_@f1,f,c
  4140  001DC6  5005               	movf	__div_to_l_@f2+1,w,c
  4141  001DC8  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4142  001DCA  5006               	movf	__div_to_l_@f2+2,w,c
  4143  001DCC  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4144  001DCE  5007               	movf	__div_to_l_@f2+3,w,c
  4145  001DD0  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4146  001DD2  8007               	bsf	__div_to_l_@quot,0,c
  4147  001DD4                     l435:
  4148  001DD4  90D8               	bcf	status,0,c
  4149  001DD6  3601               	rlcf	__div_to_l_@f1,f,c
  4150  001DD8  3602               	rlcf	__div_to_l_@f1+1,f,c
  4151  001DDA  3603               	rlcf	__div_to_l_@f1+2,f,c
  4152  001DDC  3604               	rlcf	__div_to_l_@f1+3,f,c
  4153  001DDE  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4154  001DE0  D7E1               	goto	l434
  4155  001DE2  AE0C               	btfss	__div_to_l_@exp1,7,c
  4156  001DE4  D016               	goto	l437
  4157  001DE6  500C               	movf	__div_to_l_@exp1,w,c
  4158  001DE8  0A80               	xorlw	128
  4159  001DEA  0F9F               	addlw	159
  4160  001DEC  B0D8               	btfsc	status,0,c
  4161  001DEE  D009               	goto	l438
  4162  001DF0  0E00               	movlw	0
  4163  001DF2  6E01               	movwf	?__div_to_l_,c
  4164  001DF4  0E00               	movlw	0
  4165  001DF6  6E02               	movwf	?__div_to_l_+1,c
  4166  001DF8  0E00               	movlw	0
  4167  001DFA  6E03               	movwf	?__div_to_l_+2,c
  4168  001DFC  0E00               	movlw	0
  4169  001DFE  6E04               	movwf	?__div_to_l_+3,c
  4170  001E00  0012               	return	
  4171  001E02                     l438:
  4172  001E02  90D8               	bcf	status,0,c
  4173  001E04  320A               	rrcf	__div_to_l_@quot+3,f,c
  4174  001E06  3209               	rrcf	__div_to_l_@quot+2,f,c
  4175  001E08  3208               	rrcf	__div_to_l_@quot+1,f,c
  4176  001E0A  3207               	rrcf	__div_to_l_@quot,f,c
  4177  001E0C  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4178  001E0E  D7F9               	goto	l438
  4179  001E10  D015               	goto	u2850
  4180  001E12                     l437:
  4181  001E12  0E1F               	movlw	31
  4182  001E14  640C               	cpfsgt	__div_to_l_@exp1,c
  4183  001E16  D00F               	goto	l443
  4184  001E18  0E00               	movlw	0
  4185  001E1A  6E01               	movwf	?__div_to_l_,c
  4186  001E1C  0E00               	movlw	0
  4187  001E1E  6E02               	movwf	?__div_to_l_+1,c
  4188  001E20  0E00               	movlw	0
  4189  001E22  6E03               	movwf	?__div_to_l_+2,c
  4190  001E24  0E00               	movlw	0
  4191  001E26  6E04               	movwf	?__div_to_l_+3,c
  4192  001E28  0012               	return	
  4193  001E2A  90D8               	bcf	status,0,c
  4194  001E2C  3607               	rlcf	__div_to_l_@quot,f,c
  4195  001E2E  3608               	rlcf	__div_to_l_@quot+1,f,c
  4196  001E30  3609               	rlcf	__div_to_l_@quot+2,f,c
  4197  001E32  360A               	rlcf	__div_to_l_@quot+3,f,c
  4198  001E34  060C               	decf	__div_to_l_@exp1,f,c
  4199  001E36                     l443:
  4200  001E36  500C               	movf	__div_to_l_@exp1,w,c
  4201  001E38  A4D8               	btfss	status,2,c
  4202  001E3A  D7F7               	goto	l444
  4203  001E3C                     u2850:
  4204  001E3C  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4205  001E40  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4206  001E44  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4207  001E48  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4208  001E4C  0012               	return		;funcret
  4209  001E4E                     __end_of__div_to_l_:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           wreg	equ	0xFE8
  4218                           postinc2	equ	0xFDE
  4219                           postdec2	equ	0xFDD
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function ___lltoft *****************
  4225 ;; Defined at:
  4226 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  c               4    8[COMRAM] unsigned long 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  exp             1   16[COMRAM] unsigned char 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  3    8[COMRAM] float 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2, status,0, cstack
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4240 ;;      Params:         4       0       0       0       0       0       0       0       0
  4241 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4242 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4243 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4244 ;;Total ram usage:        9 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    1
  4247 ;; This function calls:
  4248 ;;		___ftpack
  4249 ;; This function is called by:
  4250 ;;		_printf
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text13
  4255  002520                     __ptext13:
  4256                           	opt stack 0
  4257  002520                     ___lltoft:
  4258                           	opt stack 28
  4259                           
  4260                           ;incstack = 0
  4261  002520  0E8E               	movlw	142
  4262  002522  6E11               	movwf	___lltoft@exp,c
  4263  002524  D006               	goto	l642
  4264  002526  90D8               	bcf	status,0,c
  4265  002528  320C               	rrcf	___lltoft@c+3,f,c
  4266  00252A  320B               	rrcf	___lltoft@c+2,f,c
  4267  00252C  320A               	rrcf	___lltoft@c+1,f,c
  4268  00252E  3209               	rrcf	___lltoft@c,f,c
  4269  002530  2A11               	incf	___lltoft@exp,f,c
  4270  002532                     l642:
  4271  002532  0E00               	movlw	0
  4272  002534  1409               	andwf	___lltoft@c,w,c
  4273  002536  6E0D               	movwf	??___lltoft& (0+255),c
  4274  002538  0E00               	movlw	0
  4275  00253A  140A               	andwf	___lltoft@c+1,w,c
  4276  00253C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4277  00253E  0E00               	movlw	0
  4278  002540  140B               	andwf	___lltoft@c+2,w,c
  4279  002542  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4280  002544  0EFF               	movlw	255
  4281  002546  140C               	andwf	___lltoft@c+3,w,c
  4282  002548  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4283  00254A  500D               	movf	??___lltoft,w,c
  4284  00254C  100E               	iorwf	??___lltoft+1,w,c
  4285  00254E  100F               	iorwf	??___lltoft+2,w,c
  4286  002550  1010               	iorwf	??___lltoft+3,w,c
  4287  002552  A4D8               	btfss	status,2,c
  4288  002554  D7E8               	goto	l643
  4289  002556  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4290  00255A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4291  00255E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4292  002562  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4293  002566  0E00               	movlw	0
  4294  002568  6E05               	movwf	___ftpack@sign,c
  4295  00256A  EC03  F011         	call	___ftpack	;wreg free
  4296  00256E  C001  F009         	movff	?___ftpack,?___lltoft
  4297  002572  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4298  002576  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4299  00257A  0012               	return	
  4300  00257C                     __end_of___lltoft:
  4301                           	opt stack 0
  4302                           tblptru	equ	0xFF8
  4303                           tblptrh	equ	0xFF7
  4304                           tblptrl	equ	0xFF6
  4305                           tablat	equ	0xFF5
  4306                           prodh	equ	0xFF4
  4307                           prodl	equ	0xFF3
  4308                           wreg	equ	0xFE8
  4309                           postinc2	equ	0xFDE
  4310                           postdec2	equ	0xFDD
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function ___llmod *****************
  4316 ;; Defined at:
  4317 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  dividend        4    0[COMRAM] unsigned long 
  4320 ;;  divisor         4    4[COMRAM] unsigned long 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  counter         1    8[COMRAM] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  4    0[COMRAM] unsigned long 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4332 ;;      Params:         8       0       0       0       0       0       0       0       0
  4333 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4335 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4336 ;;Total ram usage:        9 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_printf
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text14
  4346  0024BA                     __ptext14:
  4347                           	opt stack 0
  4348  0024BA                     ___llmod:
  4349                           	opt stack 29
  4350                           
  4351                           ;incstack = 0
  4352  0024BA  5005               	movf	___llmod@divisor,w,c
  4353  0024BC  1006               	iorwf	___llmod@divisor+1,w,c
  4354  0024BE  1007               	iorwf	___llmod@divisor+2,w,c
  4355  0024C0  1008               	iorwf	___llmod@divisor+3,w,c
  4356  0024C2  B4D8               	btfsc	status,2,c
  4357  0024C4  D024               	goto	l636
  4358  0024C6  0E01               	movlw	1
  4359  0024C8  6E09               	movwf	___llmod@counter,c
  4360  0024CA  D006               	goto	l631
  4361  0024CC  90D8               	bcf	status,0,c
  4362  0024CE  3605               	rlcf	___llmod@divisor,f,c
  4363  0024D0  3606               	rlcf	___llmod@divisor+1,f,c
  4364  0024D2  3607               	rlcf	___llmod@divisor+2,f,c
  4365  0024D4  3608               	rlcf	___llmod@divisor+3,f,c
  4366  0024D6  2A09               	incf	___llmod@counter,f,c
  4367  0024D8                     l631:
  4368  0024D8  AE08               	btfss	___llmod@divisor+3,7,c
  4369  0024DA  D7F8               	goto	l632
  4370  0024DC                     u3030:
  4371  0024DC  5005               	movf	___llmod@divisor,w,c
  4372  0024DE  5C01               	subwf	___llmod@dividend,w,c
  4373  0024E0  5006               	movf	___llmod@divisor+1,w,c
  4374  0024E2  5802               	subwfb	___llmod@dividend+1,w,c
  4375  0024E4  5007               	movf	___llmod@divisor+2,w,c
  4376  0024E6  5803               	subwfb	___llmod@dividend+2,w,c
  4377  0024E8  5008               	movf	___llmod@divisor+3,w,c
  4378  0024EA  5804               	subwfb	___llmod@dividend+3,w,c
  4379  0024EC  A0D8               	btfss	status,0,c
  4380  0024EE  D008               	goto	l635
  4381  0024F0  5005               	movf	___llmod@divisor,w,c
  4382  0024F2  5E01               	subwf	___llmod@dividend,f,c
  4383  0024F4  5006               	movf	___llmod@divisor+1,w,c
  4384  0024F6  5A02               	subwfb	___llmod@dividend+1,f,c
  4385  0024F8  5007               	movf	___llmod@divisor+2,w,c
  4386  0024FA  5A03               	subwfb	___llmod@dividend+2,f,c
  4387  0024FC  5008               	movf	___llmod@divisor+3,w,c
  4388  0024FE  5A04               	subwfb	___llmod@dividend+3,f,c
  4389  002500                     l635:
  4390  002500  90D8               	bcf	status,0,c
  4391  002502  3208               	rrcf	___llmod@divisor+3,f,c
  4392  002504  3207               	rrcf	___llmod@divisor+2,f,c
  4393  002506  3206               	rrcf	___llmod@divisor+1,f,c
  4394  002508  3205               	rrcf	___llmod@divisor,f,c
  4395  00250A  2E09               	decfsz	___llmod@counter,f,c
  4396  00250C  D7E7               	goto	u3030
  4397  00250E                     l636:
  4398  00250E  C001  F001         	movff	___llmod@dividend,?___llmod
  4399  002512  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4400  002516  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4401  00251A  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4402  00251E  0012               	return		;funcret
  4403  002520                     __end_of___llmod:
  4404                           	opt stack 0
  4405                           tblptru	equ	0xFF8
  4406                           tblptrh	equ	0xFF7
  4407                           tblptrl	equ	0xFF6
  4408                           tablat	equ	0xFF5
  4409                           prodh	equ	0xFF4
  4410                           prodl	equ	0xFF3
  4411                           wreg	equ	0xFE8
  4412                           postinc2	equ	0xFDE
  4413                           postdec2	equ	0xFDD
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           status	equ	0xFD8
  4417                           
  4418 ;; *************** function ___lldiv *****************
  4419 ;; Defined at:
  4420 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;  dividend        4    0[COMRAM] unsigned long 
  4423 ;;  divisor         4    4[COMRAM] unsigned long 
  4424 ;; Auto vars:     Size  Location     Type
  4425 ;;  quotient        4    8[COMRAM] unsigned long 
  4426 ;;  counter         1   12[COMRAM] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  4    0[COMRAM] unsigned long 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4436 ;;      Params:         8       0       0       0       0       0       0       0       0
  4437 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4439 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4440 ;;Total ram usage:       13 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; This function calls:
  4443 ;;		Nothing
  4444 ;; This function is called by:
  4445 ;;		_printf
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text15
  4450  0023C8                     __ptext15:
  4451                           	opt stack 0
  4452  0023C8                     ___lldiv:
  4453                           	opt stack 29
  4454                           
  4455                           ;incstack = 0
  4456  0023C8  0E00               	movlw	0
  4457  0023CA  6E09               	movwf	___lldiv@quotient,c
  4458  0023CC  0E00               	movlw	0
  4459  0023CE  6E0A               	movwf	___lldiv@quotient+1,c
  4460  0023D0  0E00               	movlw	0
  4461  0023D2  6E0B               	movwf	___lldiv@quotient+2,c
  4462  0023D4  0E00               	movlw	0
  4463  0023D6  6E0C               	movwf	___lldiv@quotient+3,c
  4464  0023D8  5005               	movf	___lldiv@divisor,w,c
  4465  0023DA  1006               	iorwf	___lldiv@divisor+1,w,c
  4466  0023DC  1007               	iorwf	___lldiv@divisor+2,w,c
  4467  0023DE  1008               	iorwf	___lldiv@divisor+3,w,c
  4468  0023E0  B4D8               	btfsc	status,2,c
  4469  0023E2  D02A               	goto	l626
  4470  0023E4  0E01               	movlw	1
  4471  0023E6  6E0D               	movwf	___lldiv@counter,c
  4472  0023E8  D006               	goto	l621
  4473  0023EA  90D8               	bcf	status,0,c
  4474  0023EC  3605               	rlcf	___lldiv@divisor,f,c
  4475  0023EE  3606               	rlcf	___lldiv@divisor+1,f,c
  4476  0023F0  3607               	rlcf	___lldiv@divisor+2,f,c
  4477  0023F2  3608               	rlcf	___lldiv@divisor+3,f,c
  4478  0023F4  2A0D               	incf	___lldiv@counter,f,c
  4479  0023F6                     l621:
  4480  0023F6  AE08               	btfss	___lldiv@divisor+3,7,c
  4481  0023F8  D7F8               	goto	l622
  4482  0023FA                     u3000:
  4483  0023FA  90D8               	bcf	status,0,c
  4484  0023FC  3609               	rlcf	___lldiv@quotient,f,c
  4485  0023FE  360A               	rlcf	___lldiv@quotient+1,f,c
  4486  002400  360B               	rlcf	___lldiv@quotient+2,f,c
  4487  002402  360C               	rlcf	___lldiv@quotient+3,f,c
  4488  002404  5005               	movf	___lldiv@divisor,w,c
  4489  002406  5C01               	subwf	___lldiv@dividend,w,c
  4490  002408  5006               	movf	___lldiv@divisor+1,w,c
  4491  00240A  5802               	subwfb	___lldiv@dividend+1,w,c
  4492  00240C  5007               	movf	___lldiv@divisor+2,w,c
  4493  00240E  5803               	subwfb	___lldiv@dividend+2,w,c
  4494  002410  5008               	movf	___lldiv@divisor+3,w,c
  4495  002412  5804               	subwfb	___lldiv@dividend+3,w,c
  4496  002414  A0D8               	btfss	status,0,c
  4497  002416  D009               	goto	l625
  4498  002418  5005               	movf	___lldiv@divisor,w,c
  4499  00241A  5E01               	subwf	___lldiv@dividend,f,c
  4500  00241C  5006               	movf	___lldiv@divisor+1,w,c
  4501  00241E  5A02               	subwfb	___lldiv@dividend+1,f,c
  4502  002420  5007               	movf	___lldiv@divisor+2,w,c
  4503  002422  5A03               	subwfb	___lldiv@dividend+2,f,c
  4504  002424  5008               	movf	___lldiv@divisor+3,w,c
  4505  002426  5A04               	subwfb	___lldiv@dividend+3,f,c
  4506  002428  8009               	bsf	___lldiv@quotient,0,c
  4507  00242A                     l625:
  4508  00242A  90D8               	bcf	status,0,c
  4509  00242C  3208               	rrcf	___lldiv@divisor+3,f,c
  4510  00242E  3207               	rrcf	___lldiv@divisor+2,f,c
  4511  002430  3206               	rrcf	___lldiv@divisor+1,f,c
  4512  002432  3205               	rrcf	___lldiv@divisor,f,c
  4513  002434  2E0D               	decfsz	___lldiv@counter,f,c
  4514  002436  D7E1               	goto	u3000
  4515  002438                     l626:
  4516  002438  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4517  00243C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4518  002440  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4519  002444  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4520  002448  0012               	return		;funcret
  4521  00244A                     __end_of___lldiv:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodh	equ	0xFF4
  4528                           prodl	equ	0xFF3
  4529                           wreg	equ	0xFE8
  4530                           postinc2	equ	0xFDE
  4531                           postdec2	equ	0xFDD
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8
  4535                           
  4536 ;; *************** function ___fttol *****************
  4537 ;; Defined at:
  4538 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  f1              3   42[COMRAM] float 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  lval            4   52[COMRAM] unsigned long 
  4543 ;;  exp1            1   56[COMRAM] unsigned char 
  4544 ;;  sign1           1   51[COMRAM] unsigned char 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  4   42[COMRAM] long 
  4547 ;; Registers used:
  4548 ;;		wreg, status,2, status,0
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4554 ;;      Params:         4       0       0       0       0       0       0       0       0
  4555 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4556 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4557 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4558 ;;Total ram usage:       15 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_printf
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text16
  4568  001F42                     __ptext16:
  4569                           	opt stack 0
  4570  001F42                     ___fttol:
  4571                           	opt stack 29
  4572                           
  4573                           ;incstack = 0
  4574  001F42  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4575  001F46  6A30               	clrf	(??___fttol+1)& (0+255),c
  4576  001F48  6A31               	clrf	(??___fttol+2)& (0+255),c
  4577  001F4A  342C               	rlcf	___fttol@f1+1,w,c
  4578  001F4C  362F               	rlcf	??___fttol& (0+255),f,c
  4579  001F4E  E301               	bnc	u2911
  4580  001F50  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4581  001F52                     u2911:
  4582  001F52  502F               	movf	??___fttol,w,c
  4583  001F54  6E39               	movwf	___fttol@exp1,c
  4584  001F56  5039               	movf	___fttol@exp1,w,c
  4585  001F58  A4D8               	btfss	status,2,c
  4586  001F5A  D009               	goto	l580
  4587  001F5C  0E00               	movlw	0
  4588  001F5E  6E2B               	movwf	?___fttol,c
  4589  001F60  0E00               	movlw	0
  4590  001F62  6E2C               	movwf	?___fttol+1,c
  4591  001F64  0E00               	movlw	0
  4592  001F66  6E2D               	movwf	?___fttol+2,c
  4593  001F68  0E00               	movlw	0
  4594  001F6A  6E2E               	movwf	?___fttol+3,c
  4595  001F6C  0012               	return	
  4596  001F6E                     l580:
  4597  001F6E  0E17               	movlw	23
  4598  001F70  6E2F               	movwf	??___fttol& (0+255),c
  4599  001F72  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4600  001F76  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4601  001F7A  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4602  001F7E  282F               	incf	??___fttol,w,c
  4603  001F80  6E33               	movwf	(??___fttol+4)& (0+255),c
  4604  001F82  D004               	goto	u2930
  4605  001F84                     u2935:
  4606  001F84  90D8               	bcf	status,0,c
  4607  001F86  3232               	rrcf	??___fttol+3,f,c
  4608  001F88  3231               	rrcf	??___fttol+2,f,c
  4609  001F8A  3230               	rrcf	??___fttol+1,f,c
  4610  001F8C                     u2930:
  4611  001F8C  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4612  001F8E  D7FA               	goto	u2935
  4613  001F90  5030               	movf	??___fttol+1,w,c
  4614  001F92  6E34               	movwf	___fttol@sign1,c
  4615  001F94  8E2C               	bsf	___fttol@f1+1,7,c
  4616  001F96  0EFF               	movlw	255
  4617  001F98  162B               	andwf	___fttol@f1,f,c
  4618  001F9A  0EFF               	movlw	255
  4619  001F9C  162C               	andwf	___fttol@f1+1,f,c
  4620  001F9E  0E00               	movlw	0
  4621  001FA0  162D               	andwf	___fttol@f1+2,f,c
  4622  001FA2  502B               	movf	___fttol@f1,w,c
  4623  001FA4  6E35               	movwf	___fttol@lval,c
  4624  001FA6  502C               	movf	___fttol@f1+1,w,c
  4625  001FA8  6E36               	movwf	___fttol@lval+1,c
  4626  001FAA  502D               	movf	___fttol@f1+2,w,c
  4627  001FAC  6E37               	movwf	___fttol@lval+2,c
  4628  001FAE  6A38               	clrf	___fttol@lval+3,c
  4629  001FB0  0E8E               	movlw	142
  4630  001FB2  5E39               	subwf	___fttol@exp1,f,c
  4631  001FB4  AE39               	btfss	___fttol@exp1,7,c
  4632  001FB6  D016               	goto	l582
  4633  001FB8  5039               	movf	___fttol@exp1,w,c
  4634  001FBA  0A80               	xorlw	128
  4635  001FBC  0F8F               	addlw	143
  4636  001FBE  B0D8               	btfsc	status,0,c
  4637  001FC0  D009               	goto	l583
  4638  001FC2  0E00               	movlw	0
  4639  001FC4  6E2B               	movwf	?___fttol,c
  4640  001FC6  0E00               	movlw	0
  4641  001FC8  6E2C               	movwf	?___fttol+1,c
  4642  001FCA  0E00               	movlw	0
  4643  001FCC  6E2D               	movwf	?___fttol+2,c
  4644  001FCE  0E00               	movlw	0
  4645  001FD0  6E2E               	movwf	?___fttol+3,c
  4646  001FD2  0012               	return	
  4647  001FD4                     l583:
  4648  001FD4  90D8               	bcf	status,0,c
  4649  001FD6  3238               	rrcf	___fttol@lval+3,f,c
  4650  001FD8  3237               	rrcf	___fttol@lval+2,f,c
  4651  001FDA  3236               	rrcf	___fttol@lval+1,f,c
  4652  001FDC  3235               	rrcf	___fttol@lval,f,c
  4653  001FDE  3E39               	incfsz	___fttol@exp1,f,c
  4654  001FE0  D7F9               	goto	l583
  4655  001FE2  D015               	goto	u2970
  4656  001FE4                     l582:
  4657  001FE4  0E17               	movlw	23
  4658  001FE6  6439               	cpfsgt	___fttol@exp1,c
  4659  001FE8  D00F               	goto	l588
  4660  001FEA  0E00               	movlw	0
  4661  001FEC  6E2B               	movwf	?___fttol,c
  4662  001FEE  0E00               	movlw	0
  4663  001FF0  6E2C               	movwf	?___fttol+1,c
  4664  001FF2  0E00               	movlw	0
  4665  001FF4  6E2D               	movwf	?___fttol+2,c
  4666  001FF6  0E00               	movlw	0
  4667  001FF8  6E2E               	movwf	?___fttol+3,c
  4668  001FFA  0012               	return	
  4669  001FFC  90D8               	bcf	status,0,c
  4670  001FFE  3635               	rlcf	___fttol@lval,f,c
  4671  002000  3636               	rlcf	___fttol@lval+1,f,c
  4672  002002  3637               	rlcf	___fttol@lval+2,f,c
  4673  002004  3638               	rlcf	___fttol@lval+3,f,c
  4674  002006  0639               	decf	___fttol@exp1,f,c
  4675  002008                     l588:
  4676  002008  5039               	movf	___fttol@exp1,w,c
  4677  00200A  A4D8               	btfss	status,2,c
  4678  00200C  D7F7               	goto	l589
  4679  00200E                     u2970:
  4680  00200E  5034               	movf	___fttol@sign1,w,c
  4681  002010  B4D8               	btfsc	status,2,c
  4682  002012  D008               	goto	l591
  4683  002014  1E38               	comf	___fttol@lval+3,f,c
  4684  002016  1E37               	comf	___fttol@lval+2,f,c
  4685  002018  1E36               	comf	___fttol@lval+1,f,c
  4686  00201A  6C35               	negf	___fttol@lval,c
  4687  00201C  0E00               	movlw	0
  4688  00201E  2236               	addwfc	___fttol@lval+1,f,c
  4689  002020  2237               	addwfc	___fttol@lval+2,f,c
  4690  002022  2238               	addwfc	___fttol@lval+3,f,c
  4691  002024                     l591:
  4692  002024  C035  F02B         	movff	___fttol@lval,?___fttol
  4693  002028  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4694  00202C  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4695  002030  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4696  002034  0012               	return	
  4697  002036                     __end_of___fttol:
  4698                           	opt stack 0
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           wreg	equ	0xFE8
  4706                           postinc2	equ	0xFDE
  4707                           postdec2	equ	0xFDD
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8
  4711                           
  4712 ;; *************** function ___ftsub *****************
  4713 ;; Defined at:
  4714 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  f1              3   57[COMRAM] float 
  4717 ;;  f2              3   60[COMRAM] float 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;		None
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  3   57[COMRAM] float 
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0, cstack
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4729 ;;      Params:         6       0       0       0       0       0       0       0       0
  4730 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4732 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4733 ;;Total ram usage:        6 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    2
  4736 ;; This function calls:
  4737 ;;		___ftadd
  4738 ;; This function is called by:
  4739 ;;		_printf
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           	psect	text17
  4744  00257C                     __ptext17:
  4745                           	opt stack 0
  4746  00257C                     ___ftsub:
  4747                           	opt stack 27
  4748                           
  4749                           ;incstack = 0
  4750  00257C  503D               	movf	___ftsub@f2,w,c
  4751  00257E  103E               	iorwf	___ftsub@f2+1,w,c
  4752  002580  103F               	iorwf	___ftsub@f2+2,w,c
  4753  002582  B4D8               	btfsc	status,2,c
  4754  002584  D006               	goto	l576
  4755  002586  0E00               	movlw	0
  4756  002588  1A3D               	xorwf	___ftsub@f2,f,c
  4757  00258A  0E00               	movlw	0
  4758  00258C  1A3E               	xorwf	___ftsub@f2+1,f,c
  4759  00258E  0E80               	movlw	128
  4760  002590  1A3F               	xorwf	___ftsub@f2+2,f,c
  4761  002592                     l576:
  4762  002592  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4763  002596  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4764  00259A  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4765  00259E  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4766  0025A2  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4767  0025A6  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4768  0025AA  EC24  F00D         	call	___ftadd	;wreg free
  4769  0025AE  C02E  F03A         	movff	?___ftadd,?___ftsub
  4770  0025B2  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4771  0025B6  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4772  0025BA  0012               	return	
  4773  0025BC                     __end_of___ftsub:
  4774                           	opt stack 0
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           wreg	equ	0xFE8
  4782                           postinc2	equ	0xFDE
  4783                           postdec2	equ	0xFDD
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function ___ftadd *****************
  4789 ;; Defined at:
  4790 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  f1              3   45[COMRAM] float 
  4793 ;;  f2              3   48[COMRAM] float 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  exp1            1   56[COMRAM] unsigned char 
  4796 ;;  exp2            1   55[COMRAM] unsigned char 
  4797 ;;  sign            1   54[COMRAM] unsigned char 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  3   45[COMRAM] float 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4807 ;;      Params:         6       0       0       0       0       0       0       0       0
  4808 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4809 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4810 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4811 ;;Total ram usage:       12 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    1
  4814 ;; This function calls:
  4815 ;;		___ftpack
  4816 ;; This function is called by:
  4817 ;;		_printf
  4818 ;;		___ftsub
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text18
  4823  001A48                     __ptext18:
  4824                           	opt stack 0
  4825  001A48                     ___ftadd:
  4826                           	opt stack 27
  4827                           
  4828                           ;incstack = 0
  4829  001A48  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4830  001A4C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4831  001A4E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4832  001A50  342F               	rlcf	___ftadd@f1+1,w,c
  4833  001A52  3634               	rlcf	??___ftadd& (0+255),f,c
  4834  001A54  E301               	bnc	u2221
  4835  001A56  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4836  001A58                     u2221:
  4837  001A58  5034               	movf	??___ftadd,w,c
  4838  001A5A  6E39               	movwf	___ftadd@exp1,c
  4839  001A5C  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4840  001A60  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4841  001A62  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4842  001A64  3432               	rlcf	___ftadd@f2+1,w,c
  4843  001A66  3634               	rlcf	??___ftadd& (0+255),f,c
  4844  001A68  E301               	bnc	u2231
  4845  001A6A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4846  001A6C                     u2231:
  4847  001A6C  5034               	movf	??___ftadd,w,c
  4848  001A6E  6E38               	movwf	___ftadd@exp2,c
  4849  001A70  5039               	movf	___ftadd@exp1,w,c
  4850  001A72  B4D8               	btfsc	status,2,c
  4851  001A74  D00B               	goto	u2260
  4852  001A76  5038               	movf	___ftadd@exp2,w,c
  4853  001A78  5C39               	subwf	___ftadd@exp1,w,c
  4854  001A7A  B0D8               	btfsc	status,0,c
  4855  001A7C  D00E               	goto	l494
  4856  001A7E  5039               	movf	___ftadd@exp1,w,c
  4857  001A80  0800               	sublw	0
  4858  001A82  2438               	addwf	___ftadd@exp2,w,c
  4859  001A84  6E34               	movwf	??___ftadd& (0+255),c
  4860  001A86  0E18               	movlw	24
  4861  001A88  6434               	cpfsgt	??___ftadd,c
  4862  001A8A  D007               	goto	l494
  4863  001A8C                     u2260:
  4864  001A8C  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4865  001A90  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4866  001A94  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4867  001A98  0012               	return	
  4868  001A9A                     l494:
  4869  001A9A  5038               	movf	___ftadd@exp2,w,c
  4870  001A9C  B4D8               	btfsc	status,2,c
  4871  001A9E  D00B               	goto	u2290
  4872  001AA0  5039               	movf	___ftadd@exp1,w,c
  4873  001AA2  5C38               	subwf	___ftadd@exp2,w,c
  4874  001AA4  B0D8               	btfsc	status,0,c
  4875  001AA6  D00E               	goto	l498
  4876  001AA8  5038               	movf	___ftadd@exp2,w,c
  4877  001AAA  0800               	sublw	0
  4878  001AAC  2439               	addwf	___ftadd@exp1,w,c
  4879  001AAE  6E34               	movwf	??___ftadd& (0+255),c
  4880  001AB0  0E18               	movlw	24
  4881  001AB2  6434               	cpfsgt	??___ftadd,c
  4882  001AB4  D007               	goto	l498
  4883  001AB6                     u2290:
  4884  001AB6  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4885  001ABA  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4886  001ABE  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4887  001AC2  0012               	return	
  4888  001AC4                     l498:
  4889  001AC4  0E06               	movlw	6
  4890  001AC6  6E37               	movwf	___ftadd@sign,c
  4891  001AC8  BE30               	btfsc	___ftadd@f1+2,7,c
  4892  001ACA  8E37               	bsf	___ftadd@sign,7,c
  4893  001ACC  BE33               	btfsc	___ftadd@f2+2,7,c
  4894  001ACE  8C37               	bsf	___ftadd@sign,6,c
  4895  001AD0  8E2F               	bsf	___ftadd@f1+1,7,c
  4896  001AD2  0EFF               	movlw	255
  4897  001AD4  162E               	andwf	___ftadd@f1,f,c
  4898  001AD6  0EFF               	movlw	255
  4899  001AD8  162F               	andwf	___ftadd@f1+1,f,c
  4900  001ADA  0E00               	movlw	0
  4901  001ADC  1630               	andwf	___ftadd@f1+2,f,c
  4902  001ADE  8E32               	bsf	___ftadd@f2+1,7,c
  4903  001AE0  0EFF               	movlw	255
  4904  001AE2  1631               	andwf	___ftadd@f2,f,c
  4905  001AE4  0EFF               	movlw	255
  4906  001AE6  1632               	andwf	___ftadd@f2+1,f,c
  4907  001AE8  0E00               	movlw	0
  4908  001AEA  1633               	andwf	___ftadd@f2+2,f,c
  4909  001AEC  5038               	movf	___ftadd@exp2,w,c
  4910  001AEE  5C39               	subwf	___ftadd@exp1,w,c
  4911  001AF0  B0D8               	btfsc	status,0,c
  4912  001AF2  D01B               	goto	l503
  4913  001AF4                     u2320:
  4914  001AF4  90D8               	bcf	status,0,c
  4915  001AF6  3631               	rlcf	___ftadd@f2,f,c
  4916  001AF8  3632               	rlcf	___ftadd@f2+1,f,c
  4917  001AFA  3633               	rlcf	___ftadd@f2+2,f,c
  4918  001AFC  0638               	decf	___ftadd@exp2,f,c
  4919  001AFE  5039               	movf	___ftadd@exp1,w,c
  4920  001B00  1838               	xorwf	___ftadd@exp2,w,c
  4921  001B02  B4D8               	btfsc	status,2,c
  4922  001B04  D00D               	goto	l508
  4923  001B06  0637               	decf	___ftadd@sign,f,c
  4924  001B08  C037  F034         	movff	___ftadd@sign,??___ftadd
  4925  001B0C  0E07               	movlw	7
  4926  001B0E  1634               	andwf	??___ftadd,f,c
  4927  001B10  B4D8               	btfsc	status,2,c
  4928  001B12  D006               	goto	l508
  4929  001B14  D7EF               	goto	u2320
  4930  001B16  90D8               	bcf	status,0,c
  4931  001B18  3230               	rrcf	___ftadd@f1+2,f,c
  4932  001B1A  322F               	rrcf	___ftadd@f1+1,f,c
  4933  001B1C  322E               	rrcf	___ftadd@f1,f,c
  4934  001B1E  2A39               	incf	___ftadd@exp1,f,c
  4935  001B20                     l508:
  4936  001B20  5038               	movf	___ftadd@exp2,w,c
  4937  001B22  1839               	xorwf	___ftadd@exp1,w,c
  4938  001B24  B4D8               	btfsc	status,2,c
  4939  001B26  D01F               	goto	u2390
  4940  001B28  D7F6               	goto	l509
  4941  001B2A                     l503:
  4942  001B2A  5039               	movf	___ftadd@exp1,w,c
  4943  001B2C  5C38               	subwf	___ftadd@exp2,w,c
  4944  001B2E  B0D8               	btfsc	status,0,c
  4945  001B30  D01A               	goto	u2390
  4946  001B32                     u2360:
  4947  001B32  90D8               	bcf	status,0,c
  4948  001B34  362E               	rlcf	___ftadd@f1,f,c
  4949  001B36  362F               	rlcf	___ftadd@f1+1,f,c
  4950  001B38  3630               	rlcf	___ftadd@f1+2,f,c
  4951  001B3A  0639               	decf	___ftadd@exp1,f,c
  4952  001B3C  5039               	movf	___ftadd@exp1,w,c
  4953  001B3E  1838               	xorwf	___ftadd@exp2,w,c
  4954  001B40  B4D8               	btfsc	status,2,c
  4955  001B42  D00D               	goto	l517
  4956  001B44  0637               	decf	___ftadd@sign,f,c
  4957  001B46  C037  F034         	movff	___ftadd@sign,??___ftadd
  4958  001B4A  0E07               	movlw	7
  4959  001B4C  1634               	andwf	??___ftadd,f,c
  4960  001B4E  B4D8               	btfsc	status,2,c
  4961  001B50  D006               	goto	l517
  4962  001B52  D7EF               	goto	u2360
  4963  001B54  90D8               	bcf	status,0,c
  4964  001B56  3233               	rrcf	___ftadd@f2+2,f,c
  4965  001B58  3232               	rrcf	___ftadd@f2+1,f,c
  4966  001B5A  3231               	rrcf	___ftadd@f2,f,c
  4967  001B5C  2A38               	incf	___ftadd@exp2,f,c
  4968  001B5E                     l517:
  4969  001B5E  5038               	movf	___ftadd@exp2,w,c
  4970  001B60  1839               	xorwf	___ftadd@exp1,w,c
  4971  001B62  A4D8               	btfss	status,2,c
  4972  001B64  D7F7               	goto	l518
  4973  001B66                     u2390:
  4974  001B66  AE37               	btfss	___ftadd@sign,7,c
  4975  001B68  D00C               	goto	l520
  4976  001B6A  0EFF               	movlw	255
  4977  001B6C  1A2E               	xorwf	___ftadd@f1,f,c
  4978  001B6E  0EFF               	movlw	255
  4979  001B70  1A2F               	xorwf	___ftadd@f1+1,f,c
  4980  001B72  0EFF               	movlw	255
  4981  001B74  1A30               	xorwf	___ftadd@f1+2,f,c
  4982  001B76  0E01               	movlw	1
  4983  001B78  262E               	addwf	___ftadd@f1,f,c
  4984  001B7A  0E00               	movlw	0
  4985  001B7C  222F               	addwfc	___ftadd@f1+1,f,c
  4986  001B7E  0E00               	movlw	0
  4987  001B80  2230               	addwfc	___ftadd@f1+2,f,c
  4988  001B82                     l520:
  4989  001B82  AC37               	btfss	___ftadd@sign,6,c
  4990  001B84  D00C               	goto	l521
  4991  001B86  0EFF               	movlw	255
  4992  001B88  1A31               	xorwf	___ftadd@f2,f,c
  4993  001B8A  0EFF               	movlw	255
  4994  001B8C  1A32               	xorwf	___ftadd@f2+1,f,c
  4995  001B8E  0EFF               	movlw	255
  4996  001B90  1A33               	xorwf	___ftadd@f2+2,f,c
  4997  001B92  0E01               	movlw	1
  4998  001B94  2631               	addwf	___ftadd@f2,f,c
  4999  001B96  0E00               	movlw	0
  5000  001B98  2232               	addwfc	___ftadd@f2+1,f,c
  5001  001B9A  0E00               	movlw	0
  5002  001B9C  2233               	addwfc	___ftadd@f2+2,f,c
  5003  001B9E                     l521:
  5004  001B9E  0E00               	movlw	0
  5005  001BA0  6E37               	movwf	___ftadd@sign,c
  5006  001BA2  502E               	movf	___ftadd@f1,w,c
  5007  001BA4  2631               	addwf	___ftadd@f2,f,c
  5008  001BA6  502F               	movf	___ftadd@f1+1,w,c
  5009  001BA8  2232               	addwfc	___ftadd@f2+1,f,c
  5010  001BAA  5030               	movf	___ftadd@f1+2,w,c
  5011  001BAC  2233               	addwfc	___ftadd@f2+2,f,c
  5012  001BAE  AE33               	btfss	___ftadd@f2+2,7,c
  5013  001BB0  D00E               	goto	l522
  5014  001BB2  0EFF               	movlw	255
  5015  001BB4  1A31               	xorwf	___ftadd@f2,f,c
  5016  001BB6  0EFF               	movlw	255
  5017  001BB8  1A32               	xorwf	___ftadd@f2+1,f,c
  5018  001BBA  0EFF               	movlw	255
  5019  001BBC  1A33               	xorwf	___ftadd@f2+2,f,c
  5020  001BBE  0E01               	movlw	1
  5021  001BC0  2631               	addwf	___ftadd@f2,f,c
  5022  001BC2  0E00               	movlw	0
  5023  001BC4  2232               	addwfc	___ftadd@f2+1,f,c
  5024  001BC6  0E00               	movlw	0
  5025  001BC8  2233               	addwfc	___ftadd@f2+2,f,c
  5026  001BCA  0E01               	movlw	1
  5027  001BCC  6E37               	movwf	___ftadd@sign,c
  5028  001BCE                     l522:
  5029  001BCE  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5030  001BD2  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5031  001BD6  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5032  001BDA  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5033  001BDE  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5034  001BE2  EC03  F011         	call	___ftpack	;wreg free
  5035  001BE6  C001  F02E         	movff	?___ftpack,?___ftadd
  5036  001BEA  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5037  001BEE  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5038  001BF2  0012               	return	
  5039  001BF4                     __end_of___ftadd:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           prodh	equ	0xFF4
  5046                           prodl	equ	0xFF3
  5047                           wreg	equ	0xFE8
  5048                           postinc2	equ	0xFDE
  5049                           postdec2	equ	0xFDD
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function ___ftneg *****************
  5055 ;; Defined at:
  5056 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  f1              3    0[COMRAM] float 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;		None
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  3    0[COMRAM] float 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5070 ;;      Params:         3       0       0       0       0       0       0       0       0
  5071 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5073 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5074 ;;Total ram usage:        3 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_printf
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text19
  5084  0026E2                     __ptext19:
  5085                           	opt stack 0
  5086  0026E2                     ___ftneg:
  5087                           	opt stack 29
  5088                           
  5089                           ;incstack = 0
  5090  0026E2  5001               	movf	___ftneg@f1,w,c
  5091  0026E4  1002               	iorwf	___ftneg@f1+1,w,c
  5092  0026E6  1003               	iorwf	___ftneg@f1+2,w,c
  5093  0026E8  B4D8               	btfsc	status,2,c
  5094  0026EA  D006               	goto	l570
  5095  0026EC  0E00               	movlw	0
  5096  0026EE  1A01               	xorwf	___ftneg@f1,f,c
  5097  0026F0  0E00               	movlw	0
  5098  0026F2  1A02               	xorwf	___ftneg@f1+1,f,c
  5099  0026F4  0E80               	movlw	128
  5100  0026F6  1A03               	xorwf	___ftneg@f1+2,f,c
  5101  0026F8                     l570:
  5102  0026F8  C001  F001         	movff	___ftneg@f1,?___ftneg
  5103  0026FC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5104  002700  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5105  002704  0012               	return		;funcret
  5106  002706                     __end_of___ftneg:
  5107                           	opt stack 0
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           wreg	equ	0xFE8
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function ___ftge *****************
  5122 ;; Defined at:
  5123 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  ff1             3    0[COMRAM] float 
  5126 ;;  ff2             3    3[COMRAM] float 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;		None
  5129 ;; Return value:  Size  Location     Type
  5130 ;;		None               void
  5131 ;; Registers used:
  5132 ;;		wreg, status,2, status,0
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5138 ;;      Params:         6       0       0       0       0       0       0       0       0
  5139 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5140 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5141 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5142 ;;Total ram usage:        9 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_printf
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text20
  5152  0022B4                     __ptext20:
  5153                           	opt stack 0
  5154  0022B4                     ___ftge:
  5155                           	opt stack 29
  5156                           
  5157                           ;incstack = 0
  5158  0022B4  AE03               	btfss	___ftge@ff1+2,7,c
  5159  0022B6  D016               	goto	l552
  5160  0022B8  C001  F007         	movff	___ftge@ff1,??___ftge
  5161  0022BC  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5162  0022C0  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5163  0022C4  1E07               	comf	??___ftge,f,c
  5164  0022C6  1E08               	comf	??___ftge+1,f,c
  5165  0022C8  1E09               	comf	??___ftge+2,f,c
  5166  0022CA  2A07               	incf	??___ftge,f,c
  5167  0022CC  0E00               	movlw	0
  5168  0022CE  2208               	addwfc	??___ftge+1,f,c
  5169  0022D0  2209               	addwfc	??___ftge+2,f,c
  5170  0022D2  0E00               	movlw	0
  5171  0022D4  2407               	addwf	??___ftge,w,c
  5172  0022D6  6E01               	movwf	___ftge@ff1,c
  5173  0022D8  0E00               	movlw	0
  5174  0022DA  2008               	addwfc	??___ftge+1,w,c
  5175  0022DC  6E02               	movwf	___ftge@ff1+1,c
  5176  0022DE  0E80               	movlw	128
  5177  0022E0  2009               	addwfc	??___ftge+2,w,c
  5178  0022E2  6E03               	movwf	___ftge@ff1+2,c
  5179  0022E4                     l552:
  5180  0022E4  AE06               	btfss	___ftge@ff2+2,7,c
  5181  0022E6  D016               	goto	l553
  5182  0022E8  C004  F007         	movff	___ftge@ff2,??___ftge
  5183  0022EC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5184  0022F0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5185  0022F4  1E07               	comf	??___ftge,f,c
  5186  0022F6  1E08               	comf	??___ftge+1,f,c
  5187  0022F8  1E09               	comf	??___ftge+2,f,c
  5188  0022FA  2A07               	incf	??___ftge,f,c
  5189  0022FC  0E00               	movlw	0
  5190  0022FE  2208               	addwfc	??___ftge+1,f,c
  5191  002300  2209               	addwfc	??___ftge+2,f,c
  5192  002302  0E00               	movlw	0
  5193  002304  2407               	addwf	??___ftge,w,c
  5194  002306  6E04               	movwf	___ftge@ff2,c
  5195  002308  0E00               	movlw	0
  5196  00230A  2008               	addwfc	??___ftge+1,w,c
  5197  00230C  6E05               	movwf	___ftge@ff2+1,c
  5198  00230E  0E80               	movlw	128
  5199  002310  2009               	addwfc	??___ftge+2,w,c
  5200  002312  6E06               	movwf	___ftge@ff2+2,c
  5201  002314                     l553:
  5202  002314  0E00               	movlw	0
  5203  002316  1A01               	xorwf	___ftge@ff1,f,c
  5204  002318  0E00               	movlw	0
  5205  00231A  1A02               	xorwf	___ftge@ff1+1,f,c
  5206  00231C  0E80               	movlw	128
  5207  00231E  1A03               	xorwf	___ftge@ff1+2,f,c
  5208  002320  0E00               	movlw	0
  5209  002322  1A04               	xorwf	___ftge@ff2,f,c
  5210  002324  0E00               	movlw	0
  5211  002326  1A05               	xorwf	___ftge@ff2+1,f,c
  5212  002328  0E80               	movlw	128
  5213  00232A  1A06               	xorwf	___ftge@ff2+2,f,c
  5214  00232C  5004               	movf	___ftge@ff2,w,c
  5215  00232E  5C01               	subwf	___ftge@ff1,w,c
  5216  002330  5005               	movf	___ftge@ff2+1,w,c
  5217  002332  5802               	subwfb	___ftge@ff1+1,w,c
  5218  002334  5006               	movf	___ftge@ff2+2,w,c
  5219  002336  5803               	subwfb	___ftge@ff1+2,w,c
  5220  002338  B0D8               	btfsc	status,0,c
  5221  00233A  D002               	goto	l2020
  5222  00233C  90D8               	bcf	status,0,c
  5223  00233E  0012               	return	
  5224  002340                     l2020:
  5225  002340  80D8               	bsf	status,0,c
  5226  002342  0012               	return	
  5227  002344                     __end_of___ftge:
  5228                           	opt stack 0
  5229                           tblptru	equ	0xFF8
  5230                           tblptrh	equ	0xFF7
  5231                           tblptrl	equ	0xFF6
  5232                           tablat	equ	0xFF5
  5233                           prodh	equ	0xFF4
  5234                           prodl	equ	0xFF3
  5235                           wreg	equ	0xFE8
  5236                           postinc2	equ	0xFDE
  5237                           postdec2	equ	0xFDD
  5238                           fsr2h	equ	0xFDA
  5239                           fsr2l	equ	0xFD9
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function _posicionar_cursor *****************
  5243 ;; Defined at:
  5244 ;;		line 78 in file "newmain.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  linha           2    3[COMRAM] int 
  5247 ;;  coluna          2    5[COMRAM] int 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      void 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5259 ;;      Params:         4       0       0       0       0       0       0       0       0
  5260 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5262 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5263 ;;Total ram usage:        4 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    2
  5266 ;; This function calls:
  5267 ;;		_enviar_comando_lcd
  5268 ;; This function is called by:
  5269 ;;		_main
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text21
  5274  0014D8                     __ptext21:
  5275                           	opt stack 0
  5276  0014D8                     _posicionar_cursor:
  5277                           	opt stack 28
  5278                           
  5279                           ;newmain.c: 81: if ((linha == 1) && (coluna == 1)) enviar_comando_lcd(0b10000000);
  5280                           
  5281                           ;incstack = 0
  5282  0014D8  0404               	decf	posicionar_cursor@linha,w,c
  5283  0014DA  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5284  0014DC  A4D8               	btfss	status,2,c
  5285  0014DE  D007               	goto	l66
  5286  0014E0  0406               	decf	posicionar_cursor@coluna,w,c
  5287  0014E2  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5288  0014E4  A4D8               	btfss	status,2,c
  5289  0014E6  D003               	goto	l66
  5290  0014E8  0E80               	movlw	128
  5291  0014EA  EC4B  F013         	call	_enviar_comando_lcd
  5292  0014EE                     l66:
  5293                           
  5294                           ;newmain.c: 82: if ((linha == 1) && (coluna == 2)) enviar_comando_lcd(0b10000001);
  5295  0014EE  0404               	decf	posicionar_cursor@linha,w,c
  5296  0014F0  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5297  0014F2  A4D8               	btfss	status,2,c
  5298  0014F4  D008               	goto	l67
  5299  0014F6  0E02               	movlw	2
  5300  0014F8  1806               	xorwf	posicionar_cursor@coluna,w,c
  5301  0014FA  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5302  0014FC  A4D8               	btfss	status,2,c
  5303  0014FE  D003               	goto	l67
  5304  001500  0E81               	movlw	129
  5305  001502  EC4B  F013         	call	_enviar_comando_lcd
  5306  001506                     l67:
  5307                           
  5308                           ;newmain.c: 83: if ((linha == 1) && (coluna == 3)) enviar_comando_lcd(0b10000010);
  5309  001506  0404               	decf	posicionar_cursor@linha,w,c
  5310  001508  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5311  00150A  A4D8               	btfss	status,2,c
  5312  00150C  D008               	goto	l68
  5313  00150E  0E03               	movlw	3
  5314  001510  1806               	xorwf	posicionar_cursor@coluna,w,c
  5315  001512  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5316  001514  A4D8               	btfss	status,2,c
  5317  001516  D003               	goto	l68
  5318  001518  0E82               	movlw	130
  5319  00151A  EC4B  F013         	call	_enviar_comando_lcd
  5320  00151E                     l68:
  5321                           
  5322                           ;newmain.c: 84: if ((linha == 1) && (coluna == 4)) enviar_comando_lcd(0b10000011);
  5323  00151E  0404               	decf	posicionar_cursor@linha,w,c
  5324  001520  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5325  001522  A4D8               	btfss	status,2,c
  5326  001524  D008               	goto	l69
  5327  001526  0E04               	movlw	4
  5328  001528  1806               	xorwf	posicionar_cursor@coluna,w,c
  5329  00152A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5330  00152C  A4D8               	btfss	status,2,c
  5331  00152E  D003               	goto	l69
  5332  001530  0E83               	movlw	131
  5333  001532  EC4B  F013         	call	_enviar_comando_lcd
  5334  001536                     l69:
  5335                           
  5336                           ;newmain.c: 85: if ((linha == 1) && (coluna == 5)) enviar_comando_lcd(0b10000100);
  5337  001536  0404               	decf	posicionar_cursor@linha,w,c
  5338  001538  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5339  00153A  A4D8               	btfss	status,2,c
  5340  00153C  D008               	goto	l70
  5341  00153E  0E05               	movlw	5
  5342  001540  1806               	xorwf	posicionar_cursor@coluna,w,c
  5343  001542  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5344  001544  A4D8               	btfss	status,2,c
  5345  001546  D003               	goto	l70
  5346  001548  0E84               	movlw	132
  5347  00154A  EC4B  F013         	call	_enviar_comando_lcd
  5348  00154E                     l70:
  5349                           
  5350                           ;newmain.c: 86: if ((linha == 1) && (coluna == 6)) enviar_comando_lcd(0b10000101);
  5351  00154E  0404               	decf	posicionar_cursor@linha,w,c
  5352  001550  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5353  001552  A4D8               	btfss	status,2,c
  5354  001554  D008               	goto	l71
  5355  001556  0E06               	movlw	6
  5356  001558  1806               	xorwf	posicionar_cursor@coluna,w,c
  5357  00155A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5358  00155C  A4D8               	btfss	status,2,c
  5359  00155E  D003               	goto	l71
  5360  001560  0E85               	movlw	133
  5361  001562  EC4B  F013         	call	_enviar_comando_lcd
  5362  001566                     l71:
  5363                           
  5364                           ;newmain.c: 87: if ((linha == 1) && (coluna == 7)) enviar_comando_lcd(0b10000110);
  5365  001566  0404               	decf	posicionar_cursor@linha,w,c
  5366  001568  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5367  00156A  A4D8               	btfss	status,2,c
  5368  00156C  D008               	goto	l72
  5369  00156E  0E07               	movlw	7
  5370  001570  1806               	xorwf	posicionar_cursor@coluna,w,c
  5371  001572  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5372  001574  A4D8               	btfss	status,2,c
  5373  001576  D003               	goto	l72
  5374  001578  0E86               	movlw	134
  5375  00157A  EC4B  F013         	call	_enviar_comando_lcd
  5376  00157E                     l72:
  5377                           
  5378                           ;newmain.c: 88: if ((linha == 1) && (coluna == 8)) enviar_comando_lcd(0b10000111);
  5379  00157E  0404               	decf	posicionar_cursor@linha,w,c
  5380  001580  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5381  001582  A4D8               	btfss	status,2,c
  5382  001584  D008               	goto	l73
  5383  001586  0E08               	movlw	8
  5384  001588  1806               	xorwf	posicionar_cursor@coluna,w,c
  5385  00158A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5386  00158C  A4D8               	btfss	status,2,c
  5387  00158E  D003               	goto	l73
  5388  001590  0E87               	movlw	135
  5389  001592  EC4B  F013         	call	_enviar_comando_lcd
  5390  001596                     l73:
  5391                           
  5392                           ;newmain.c: 89: if ((linha == 1) && (coluna == 9)) enviar_comando_lcd(0b10001000);
  5393  001596  0404               	decf	posicionar_cursor@linha,w,c
  5394  001598  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5395  00159A  A4D8               	btfss	status,2,c
  5396  00159C  D008               	goto	l74
  5397  00159E  0E09               	movlw	9
  5398  0015A0  1806               	xorwf	posicionar_cursor@coluna,w,c
  5399  0015A2  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5400  0015A4  A4D8               	btfss	status,2,c
  5401  0015A6  D003               	goto	l74
  5402  0015A8  0E88               	movlw	136
  5403  0015AA  EC4B  F013         	call	_enviar_comando_lcd
  5404  0015AE                     l74:
  5405                           
  5406                           ;newmain.c: 90: if ((linha == 1) && (coluna == 10)) enviar_comando_lcd(0b10001001);
  5407  0015AE  0404               	decf	posicionar_cursor@linha,w,c
  5408  0015B0  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5409  0015B2  A4D8               	btfss	status,2,c
  5410  0015B4  D008               	goto	l75
  5411  0015B6  0E0A               	movlw	10
  5412  0015B8  1806               	xorwf	posicionar_cursor@coluna,w,c
  5413  0015BA  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5414  0015BC  A4D8               	btfss	status,2,c
  5415  0015BE  D003               	goto	l75
  5416  0015C0  0E89               	movlw	137
  5417  0015C2  EC4B  F013         	call	_enviar_comando_lcd
  5418  0015C6                     l75:
  5419                           
  5420                           ;newmain.c: 91: if ((linha == 1) && (coluna == 11)) enviar_comando_lcd(0b10001010);
  5421  0015C6  0404               	decf	posicionar_cursor@linha,w,c
  5422  0015C8  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5423  0015CA  A4D8               	btfss	status,2,c
  5424  0015CC  D008               	goto	l76
  5425  0015CE  0E0B               	movlw	11
  5426  0015D0  1806               	xorwf	posicionar_cursor@coluna,w,c
  5427  0015D2  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5428  0015D4  A4D8               	btfss	status,2,c
  5429  0015D6  D003               	goto	l76
  5430  0015D8  0E8A               	movlw	138
  5431  0015DA  EC4B  F013         	call	_enviar_comando_lcd
  5432  0015DE                     l76:
  5433                           
  5434                           ;newmain.c: 92: if ((linha == 1) && (coluna == 12)) enviar_comando_lcd(0b10001011);
  5435  0015DE  0404               	decf	posicionar_cursor@linha,w,c
  5436  0015E0  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5437  0015E2  A4D8               	btfss	status,2,c
  5438  0015E4  D008               	goto	l77
  5439  0015E6  0E0C               	movlw	12
  5440  0015E8  1806               	xorwf	posicionar_cursor@coluna,w,c
  5441  0015EA  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5442  0015EC  A4D8               	btfss	status,2,c
  5443  0015EE  D003               	goto	l77
  5444  0015F0  0E8B               	movlw	139
  5445  0015F2  EC4B  F013         	call	_enviar_comando_lcd
  5446  0015F6                     l77:
  5447                           
  5448                           ;newmain.c: 93: if ((linha == 1) && (coluna == 13)) enviar_comando_lcd(0b10001100);
  5449  0015F6  0404               	decf	posicionar_cursor@linha,w,c
  5450  0015F8  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5451  0015FA  A4D8               	btfss	status,2,c
  5452  0015FC  D008               	goto	l78
  5453  0015FE  0E0D               	movlw	13
  5454  001600  1806               	xorwf	posicionar_cursor@coluna,w,c
  5455  001602  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5456  001604  A4D8               	btfss	status,2,c
  5457  001606  D003               	goto	l78
  5458  001608  0E8C               	movlw	140
  5459  00160A  EC4B  F013         	call	_enviar_comando_lcd
  5460  00160E                     l78:
  5461                           
  5462                           ;newmain.c: 94: if ((linha == 1) && (coluna == 14)) enviar_comando_lcd(0b10001101);
  5463  00160E  0404               	decf	posicionar_cursor@linha,w,c
  5464  001610  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5465  001612  A4D8               	btfss	status,2,c
  5466  001614  D008               	goto	l79
  5467  001616  0E0E               	movlw	14
  5468  001618  1806               	xorwf	posicionar_cursor@coluna,w,c
  5469  00161A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5470  00161C  A4D8               	btfss	status,2,c
  5471  00161E  D003               	goto	l79
  5472  001620  0E8D               	movlw	141
  5473  001622  EC4B  F013         	call	_enviar_comando_lcd
  5474  001626                     l79:
  5475                           
  5476                           ;newmain.c: 95: if ((linha == 1) && (coluna == 15)) enviar_comando_lcd(0b10001110);
  5477  001626  0404               	decf	posicionar_cursor@linha,w,c
  5478  001628  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5479  00162A  A4D8               	btfss	status,2,c
  5480  00162C  D008               	goto	l80
  5481  00162E  0E0F               	movlw	15
  5482  001630  1806               	xorwf	posicionar_cursor@coluna,w,c
  5483  001632  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5484  001634  A4D8               	btfss	status,2,c
  5485  001636  D003               	goto	l80
  5486  001638  0E8E               	movlw	142
  5487  00163A  EC4B  F013         	call	_enviar_comando_lcd
  5488  00163E                     l80:
  5489                           
  5490                           ;newmain.c: 96: if ((linha == 1) && (coluna == 16)) enviar_comando_lcd(0b10001111);
  5491  00163E  0404               	decf	posicionar_cursor@linha,w,c
  5492  001640  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5493  001642  A4D8               	btfss	status,2,c
  5494  001644  D008               	goto	l81
  5495  001646  0E10               	movlw	16
  5496  001648  1806               	xorwf	posicionar_cursor@coluna,w,c
  5497  00164A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5498  00164C  A4D8               	btfss	status,2,c
  5499  00164E  D003               	goto	l81
  5500  001650  0E8F               	movlw	143
  5501  001652  EC4B  F013         	call	_enviar_comando_lcd
  5502  001656                     l81:
  5503                           
  5504                           ;newmain.c: 98: if ((linha == 2) && (coluna == 1)) enviar_comando_lcd(0b11000000);
  5505  001656  0E02               	movlw	2
  5506  001658  1804               	xorwf	posicionar_cursor@linha,w,c
  5507  00165A  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5508  00165C  A4D8               	btfss	status,2,c
  5509  00165E  D007               	goto	l82
  5510  001660  0406               	decf	posicionar_cursor@coluna,w,c
  5511  001662  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5512  001664  A4D8               	btfss	status,2,c
  5513  001666  D003               	goto	l82
  5514  001668  0EC0               	movlw	192
  5515  00166A  EC4B  F013         	call	_enviar_comando_lcd
  5516  00166E                     l82:
  5517                           
  5518                           ;newmain.c: 99: if ((linha == 2) && (coluna == 2)) enviar_comando_lcd(0b11000001);
  5519  00166E  0E02               	movlw	2
  5520  001670  1804               	xorwf	posicionar_cursor@linha,w,c
  5521  001672  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5522  001674  A4D8               	btfss	status,2,c
  5523  001676  D008               	goto	l83
  5524  001678  0E02               	movlw	2
  5525  00167A  1806               	xorwf	posicionar_cursor@coluna,w,c
  5526  00167C  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5527  00167E  A4D8               	btfss	status,2,c
  5528  001680  D003               	goto	l83
  5529  001682  0EC1               	movlw	193
  5530  001684  EC4B  F013         	call	_enviar_comando_lcd
  5531  001688                     l83:
  5532                           
  5533                           ;newmain.c: 100: if ((linha == 2) && (coluna == 3)) enviar_comando_lcd(0b11000010);
  5534  001688  0E02               	movlw	2
  5535  00168A  1804               	xorwf	posicionar_cursor@linha,w,c
  5536  00168C  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5537  00168E  A4D8               	btfss	status,2,c
  5538  001690  D008               	goto	l84
  5539  001692  0E03               	movlw	3
  5540  001694  1806               	xorwf	posicionar_cursor@coluna,w,c
  5541  001696  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5542  001698  A4D8               	btfss	status,2,c
  5543  00169A  D003               	goto	l84
  5544  00169C  0EC2               	movlw	194
  5545  00169E  EC4B  F013         	call	_enviar_comando_lcd
  5546  0016A2                     l84:
  5547                           
  5548                           ;newmain.c: 101: if ((linha == 2) && (coluna == 4)) enviar_comando_lcd(0b11000011);
  5549  0016A2  0E02               	movlw	2
  5550  0016A4  1804               	xorwf	posicionar_cursor@linha,w,c
  5551  0016A6  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5552  0016A8  A4D8               	btfss	status,2,c
  5553  0016AA  D008               	goto	l85
  5554  0016AC  0E04               	movlw	4
  5555  0016AE  1806               	xorwf	posicionar_cursor@coluna,w,c
  5556  0016B0  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5557  0016B2  A4D8               	btfss	status,2,c
  5558  0016B4  D003               	goto	l85
  5559  0016B6  0EC3               	movlw	195
  5560  0016B8  EC4B  F013         	call	_enviar_comando_lcd
  5561  0016BC                     l85:
  5562                           
  5563                           ;newmain.c: 102: if ((linha == 2) && (coluna == 5)) enviar_comando_lcd(0b11000100);
  5564  0016BC  0E02               	movlw	2
  5565  0016BE  1804               	xorwf	posicionar_cursor@linha,w,c
  5566  0016C0  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5567  0016C2  A4D8               	btfss	status,2,c
  5568  0016C4  D008               	goto	l86
  5569  0016C6  0E05               	movlw	5
  5570  0016C8  1806               	xorwf	posicionar_cursor@coluna,w,c
  5571  0016CA  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5572  0016CC  A4D8               	btfss	status,2,c
  5573  0016CE  D003               	goto	l86
  5574  0016D0  0EC4               	movlw	196
  5575  0016D2  EC4B  F013         	call	_enviar_comando_lcd
  5576  0016D6                     l86:
  5577                           
  5578                           ;newmain.c: 103: if ((linha == 2) && (coluna == 6)) enviar_comando_lcd(0b11000101);
  5579  0016D6  0E02               	movlw	2
  5580  0016D8  1804               	xorwf	posicionar_cursor@linha,w,c
  5581  0016DA  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5582  0016DC  A4D8               	btfss	status,2,c
  5583  0016DE  D008               	goto	l87
  5584  0016E0  0E06               	movlw	6
  5585  0016E2  1806               	xorwf	posicionar_cursor@coluna,w,c
  5586  0016E4  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5587  0016E6  A4D8               	btfss	status,2,c
  5588  0016E8  D003               	goto	l87
  5589  0016EA  0EC5               	movlw	197
  5590  0016EC  EC4B  F013         	call	_enviar_comando_lcd
  5591  0016F0                     l87:
  5592                           
  5593                           ;newmain.c: 104: if ((linha == 2) && (coluna == 7)) enviar_comando_lcd(0b11000110);
  5594  0016F0  0E02               	movlw	2
  5595  0016F2  1804               	xorwf	posicionar_cursor@linha,w,c
  5596  0016F4  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5597  0016F6  A4D8               	btfss	status,2,c
  5598  0016F8  D008               	goto	l88
  5599  0016FA  0E07               	movlw	7
  5600  0016FC  1806               	xorwf	posicionar_cursor@coluna,w,c
  5601  0016FE  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5602  001700  A4D8               	btfss	status,2,c
  5603  001702  D003               	goto	l88
  5604  001704  0EC6               	movlw	198
  5605  001706  EC4B  F013         	call	_enviar_comando_lcd
  5606  00170A                     l88:
  5607                           
  5608                           ;newmain.c: 105: if ((linha == 2) && (coluna == 8)) enviar_comando_lcd(0b11000111);
  5609  00170A  0E02               	movlw	2
  5610  00170C  1804               	xorwf	posicionar_cursor@linha,w,c
  5611  00170E  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5612  001710  A4D8               	btfss	status,2,c
  5613  001712  D008               	goto	l89
  5614  001714  0E08               	movlw	8
  5615  001716  1806               	xorwf	posicionar_cursor@coluna,w,c
  5616  001718  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5617  00171A  A4D8               	btfss	status,2,c
  5618  00171C  D003               	goto	l89
  5619  00171E  0EC7               	movlw	199
  5620  001720  EC4B  F013         	call	_enviar_comando_lcd
  5621  001724                     l89:
  5622                           
  5623                           ;newmain.c: 106: if ((linha == 2) && (coluna == 9)) enviar_comando_lcd(0b11001000);
  5624  001724  0E02               	movlw	2
  5625  001726  1804               	xorwf	posicionar_cursor@linha,w,c
  5626  001728  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5627  00172A  A4D8               	btfss	status,2,c
  5628  00172C  D008               	goto	l90
  5629  00172E  0E09               	movlw	9
  5630  001730  1806               	xorwf	posicionar_cursor@coluna,w,c
  5631  001732  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5632  001734  A4D8               	btfss	status,2,c
  5633  001736  D003               	goto	l90
  5634  001738  0EC8               	movlw	200
  5635  00173A  EC4B  F013         	call	_enviar_comando_lcd
  5636  00173E                     l90:
  5637                           
  5638                           ;newmain.c: 107: if ((linha == 2) && (coluna == 10)) enviar_comando_lcd(0b11001001);
  5639  00173E  0E02               	movlw	2
  5640  001740  1804               	xorwf	posicionar_cursor@linha,w,c
  5641  001742  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5642  001744  A4D8               	btfss	status,2,c
  5643  001746  D008               	goto	l91
  5644  001748  0E0A               	movlw	10
  5645  00174A  1806               	xorwf	posicionar_cursor@coluna,w,c
  5646  00174C  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5647  00174E  A4D8               	btfss	status,2,c
  5648  001750  D003               	goto	l91
  5649  001752  0EC9               	movlw	201
  5650  001754  EC4B  F013         	call	_enviar_comando_lcd
  5651  001758                     l91:
  5652                           
  5653                           ;newmain.c: 108: if ((linha == 2) && (coluna == 11)) enviar_comando_lcd(0b11001010);
  5654  001758  0E02               	movlw	2
  5655  00175A  1804               	xorwf	posicionar_cursor@linha,w,c
  5656  00175C  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5657  00175E  A4D8               	btfss	status,2,c
  5658  001760  D008               	goto	l92
  5659  001762  0E0B               	movlw	11
  5660  001764  1806               	xorwf	posicionar_cursor@coluna,w,c
  5661  001766  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5662  001768  A4D8               	btfss	status,2,c
  5663  00176A  D003               	goto	l92
  5664  00176C  0ECA               	movlw	202
  5665  00176E  EC4B  F013         	call	_enviar_comando_lcd
  5666  001772                     l92:
  5667                           
  5668                           ;newmain.c: 109: if ((linha == 2) && (coluna == 12)) enviar_comando_lcd(0b11001011);
  5669  001772  0E02               	movlw	2
  5670  001774  1804               	xorwf	posicionar_cursor@linha,w,c
  5671  001776  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5672  001778  A4D8               	btfss	status,2,c
  5673  00177A  D008               	goto	l93
  5674  00177C  0E0C               	movlw	12
  5675  00177E  1806               	xorwf	posicionar_cursor@coluna,w,c
  5676  001780  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5677  001782  A4D8               	btfss	status,2,c
  5678  001784  D003               	goto	l93
  5679  001786  0ECB               	movlw	203
  5680  001788  EC4B  F013         	call	_enviar_comando_lcd
  5681  00178C                     l93:
  5682                           
  5683                           ;newmain.c: 110: if ((linha == 2) && (coluna == 13)) enviar_comando_lcd(0b11001100);
  5684  00178C  0E02               	movlw	2
  5685  00178E  1804               	xorwf	posicionar_cursor@linha,w,c
  5686  001790  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5687  001792  A4D8               	btfss	status,2,c
  5688  001794  D008               	goto	l94
  5689  001796  0E0D               	movlw	13
  5690  001798  1806               	xorwf	posicionar_cursor@coluna,w,c
  5691  00179A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5692  00179C  A4D8               	btfss	status,2,c
  5693  00179E  D003               	goto	l94
  5694  0017A0  0ECC               	movlw	204
  5695  0017A2  EC4B  F013         	call	_enviar_comando_lcd
  5696  0017A6                     l94:
  5697                           
  5698                           ;newmain.c: 111: if ((linha == 2) && (coluna == 14)) enviar_comando_lcd(0b11001101);
  5699  0017A6  0E02               	movlw	2
  5700  0017A8  1804               	xorwf	posicionar_cursor@linha,w,c
  5701  0017AA  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5702  0017AC  A4D8               	btfss	status,2,c
  5703  0017AE  D008               	goto	l95
  5704  0017B0  0E0E               	movlw	14
  5705  0017B2  1806               	xorwf	posicionar_cursor@coluna,w,c
  5706  0017B4  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5707  0017B6  A4D8               	btfss	status,2,c
  5708  0017B8  D003               	goto	l95
  5709  0017BA  0ECD               	movlw	205
  5710  0017BC  EC4B  F013         	call	_enviar_comando_lcd
  5711  0017C0                     l95:
  5712                           
  5713                           ;newmain.c: 112: if ((linha == 2) && (coluna == 15)) enviar_comando_lcd(0b11001110);
  5714  0017C0  0E02               	movlw	2
  5715  0017C2  1804               	xorwf	posicionar_cursor@linha,w,c
  5716  0017C4  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5717  0017C6  A4D8               	btfss	status,2,c
  5718  0017C8  D008               	goto	l96
  5719  0017CA  0E0F               	movlw	15
  5720  0017CC  1806               	xorwf	posicionar_cursor@coluna,w,c
  5721  0017CE  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5722  0017D0  A4D8               	btfss	status,2,c
  5723  0017D2  D003               	goto	l96
  5724  0017D4  0ECE               	movlw	206
  5725  0017D6  EC4B  F013         	call	_enviar_comando_lcd
  5726  0017DA                     l96:
  5727                           
  5728                           ;newmain.c: 113: if ((linha == 2) && (coluna == 16)) enviar_comando_lcd(0b11001111);
  5729  0017DA  0E02               	movlw	2
  5730  0017DC  1804               	xorwf	posicionar_cursor@linha,w,c
  5731  0017DE  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5732  0017E0  A4D8               	btfss	status,2,c
  5733  0017E2  0012               	return	
  5734  0017E4  0E10               	movlw	16
  5735  0017E6  1806               	xorwf	posicionar_cursor@coluna,w,c
  5736  0017E8  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5737  0017EA  A4D8               	btfss	status,2,c
  5738  0017EC  0012               	return	
  5739  0017EE  0ECF               	movlw	207
  5740  0017F0  EC4B  F013         	call	_enviar_comando_lcd
  5741  0017F4  0012               	return	
  5742  0017F6                     __end_of_posicionar_cursor:
  5743                           	opt stack 0
  5744                           tblptru	equ	0xFF8
  5745                           tblptrh	equ	0xFF7
  5746                           tblptrl	equ	0xFF6
  5747                           tablat	equ	0xFF5
  5748                           prodh	equ	0xFF4
  5749                           prodl	equ	0xFF3
  5750                           wreg	equ	0xFE8
  5751                           postinc2	equ	0xFDE
  5752                           postdec2	equ	0xFDD
  5753                           fsr2h	equ	0xFDA
  5754                           fsr2l	equ	0xFD9
  5755                           status	equ	0xFD8
  5756                           
  5757 ;; *************** function _inicializa_pinos *****************
  5758 ;; Defined at:
  5759 ;;		line 134 in file "newmain.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;		None
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5773 ;;      Params:         0       0       0       0       0       0       0       0       0
  5774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5776 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5777 ;;Total ram usage:        0 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; This function calls:
  5780 ;;		Nothing
  5781 ;; This function is called by:
  5782 ;;		_main
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text22
  5787  002724                     __ptext22:
  5788                           	opt stack 0
  5789  002724                     _inicializa_pinos:
  5790                           	opt stack 30
  5791                           
  5792                           ;newmain.c: 136: TRISC = 0b01110000;
  5793                           
  5794                           ;incstack = 0
  5795  002724  0E70               	movlw	112
  5796  002726  6E94               	movwf	3988,c	;volatile
  5797                           
  5798                           ;newmain.c: 137: TRISD = 0;
  5799  002728  0E00               	movlw	0
  5800  00272A  6E95               	movwf	3989,c	;volatile
  5801                           
  5802                           ;newmain.c: 138: PORTC = 0;
  5803  00272C  0E00               	movlw	0
  5804  00272E  6E82               	movwf	3970,c	;volatile
  5805                           
  5806                           ;newmain.c: 139: PORTD = 0;
  5807  002730  0E00               	movlw	0
  5808  002732  6E83               	movwf	3971,c	;volatile
  5809  002734  0012               	return		;funcret
  5810  002736                     __end_of_inicializa_pinos:
  5811                           	opt stack 0
  5812                           tblptru	equ	0xFF8
  5813                           tblptrh	equ	0xFF7
  5814                           tblptrl	equ	0xFF6
  5815                           tablat	equ	0xFF5
  5816                           prodh	equ	0xFF4
  5817                           prodl	equ	0xFF3
  5818                           wreg	equ	0xFE8
  5819                           postinc2	equ	0xFDE
  5820                           postdec2	equ	0xFDD
  5821                           fsr2h	equ	0xFDA
  5822                           fsr2l	equ	0xFD9
  5823                           status	equ	0xFD8
  5824                           
  5825 ;; *************** function _inicializa_lcd *****************
  5826 ;; Defined at:
  5827 ;;		line 57 in file "newmain.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;		None
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;		None
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  1    wreg      void 
  5834 ;; Registers used:
  5835 ;;		wreg, status,2, status,0, cstack
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5841 ;;      Params:         0       0       0       0       0       0       0       0       0
  5842 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5843 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5844 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5845 ;;Total ram usage:        0 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    2
  5848 ;; This function calls:
  5849 ;;		_delay_ms
  5850 ;;		_enviar_comando_lcd
  5851 ;; This function is called by:
  5852 ;;		_main
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text23
  5857  002670                     __ptext23:
  5858                           	opt stack 0
  5859  002670                     _inicializa_lcd:
  5860                           	opt stack 28
  5861                           
  5862                           ;newmain.c: 70: enviar_comando_lcd(0b00111000);
  5863                           
  5864                           ;incstack = 0
  5865  002670  0E38               	movlw	56
  5866  002672  EC4B  F013         	call	_enviar_comando_lcd
  5867                           
  5868                           ;newmain.c: 71: enviar_comando_lcd(0b00001100);
  5869  002676  0E0C               	movlw	12
  5870  002678  EC4B  F013         	call	_enviar_comando_lcd
  5871                           
  5872                           ;newmain.c: 72: enviar_comando_lcd(0b00000110);
  5873  00267C  0E06               	movlw	6
  5874  00267E  EC4B  F013         	call	_enviar_comando_lcd
  5875                           
  5876                           ;newmain.c: 73: enviar_comando_lcd(0b00000001);
  5877  002682  0E01               	movlw	1
  5878  002684  EC4B  F013         	call	_enviar_comando_lcd
  5879                           
  5880                           ;newmain.c: 74: delay_ms(5);
  5881  002688  0E00               	movlw	0
  5882  00268A  6E02               	movwf	delay_ms@tempo+1,c
  5883  00268C  0E05               	movlw	5
  5884  00268E  6E01               	movwf	delay_ms@tempo,c
  5885  002690  ECFA  F012         	call	_delay_ms	;wreg free
  5886  002694  0012               	return		;funcret
  5887  002696                     __end_of_inicializa_lcd:
  5888                           	opt stack 0
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           wreg	equ	0xFE8
  5896                           postinc2	equ	0xFDE
  5897                           postdec2	equ	0xFDD
  5898                           fsr2h	equ	0xFDA
  5899                           fsr2l	equ	0xFD9
  5900                           status	equ	0xFD8
  5901                           
  5902 ;; *************** function _enviar_comando_lcd *****************
  5903 ;; Defined at:
  5904 ;;		line 32 in file "newmain.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  valor           1    wreg     unsigned char 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  valor           1    2[COMRAM] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0
  5919 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5921 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5922 ;;Total ram usage:        1 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    1
  5925 ;; This function calls:
  5926 ;;		_delay_ms
  5927 ;; This function is called by:
  5928 ;;		_inicializa_lcd
  5929 ;;		_posicionar_cursor
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text24
  5934  002696                     __ptext24:
  5935                           	opt stack 0
  5936  002696                     _enviar_comando_lcd:
  5937                           	opt stack 28
  5938                           
  5939                           ;incstack = 0
  5940                           ;enviar_comando_lcd@valor stored from wreg
  5941  002696  6E03               	movwf	enviar_comando_lcd@valor,c
  5942                           
  5943                           ;newmain.c: 34: PORTD = valor;
  5944  002698  C003  FF83         	movff	enviar_comando_lcd@valor,3971	;volatile
  5945                           
  5946                           ;newmain.c: 35: PORTCbits.RC0 = 0;
  5947  00269C  9082               	bcf	3970,0,c	;volatile
  5948                           
  5949                           ;newmain.c: 36: PORTCbits.RC1 = 1;
  5950  00269E  8282               	bsf	3970,1,c	;volatile
  5951                           
  5952                           ;newmain.c: 37: delay_ms(1);
  5953  0026A0  0E00               	movlw	0
  5954  0026A2  6E02               	movwf	delay_ms@tempo+1,c
  5955  0026A4  0E01               	movlw	1
  5956  0026A6  6E01               	movwf	delay_ms@tempo,c
  5957  0026A8  ECFA  F012         	call	_delay_ms	;wreg free
  5958                           
  5959                           ;newmain.c: 38: PORTCbits.RC1 = 0;
  5960  0026AC  9282               	bcf	3970,1,c	;volatile
  5961                           
  5962                           ;newmain.c: 39: delay_ms(1);
  5963  0026AE  0E00               	movlw	0
  5964  0026B0  6E02               	movwf	delay_ms@tempo+1,c
  5965  0026B2  0E01               	movlw	1
  5966  0026B4  6E01               	movwf	delay_ms@tempo,c
  5967  0026B6  ECFA  F012         	call	_delay_ms	;wreg free
  5968  0026BA  0012               	return		;funcret
  5969  0026BC                     __end_of_enviar_comando_lcd:
  5970                           	opt stack 0
  5971                           tblptru	equ	0xFF8
  5972                           tblptrh	equ	0xFF7
  5973                           tblptrl	equ	0xFF6
  5974                           tablat	equ	0xFF5
  5975                           prodh	equ	0xFF4
  5976                           prodl	equ	0xFF3
  5977                           wreg	equ	0xFE8
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           fsr2h	equ	0xFDA
  5981                           fsr2l	equ	0xFD9
  5982                           status	equ	0xFD8
  5983                           
  5984 ;; *************** function _delay_ms *****************
  5985 ;; Defined at:
  5986 ;;		line 13 in file "newmain.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  tempo           2    0[COMRAM] int 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;		None
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      void 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6000 ;;      Params:         2       0       0       0       0       0       0       0       0
  6001 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6002 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6003 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6004 ;;Total ram usage:        2 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; This function calls:
  6007 ;;		Nothing
  6008 ;; This function is called by:
  6009 ;;		_enviar_comando_lcd
  6010 ;;		_escrever_lcd
  6011 ;;		_inicializa_lcd
  6012 ;; This function uses a non-reentrant model
  6013 ;;
  6014                           
  6015                           	psect	text25
  6016  0025F4                     __ptext25:
  6017                           	opt stack 0
  6018  0025F4                     _delay_ms:
  6019                           	opt stack 27
  6020                           
  6021                           ;newmain.c: 15: while (tempo > 0)
  6022                           
  6023                           ;incstack = 0
  6024  0025F4  D00F               	goto	l45
  6025  0025F6                     l46:
  6026                           
  6027                           ;newmain.c: 16: {
  6028                           ;newmain.c: 17: T0CS = 0;
  6029  0025F6  9AD5               	bcf	4053,5,c	;volatile
  6030                           
  6031                           ;newmain.c: 18: PSA = 0;
  6032  0025F8  96D5               	bcf	4053,3,c	;volatile
  6033                           
  6034                           ;newmain.c: 19: T0PS0 = 1;
  6035  0025FA  80D5               	bsf	4053,0,c	;volatile
  6036                           
  6037                           ;newmain.c: 20: T0PS1 = 0;
  6038  0025FC  92D5               	bcf	4053,1,c	;volatile
  6039                           
  6040                           ;newmain.c: 21: T0PS2 = 0;
  6041  0025FE  94D5               	bcf	4053,2,c	;volatile
  6042                           
  6043                           ;newmain.c: 22: TMR0IF = 0;
  6044  002600  94F2               	bcf	intcon,2,c	;volatile
  6045                           
  6046                           ;newmain.c: 23: T08BIT = 1;
  6047  002602  8CD5               	bsf	4053,6,c	;volatile
  6048                           
  6049                           ;newmain.c: 24: TMR0L = 0;
  6050  002604  0E00               	movlw	0
  6051  002606  6ED6               	movwf	4054,c	;volatile
  6052                           
  6053                           ;newmain.c: 25: TMR0ON = 1;
  6054  002608  8ED5               	bsf	4053,7,c	;volatile
  6055  00260A  A4F2               	btfss	intcon,2,c	;volatile
  6056  00260C  D7FE               	goto	l48
  6057                           
  6058                           ;newmain.c: 27: --tempo;
  6059  00260E  0601               	decf	delay_ms@tempo,f,c
  6060  002610  A0D8               	btfss	status,0,c
  6061  002612  0602               	decf	delay_ms@tempo+1,f,c
  6062  002614                     l45:
  6063  002614  BE02               	btfsc	delay_ms@tempo+1,7,c
  6064  002616  0012               	return	
  6065  002618  5002               	movf	delay_ms@tempo+1,w,c
  6066  00261A  E1ED               	bnz	l46
  6067  00261C  0401               	decf	delay_ms@tempo,w,c
  6068  00261E  A0D8               	btfss	status,0,c
  6069  002620  0012               	return	
  6070  002622  D7E9               	goto	l46
  6071  002624                     __end_of_delay_ms:
  6072                           	opt stack 0
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           intcon	equ	0xFF2
  6080                           wreg	equ	0xFE8
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           fsr2h	equ	0xFDA
  6084                           fsr2l	equ	0xFD9
  6085                           status	equ	0xFD8
  6086                           
  6087 ;; *************** function _inicializa_ad *****************
  6088 ;; Defined at:
  6089 ;;		line 117 in file "newmain.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;		None
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;		None
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  1    wreg      void 
  6096 ;; Registers used:
  6097 ;;		wreg, status,2
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6103 ;;      Params:         0       0       0       0       0       0       0       0       0
  6104 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6105 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6106 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6107 ;;Total ram usage:        0 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_main
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text26
  6117  002736                     __ptext26:
  6118                           	opt stack 0
  6119  002736                     _inicializa_ad:
  6120                           	opt stack 30
  6121                           
  6122                           ;newmain.c: 119: ADCON0 = 0b00000001;
  6123                           
  6124                           ;incstack = 0
  6125  002736  0E01               	movlw	1
  6126  002738  6EC2               	movwf	4034,c	;volatile
  6127                           
  6128                           ;newmain.c: 120: ADCON1 = 0b00001110;
  6129  00273A  0E0E               	movlw	14
  6130  00273C  6EC1               	movwf	4033,c	;volatile
  6131                           
  6132                           ;newmain.c: 121: ADCON2 = 0b10010110;
  6133  00273E  0E96               	movlw	150
  6134  002740  6EC0               	movwf	4032,c	;volatile
  6135  002742  0012               	return		;funcret
  6136  002744                     __end_of_inicializa_ad:
  6137                           	opt stack 0
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           intcon	equ	0xFF2
  6145                           wreg	equ	0xFE8
  6146                           postinc2	equ	0xFDE
  6147                           postdec2	equ	0xFDD
  6148                           fsr2h	equ	0xFDA
  6149                           fsr2l	equ	0xFD9
  6150                           status	equ	0xFD8
  6151                           
  6152 ;; *************** function _capturar_ad *****************
  6153 ;; Defined at:
  6154 ;;		line 124 in file "newmain.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;		None
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;  resultado       2    4[COMRAM] int 
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  2    0[COMRAM] int 
  6161 ;; Registers used:
  6162 ;;		wreg, status,2, status,0
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6168 ;;      Params:         2       0       0       0       0       0       0       0       0
  6169 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6170 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6171 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6172 ;;Total ram usage:        6 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; This function calls:
  6175 ;;		Nothing
  6176 ;; This function is called by:
  6177 ;;		_main
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           	psect	text27
  6182  0026BC                     __ptext27:
  6183                           	opt stack 0
  6184  0026BC                     _capturar_ad:
  6185                           	opt stack 30
  6186                           
  6187                           ;newmain.c: 126: int resultado;
  6188                           ;newmain.c: 128: GO_DONE = 1;
  6189                           
  6190                           ;incstack = 0
  6191  0026BC  82C2               	bsf	4034,1,c	;volatile
  6192  0026BE  B2C2               	btfsc	4034,1,c	;volatile
  6193  0026C0  D7FE               	goto	l105
  6194                           
  6195                           ;newmain.c: 130: resultado = (ADRESH << 8) | ADRESL;
  6196  0026C2  50C3               	movf	4035,w,c	;volatile
  6197  0026C4  CFC4 F003          	movff	4036,??_capturar_ad	;volatile
  6198  0026C8  6A04               	clrf	(??_capturar_ad+1)& (0+255),c
  6199  0026CA  C003  F004         	movff	??_capturar_ad,??_capturar_ad+1
  6200  0026CE  6A03               	clrf	??_capturar_ad,c
  6201  0026D0  1003               	iorwf	??_capturar_ad,w,c
  6202  0026D2  6E05               	movwf	capturar_ad@resultado,c
  6203  0026D4  5004               	movf	??_capturar_ad+1,w,c
  6204  0026D6  6E06               	movwf	capturar_ad@resultado+1,c
  6205                           
  6206                           ;newmain.c: 131: return (resultado);
  6207  0026D8  C005  F001         	movff	capturar_ad@resultado,?_capturar_ad
  6208  0026DC  C006  F002         	movff	capturar_ad@resultado+1,?_capturar_ad+1
  6209  0026E0  0012               	return	
  6210  0026E2                     __end_of_capturar_ad:
  6211                           	opt stack 0
  6212                           tblptru	equ	0xFF8
  6213                           tblptrh	equ	0xFF7
  6214                           tblptrl	equ	0xFF6
  6215                           tablat	equ	0xFF5
  6216                           prodh	equ	0xFF4
  6217                           prodl	equ	0xFF3
  6218                           intcon	equ	0xFF2
  6219                           wreg	equ	0xFE8
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function ___ftdiv *****************
  6227 ;; Defined at:
  6228 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  f1              3    8[COMRAM] float 
  6231 ;;  f2              3   11[COMRAM] float 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  f3              3   18[COMRAM] float 
  6234 ;;  sign            1   22[COMRAM] unsigned char 
  6235 ;;  exp             1   21[COMRAM] unsigned char 
  6236 ;;  cntr            1   17[COMRAM] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  3    8[COMRAM] float 
  6239 ;; Registers used:
  6240 ;;		wreg, status,2, status,0, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6246 ;;      Params:         6       0       0       0       0       0       0       0       0
  6247 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6248 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6249 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6250 ;;Total ram usage:       15 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    1
  6253 ;; This function calls:
  6254 ;;		___ftpack
  6255 ;; This function is called by:
  6256 ;;		_main
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           	psect	text28
  6261  002120                     __ptext28:
  6262                           	opt stack 0
  6263  002120                     ___ftdiv:
  6264                           	opt stack 29
  6265                           
  6266                           ;incstack = 0
  6267  002120  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  6268  002124  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6269  002126  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6270  002128  340A               	rlcf	___ftdiv@f1+1,w,c
  6271  00212A  360F               	rlcf	??___ftdiv& (0+255),f,c
  6272  00212C  E301               	bnc	u4161
  6273  00212E  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6274  002130                     u4161:
  6275  002130  500F               	movf	??___ftdiv,w,c
  6276  002132  6E16               	movwf	___ftdiv@exp,c
  6277  002134  5016               	movf	___ftdiv@exp,w,c
  6278  002136  A4D8               	btfss	status,2,c
  6279  002138  D007               	goto	l527
  6280  00213A  0E00               	movlw	0
  6281  00213C  6E09               	movwf	?___ftdiv,c
  6282  00213E  0E00               	movlw	0
  6283  002140  6E0A               	movwf	?___ftdiv+1,c
  6284  002142  0E00               	movlw	0
  6285  002144  6E0B               	movwf	?___ftdiv+2,c
  6286  002146  0012               	return	
  6287  002148                     l527:
  6288  002148  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  6289  00214C  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6290  00214E  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6291  002150  340D               	rlcf	___ftdiv@f2+1,w,c
  6292  002152  360F               	rlcf	??___ftdiv& (0+255),f,c
  6293  002154  E301               	bnc	u4181
  6294  002156  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6295  002158                     u4181:
  6296  002158  500F               	movf	??___ftdiv,w,c
  6297  00215A  6E17               	movwf	___ftdiv@sign,c
  6298  00215C  5017               	movf	___ftdiv@sign,w,c
  6299  00215E  A4D8               	btfss	status,2,c
  6300  002160  D007               	goto	l529
  6301  002162  0E00               	movlw	0
  6302  002164  6E09               	movwf	?___ftdiv,c
  6303  002166  0E00               	movlw	0
  6304  002168  6E0A               	movwf	?___ftdiv+1,c
  6305  00216A  0E00               	movlw	0
  6306  00216C  6E0B               	movwf	?___ftdiv+2,c
  6307  00216E  0012               	return	
  6308  002170                     l529:
  6309  002170  0E00               	movlw	0
  6310  002172  6E13               	movwf	___ftdiv@f3,c
  6311  002174  0E00               	movlw	0
  6312  002176  6E14               	movwf	___ftdiv@f3+1,c
  6313  002178  0E00               	movlw	0
  6314  00217A  6E15               	movwf	___ftdiv@f3+2,c
  6315  00217C  5017               	movf	___ftdiv@sign,w,c
  6316  00217E  0F89               	addlw	137
  6317  002180  5E16               	subwf	___ftdiv@exp,f,c
  6318  002182  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  6319  002186  500E               	movf	___ftdiv@f2+2,w,c
  6320  002188  1A17               	xorwf	___ftdiv@sign,f,c
  6321  00218A  0E80               	movlw	128
  6322  00218C  1617               	andwf	___ftdiv@sign,f,c
  6323  00218E  8E0A               	bsf	___ftdiv@f1+1,7,c
  6324  002190  0EFF               	movlw	255
  6325  002192  1609               	andwf	___ftdiv@f1,f,c
  6326  002194  0EFF               	movlw	255
  6327  002196  160A               	andwf	___ftdiv@f1+1,f,c
  6328  002198  0E00               	movlw	0
  6329  00219A  160B               	andwf	___ftdiv@f1+2,f,c
  6330  00219C  8E0D               	bsf	___ftdiv@f2+1,7,c
  6331  00219E  0EFF               	movlw	255
  6332  0021A0  160C               	andwf	___ftdiv@f2,f,c
  6333  0021A2  0EFF               	movlw	255
  6334  0021A4  160D               	andwf	___ftdiv@f2+1,f,c
  6335  0021A6  0E00               	movlw	0
  6336  0021A8  160E               	andwf	___ftdiv@f2+2,f,c
  6337  0021AA  0E18               	movlw	24
  6338  0021AC  6E12               	movwf	___ftdiv@cntr,c
  6339  0021AE  90D8               	bcf	status,0,c
  6340  0021B0  3613               	rlcf	___ftdiv@f3,f,c
  6341  0021B2  3614               	rlcf	___ftdiv@f3+1,f,c
  6342  0021B4  3615               	rlcf	___ftdiv@f3+2,f,c
  6343  0021B6  500C               	movf	___ftdiv@f2,w,c
  6344  0021B8  5C09               	subwf	___ftdiv@f1,w,c
  6345  0021BA  500D               	movf	___ftdiv@f2+1,w,c
  6346  0021BC  580A               	subwfb	___ftdiv@f1+1,w,c
  6347  0021BE  500E               	movf	___ftdiv@f2+2,w,c
  6348  0021C0  580B               	subwfb	___ftdiv@f1+2,w,c
  6349  0021C2  A0D8               	btfss	status,0,c
  6350  0021C4  D007               	goto	l531
  6351  0021C6  500C               	movf	___ftdiv@f2,w,c
  6352  0021C8  5E09               	subwf	___ftdiv@f1,f,c
  6353  0021CA  500D               	movf	___ftdiv@f2+1,w,c
  6354  0021CC  5A0A               	subwfb	___ftdiv@f1+1,f,c
  6355  0021CE  500E               	movf	___ftdiv@f2+2,w,c
  6356  0021D0  5A0B               	subwfb	___ftdiv@f1+2,f,c
  6357  0021D2  8013               	bsf	___ftdiv@f3,0,c
  6358  0021D4                     l531:
  6359  0021D4  90D8               	bcf	status,0,c
  6360  0021D6  3609               	rlcf	___ftdiv@f1,f,c
  6361  0021D8  360A               	rlcf	___ftdiv@f1+1,f,c
  6362  0021DA  360B               	rlcf	___ftdiv@f1+2,f,c
  6363  0021DC  2E12               	decfsz	___ftdiv@cntr,f,c
  6364  0021DE  D7E7               	goto	l530
  6365  0021E0  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  6366  0021E4  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6367  0021E8  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6368  0021EC  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  6369  0021F0  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  6370  0021F4  EC03  F011         	call	___ftpack	;wreg free
  6371  0021F8  C001  F009         	movff	?___ftpack,?___ftdiv
  6372  0021FC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6373  002200  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6374  002204  0012               	return	
  6375  002206                     __end_of___ftdiv:
  6376                           	opt stack 0
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           prodh	equ	0xFF4
  6382                           prodl	equ	0xFF3
  6383                           intcon	equ	0xFF2
  6384                           wreg	equ	0xFE8
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function ___awtoft *****************
  6392 ;; Defined at:
  6393 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  c               2    8[COMRAM] int 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  sign            1   11[COMRAM] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  3    8[COMRAM] float 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6407 ;;      Params:         3       0       0       0       0       0       0       0       0
  6408 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6410 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6411 ;;Total ram usage:        4 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    1
  6414 ;; This function calls:
  6415 ;;		___ftpack
  6416 ;; This function is called by:
  6417 ;;		_main
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text29
  6422  0025BC                     __ptext29:
  6423                           	opt stack 0
  6424  0025BC                     ___awtoft:
  6425                           	opt stack 29
  6426                           
  6427                           ;incstack = 0
  6428  0025BC  0E00               	movlw	0
  6429  0025BE  6E0C               	movwf	___awtoft@sign,c
  6430  0025C0  AE0A               	btfss	___awtoft@c+1,7,c
  6431  0025C2  D006               	goto	l427
  6432  0025C4  6C09               	negf	___awtoft@c,c
  6433  0025C6  1E0A               	comf	___awtoft@c+1,f,c
  6434  0025C8  B0D8               	btfsc	status,0,c
  6435  0025CA  2A0A               	incf	___awtoft@c+1,f,c
  6436  0025CC  0E01               	movlw	1
  6437  0025CE  6E0C               	movwf	___awtoft@sign,c
  6438  0025D0                     l427:
  6439  0025D0  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6440  0025D4  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6441  0025D8  6A03               	clrf	___ftpack@arg+2,c
  6442  0025DA  0E8E               	movlw	142
  6443  0025DC  6E04               	movwf	___ftpack@exp,c
  6444  0025DE  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6445  0025E2  EC03  F011         	call	___ftpack	;wreg free
  6446  0025E6  C001  F009         	movff	?___ftpack,?___awtoft
  6447  0025EA  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6448  0025EE  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6449  0025F2  0012               	return	
  6450  0025F4                     __end_of___awtoft:
  6451                           	opt stack 0
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodh	equ	0xFF4
  6457                           prodl	equ	0xFF3
  6458                           intcon	equ	0xFF2
  6459                           wreg	equ	0xFE8
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466 ;; *************** function ___ftpack *****************
  6467 ;; Defined at:
  6468 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  arg             3    0[COMRAM] unsigned um
  6471 ;;  exp             1    3[COMRAM] unsigned char 
  6472 ;;  sign            1    4[COMRAM] unsigned char 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  3    0[COMRAM] float 
  6477 ;; Registers used:
  6478 ;;		wreg, status,2, status,0
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6484 ;;      Params:         5       0       0       0       0       0       0       0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6486 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6487 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6488 ;;Total ram usage:        8 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; This function calls:
  6491 ;;		Nothing
  6492 ;; This function is called by:
  6493 ;;		___awtoft
  6494 ;;		___ftadd
  6495 ;;		___ftdiv
  6496 ;;		___ftmul
  6497 ;;		___lltoft
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text30
  6502  002206                     __ptext30:
  6503                           	opt stack 0
  6504  002206                     ___ftpack:
  6505                           	opt stack 27
  6506                           
  6507                           ;incstack = 0
  6508  002206  5004               	movf	___ftpack@exp,w,c
  6509  002208  B4D8               	btfsc	status,2,c
  6510  00220A  D005               	goto	u2150
  6511  00220C  5001               	movf	___ftpack@arg,w,c
  6512  00220E  1002               	iorwf	___ftpack@arg+1,w,c
  6513  002210  1003               	iorwf	___ftpack@arg+2,w,c
  6514  002212  A4D8               	btfss	status,2,c
  6515  002214  D00C               	goto	l463
  6516  002216                     u2150:
  6517  002216  0E00               	movlw	0
  6518  002218  6E01               	movwf	?___ftpack,c
  6519  00221A  0E00               	movlw	0
  6520  00221C  6E02               	movwf	?___ftpack+1,c
  6521  00221E  0E00               	movlw	0
  6522  002220  6E03               	movwf	?___ftpack+2,c
  6523  002222  0012               	return	
  6524  002224  2A04               	incf	___ftpack@exp,f,c
  6525  002226  90D8               	bcf	status,0,c
  6526  002228  3203               	rrcf	___ftpack@arg+2,f,c
  6527  00222A  3202               	rrcf	___ftpack@arg+1,f,c
  6528  00222C  3201               	rrcf	___ftpack@arg,f,c
  6529  00222E                     l463:
  6530  00222E  0E00               	movlw	0
  6531  002230  1401               	andwf	___ftpack@arg,w,c
  6532  002232  6E06               	movwf	??___ftpack& (0+255),c
  6533  002234  0E00               	movlw	0
  6534  002236  1402               	andwf	___ftpack@arg+1,w,c
  6535  002238  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6536  00223A  0EFE               	movlw	254
  6537  00223C  1403               	andwf	___ftpack@arg+2,w,c
  6538  00223E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6539  002240  5006               	movf	??___ftpack,w,c
  6540  002242  1007               	iorwf	??___ftpack+1,w,c
  6541  002244  1008               	iorwf	??___ftpack+2,w,c
  6542  002246  B4D8               	btfsc	status,2,c
  6543  002248  D00C               	goto	l466
  6544  00224A  D7EC               	goto	l464
  6545  00224C  2A04               	incf	___ftpack@exp,f,c
  6546  00224E  0E01               	movlw	1
  6547  002250  2601               	addwf	___ftpack@arg,f,c
  6548  002252  0E00               	movlw	0
  6549  002254  2202               	addwfc	___ftpack@arg+1,f,c
  6550  002256  0E00               	movlw	0
  6551  002258  2203               	addwfc	___ftpack@arg+2,f,c
  6552  00225A  90D8               	bcf	status,0,c
  6553  00225C  3203               	rrcf	___ftpack@arg+2,f,c
  6554  00225E  3202               	rrcf	___ftpack@arg+1,f,c
  6555  002260  3201               	rrcf	___ftpack@arg,f,c
  6556  002262                     l466:
  6557  002262  0E00               	movlw	0
  6558  002264  1401               	andwf	___ftpack@arg,w,c
  6559  002266  6E06               	movwf	??___ftpack& (0+255),c
  6560  002268  0E00               	movlw	0
  6561  00226A  1402               	andwf	___ftpack@arg+1,w,c
  6562  00226C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6563  00226E  0EFF               	movlw	255
  6564  002270  1403               	andwf	___ftpack@arg+2,w,c
  6565  002272  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6566  002274  5006               	movf	??___ftpack,w,c
  6567  002276  1007               	iorwf	??___ftpack+1,w,c
  6568  002278  1008               	iorwf	??___ftpack+2,w,c
  6569  00227A  B4D8               	btfsc	status,2,c
  6570  00227C  D006               	goto	l469
  6571  00227E  D7E6               	goto	l467
  6572  002280  0604               	decf	___ftpack@exp,f,c
  6573  002282  90D8               	bcf	status,0,c
  6574  002284  3601               	rlcf	___ftpack@arg,f,c
  6575  002286  3602               	rlcf	___ftpack@arg+1,f,c
  6576  002288  3603               	rlcf	___ftpack@arg+2,f,c
  6577  00228A                     l469:
  6578  00228A  BE02               	btfsc	___ftpack@arg+1,7,c
  6579  00228C  D003               	goto	u2190
  6580  00228E  0E02               	movlw	2
  6581  002290  6004               	cpfslt	___ftpack@exp,c
  6582  002292  D7F6               	goto	l470
  6583  002294                     u2190:
  6584  002294  A004               	btfss	___ftpack@exp,0,c
  6585  002296  9E02               	bcf	___ftpack@arg+1,7,c
  6586  002298  90D8               	bcf	status,0,c
  6587  00229A  3204               	rrcf	___ftpack@exp,f,c
  6588  00229C  5004               	movf	___ftpack@exp,w,c
  6589  00229E  1203               	iorwf	___ftpack@arg+2,f,c
  6590  0022A0  5005               	movf	___ftpack@sign,w,c
  6591  0022A2  A4D8               	btfss	status,2,c
  6592  0022A4  8E03               	bsf	___ftpack@arg+2,7,c
  6593  0022A6  C001  F001         	movff	___ftpack@arg,?___ftpack
  6594  0022AA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6595  0022AE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6596  0022B2  0012               	return	
  6597  0022B4                     __end_of___ftpack:
  6598                           	opt stack 0
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodh	equ	0xFF4
  6604                           prodl	equ	0xFF3
  6605                           intcon	equ	0xFF2
  6606                           wreg	equ	0xFE8
  6607                           postinc2	equ	0xFDE
  6608                           postdec2	equ	0xFDD
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon	equ	0xFF2
  6619                           wreg	equ	0xFE8
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
  6625                           
  6626                           	psect	rparam
  6627  0000                     tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           wreg	equ	0xFE8
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     82      82
    BANK0           160     25      25
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[6]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_escrever_lcd
    _escrever_lcd->_delay_ms
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _posicionar_cursor->_enviar_comando_lcd
    _inicializa_lcd->_enviar_comando_lcd
    _enviar_comando_lcd->_delay_ms
    ___ftdiv->___ftpack
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   64645
                                             74 COMRAM     8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                        _capturar_ad
                      _inicializa_ad
                     _inicializa_lcd
                   _inicializa_pinos
                  _posicionar_cursor
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   50570
                                             63 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12059
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     447
                                              3 COMRAM     1     1      0
                       _escrever_lcd
 ---------------------------------------------------------------------------------
 (3) _escrever_lcd                                         1     1      0     425
                                              2 COMRAM     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11861
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _posicionar_cursor                                    4     0      4    2137
                                              3 COMRAM     4     0      4
                 _enviar_comando_lcd
 ---------------------------------------------------------------------------------
 (1) _inicializa_pinos                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_lcd                                       0     0      0     828
                           _delay_ms
                 _enviar_comando_lcd
 ---------------------------------------------------------------------------------
 (2) _enviar_comando_lcd                                   1     1      0     425
                                              2 COMRAM     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             2     0      2     403
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _inicializa_ad                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _capturar_ad                                          6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3063
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _capturar_ad
   _inicializa_ad
   _inicializa_lcd
     _delay_ms
     _enviar_comando_lcd
       _delay_ms
   _inicializa_pinos
   _posicionar_cursor
     _enviar_comando_lcd
       _delay_ms
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _escrever_lcd
         _delay_ms
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     52      52       1       86.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      19       5       15.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 01 10:13:37 2018

__size_of_enviar_comando_lcd 0026                           l45 2614                           l46 25F6  
                         l70 154E                           l71 1566                           l48 260A  
                         l80 163E                           l72 157E                           l81 1656  
                         l73 1596                           l90 173E                           l82 166E  
                         l74 15AE                           l66 14EE                           l91 1758  
                         l83 1688                           l75 15C6                           l67 1506  
                         l92 1772                           l84 16A2                           l76 15DE  
                         l68 151E                           l93 178C                           l85 16BC  
                         l77 15F6                           l69 1536                           l94 17A6  
                         l86 16D6                           l78 160E                           l95 17C0  
                         l87 16F0                           l79 1626                           l96 17DA  
                         l88 170A                           l89 1724                 ___awdiv@sign 000C  
        ___wmul@multiplicand 0011                 ___ftadd@exp1 0039                 ___ftadd@exp2 0038  
               ___ftadd@sign 0037                          l105 26BE                          l201 0E04  
                        l210 0F8A                          l202 0D78                          l211 0EB0  
                        l115 2062                          l140 193C                          l220 1024  
                        l204 0E1E                          l213 0FA4                          l205 0E10  
                        l150 12B4                          l222 1046                          l214 0F96  
                        l143 1A08                          l151 1404                          l223 104E  
                        l207 0E42                          l400 2368                          l224 1072  
                        l216 0FC6                          l208 0E46                          l160 08D6  
                        l153 14B4                          l225 107A                          l217 0FE2  
                        l209 0E5E                          l402 2386                          l146 12D8  
                        l170 09B4                          l162 09A6                          l403 237E  
                        l147 1204                          l219 1002                          l171 09DC  
                        l163 0990                          l420 24A2                          l412 245E  
                        l180 0B50                          l164 0958                          l421 24B0  
                        l413 246A                          l229 10B2                          l173 0FAE  
                        l181 0B90                          l157 0894                          l406 23A6  
                        l182 0C58                          l174 09F0                          l158 08A6  
                        l503 1B2A                          l431 1D44                          l407 23B0  
                        l415 2480                          l191 0CBE                          l175 0A32  
                        l167 09B8                          l520 1B82                          l408 23BE  
                        l416 2478                          l521 1B9E                          l433 1D62  
                        l185 0C00                          l177 0AC4                          l530 21AE  
                        l522 1BCE                          l434 1DA4                          l178 0B2A  
                        l427 25D0                          l531 21D4                          l443 1E36  
                        l435 1DD4                          l419 2498                          l195 0D2A  
                        l508 1B20                          l444 1E2A                          l517 1B5E  
                        l509 1B16                          l621 23F6                          l437 1E12  
                        l541 1CEA                          l197 0D4E                          l470 2280  
                        l518 1B54                          l622 23EA                          l438 1E02  
                        l542 1CDA                          l198 0D40                          l463 222E  
                        l527 2148                          l631 24D8                          l535 1C20  
                        l464 2224                          l552 22E4                          l632 24CC  
                        l529 2170                          l553 2314                          l625 242A  
                        l537 1C4C                          l561 1E9E                          l466 2262  
                        l570 26F8                          l626 2438                          l642 2532  
                        l538 1C86                          l562 1ED0                          l467 224C  
                        l635 2500                          l643 2526                          l547 1D0E  
                        l539 1CAE                          l563 1EE0                          l580 1F6E  
                        l636 250E                          l548 1D02                          l469 228A  
                        l565 1EF8                          l494 1A9A                          l582 1FE4  
                        l566 1F08                          l591 2024                          l583 1FD4  
                        l399 2358                          l559 1E76                          l576 2592  
                        l498 1AC4                          l595 271C                          l588 2008  
                        l589 1FFC                          _PSA 007EAB                 ___awmod@sign 0006  
                        wreg 000FE8            ?_inicializa_pinos 0001                 ___ftdiv@cntr 0012  
               ___ftdiv@sign 0017                 __CFG_WDT$OFF 000000                         l2020 2340  
                       l3116 2062                         l2912 0BDA                         l2904 0B90  
                       l2932 0CC2                         l2952 0D40                         l2970 0E10  
                       STR_1 0877                         STR_2 087F                         _T0CS 007EAD  
                       u3000 23FA                         u2221 1A58                         u2150 2216  
                       u3030 24DC                         u2231 1A6C                         u2320 1AF4  
                       u2260 1A8C                         u2190 2294                         u2431 1E5E  
                       u2360 1B32                         u2520 238A                         u4120 1082  
                       u2290 1AB6                         u4130 1098                         u2451 1E86  
                       u2701 1C04                         u2390 1B66                         u4161 2130  
                       u2721 1C30                 printf@tmpval 006D                         u2580 2484  
                       u4181 2158                         u2911 1F52                         u3800 0A6A  
                       u2930 1F8C                         u2850 1E3C                         u3730 0934  
                       u2780 1D14                         u3805 0A60                         u2935 1F84  
                       u3920 0CFA                         u3840 0B62                         u2970 200E  
                       u3850 0BA2                         u3950 0D5C                         u3880 0BDA  
                       u3980 0E2C                         u3990 0E3C           ??_inicializa_pinos 0001  
                       _main 2036                 ___ftpack@arg 0001                 ___ftpack@exp 0004  
                       fsr2h 000FDA                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                 ___ftmul@cntr 0022  
               ___param_bank 000000                 ___ftmul@sign 0023                 ___fttol@exp1 0039  
               ___fttol@lval 0035                        ?_main 0001              __end_of___awdiv 23C8  
            __end_of___ftadd 1BF4              __end_of___awmod 24BA              __end_of___ftdiv 2206  
            __end_of___ftneg 2706              __end_of___lldiv 244A              __end_of___ftmul 1F42  
            ___awdiv@divisor 0009              __end_of___llmod 2520              __end_of___ftsub 25BC  
            __end_of___fttol 2036                        _T0PS0 007EA8                        _T0PS1 007EA9  
                      _T0PS2 007EAA              ___awdiv@counter 000B       __size_of_inicializa_ad 000E  
                      _TMR0L 000FD6                        _PORTC 000F82                        _PORTD 000F83  
                      _TRISC 000F94                        _TRISD 000F95                 main@integral 004B  
               ___lltoft@exp 0011                ?_escrever_lcd 0001                ___awtoft@sign 000C  
            __end_of_dpowers 0829                        _scale 10D0              __end_of_isdigit 2724  
              ___ftpack@sign 0005                        _putch 274E                        tablat 000FF5  
                      status 000FD8              __initialization 2744                 __end_of_main 2120  
       __size_of_capturar_ad 0026                       ??_main 004B                ___fttol@sign1 0034  
              __activetblptr 000002         __size_of__tdiv_to_l_ 0132               ??_escrever_lcd 0003  
                     _ADCON0 000FC2                       _ADCON1 000FC1                       _ADCON2 000FC0  
           ___llmod@dividend 0001                       ?_scale 0024                       _ADRESH 000FC4  
                     _ADRESL 000FC3                       _T08BIT 007EAE             ___awdiv@dividend 0007  
           __end_of___awtoft 25F4                       ?_putch 0001             __end_of___ftpack 22B4  
           __end_of___lltoft 257C                       _TMR0IF 007F92                       _TMR0ON 007EAF  
    __size_of_inicializa_lcd 0026                _inicializa_ad 2736             __end_of_delay_ms 2624  
           __end_of__powers_ 0850                       ___ftge 22B4                       ___wmul 264A  
                  ??___awdiv 000B                    ??___ftadd 0034                    ??___awmod 0005  
                  ??___ftdiv 000F                    ??___ftneg 0004                    ??___lldiv 0009  
                  ??___ftmul 001B                    ??___llmod 0009                    ??___ftsub 0040  
                  ??___fttol 002F                       _fround 17F6             ___awdiv@quotient 000D  
            ___awmod@divisor 0003              ___awmod@counter 0005                       _printf 0886  
      ___ftmul@f3_as_product 001F                    ??_isdigit 0001                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                     putch@x 0004                   __accesstop 0060      __end_of__initialization 2744  
            __CFG_FOSC$XT_XT 000000                   ___ftadd@f1 002E                   ___ftadd@f2 0031  
             ?_inicializa_ad 0001                   ___ftge@ff1 0001                   ___ftge@ff2 0004  
              ___rparam_used 000001                   ___ftdiv@f1 0009                   ___ftdiv@f2 000C  
                 ___ftdiv@f3 0013                   ___ftneg@f1 0001                   ___awtoft@c 0009  
                 ___ftmul@f1 0015                   ___ftmul@f2 0018                   ___ftsub@f1 003A  
                 ___ftsub@f2 003D                   ___fttol@f1 002B               __pcstackCOMRAM 0001  
                 ___lltoft@c 0009                __end_of_scale 14D8                __end_of_putch 2758  
                 __div_to_l_ 1D26              __div_to_l_@exp1 000C              __div_to_l_@cntr 000B  
                    ??_scale 0027              __div_to_l_@quot 0007                      ??_putch 0004  
              __div_to_l_@f1 0001                __div_to_l_@f2 0004   __end_of_enviar_comando_lcd 26BC  
       __end_of_escrever_lcd 264A    __size_of_inicializa_pinos 0012                      ?___ftge 0001  
                    ?___wmul 000F                      ?_fround 0024                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printf 0040                    ?___lltoft 0009  
                    _GO_DONE 007E11                    ?_delay_ms 0001              ??_inicializa_ad 0001  
             _inicializa_lcd 2670            __end_of__npowers_ 0877                      __Hparam 0000  
                    __Lparam 0000              __size_of___ftge 0090                      ___awdiv 2344  
                    ___ftadd 1A48                      ___awmod 244A                      ___ftdiv 2120  
                    ___ftneg 26E2                      ___lldiv 23C8              __size_of___wmul 0026  
                    ___ftmul 1E4E                      ___llmod 24BA                      ___ftsub 257C  
                    ___fttol 1F42                   _fround$780 002A                   _fround$781 0027  
               __psmallconst 0800                      __pcinit 2744                   ??___awtoft 000C  
                 ??___ftpack 0006              __size_of_fround 0252                      __ramtop 0800  
                 ??___lltoft 000D                      __ptext0 2036                      __ptext1 0886  
                    __ptext2 10D0                      __ptext3 274E                      __ptext4 2624  
                    __ptext5 2706                      __ptext6 17F6                      __ptext7 264A  
                    __ptext8 1E4E                      __ptext9 244A              __size_of_printf 084A  
                ?__div_to_l_ 0001                      _dpowers 0801                      _isdigit 2706  
           ___awmod@dividend 0001                   ??_delay_ms 0003      enviar_comando_lcd@valor 0003  
                    main@adc 004E       __end_of_inicializa_lcd 2696         end_of_initialization 2744  
              __Lmediumconst 0000              ___lldiv@divisor 0005              ___lldiv@counter 000D  
              ??_capturar_ad 0003                      printf@c 0078                      printf@f 0040  
                    postdec2 000FDD                      postinc2 000FDE               __tdiv_to_l_@f1 0001  
             __tdiv_to_l_@f2 0004                   _printf$783 0060                ??__tdiv_to_l_ 0007  
                  _PORTCbits 000F82              ?_inicializa_lcd 0001        __size_of_escrever_lcd 0026  
                ___ftdiv@exp 0016                  printf@width 006B          __size_of__div_to_l_ 0128  
       capturar_ad@resultado 0005                  ___ftmul@exp 001E             _inicializa_pinos 2724  
             __end_of___ftge 2344               __end_of___wmul 2670                delay_ms@tempo 0001  
        __end_of_capturar_ad 26E2               __end_of_fround 1A48               __end_of_printf 10D0  
        start_initialization 2744                 _escrever_lcd 2624          __end_of__tdiv_to_l_ 1D26  
            ___llmod@divisor 0005              ___llmod@counter 0009            _posicionar_cursor 14D8  
                   ??___ftge 0007                     ??___wmul 0013           ?_posicionar_cursor 0004  
                   ??_fround 0027            escrever_lcd@valor 0003                     ??_printf 0045  
         _enviar_comando_lcd 2696                   fround@prec 002D            __size_of___awtoft 0038  
          __size_of___ftpack 00AE          ??_posicionar_cursor 0008            __size_of___lltoft 005C  
              __pcstackBANK0 0060      posicionar_cursor@coluna 0006          ?_enviar_comando_lcd 0001  
          __size_of_delay_ms 0030    __end_of_posicionar_cursor 17F6                  _capturar_ad 26BC  
       ??_enviar_comando_lcd 0003                     ?___awdiv 0007                     ?___ftadd 002E  
                   ?___awmod 0001                     ?___ftdiv 0009                     ?___ftneg 0001  
                   ?___lldiv 0001                     ?___ftmul 0015                     ?___llmod 0001  
                   ?___ftsub 003A                    __npowers_ 0850                     ?___fttol 002B  
                __tdiv_to_l_ 1BF4                 ??__div_to_l_ 0007                  __smallconst 0800  
                   ?_isdigit 0001                    _scale$782 0027               __size_of_scale 0408  
             __size_of_putch 000A               ___wmul@product 0013        __end_of_inicializa_ad 2744  
         __end_of__div_to_l_ 1E4E            ___wmul@multiplier 000F                   printf@flag 0069  
                 printf@fval 0073                   printf@prec 0076             ??_inicializa_lcd 0004  
                  main@volts 0050     __end_of_inicializa_pinos 2736   __size_of_posicionar_cursor 031E  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___awdiv 0084  
           __size_of___ftadd 01AC             __size_of___awmod 0070             __size_of___ftdiv 00E6  
           __size_of___ftneg 0024             __size_of___lldiv 0082             __size_of___ftmul 00F4  
           __size_of___llmod 0066             __size_of___ftsub 0040             __size_of___fttol 00F4  
                   ___awtoft 25BC                     ___ftpack 2206                     ___lltoft 2520  
                _isdigit$435 0002       posicionar_cursor@linha 0004             __size_of_isdigit 001E  
                   _delay_ms 25F4                     __ptext10 2344                     __ptext11 1BF4  
                   __ptext20 22B4                     __ptext12 1D26                     __ptext21 14D8  
                   __ptext13 2520                     __ptext30 2206                     __ptext22 2724  
                   __ptext14 24BA                     __ptext23 2670                     __ptext15 23C8  
                   __ptext24 2696                     __ptext16 1F42                     __ptext25 25F4  
                   __ptext17 257C                     __ptext26 2736                     __ptext18 1A48  
                   __ptext27 26BC                     __ptext19 26E2                     __ptext28 2120  
                   __ptext29 25BC                     __powers_ 0829                __size_of_main 00EA  
                  printf@exp 0071                    printf@val 0065                     isdigit@c 0003  
                   scale@scl 002A             __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E  
           __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001                 ?_capturar_ad 0001  
                   printf@ap 0063                 ?__tdiv_to_l_ 0001             ___lldiv@quotient 0009  
