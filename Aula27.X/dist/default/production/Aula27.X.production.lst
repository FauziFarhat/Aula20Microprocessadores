

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jul 03 20:20:09 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt stack 0
    81  000800  00                 	db	0
    82  000801                     _dpowers:
    83                           	opt stack 0
    84  000801  0001               	dw	1
    85  000803  0000               	dw	0
    86  000805  000A               	dw	10
    87  000807  0000               	dw	0
    88  000809  0064               	dw	100
    89  00080B  0000               	dw	0
    90  00080D  03E8               	dw	1000
    91  00080F  0000               	dw	0
    92  000811  2710               	dw	10000
    93  000813  0000               	dw	0
    94  000815  86A0               	dw	34464
    95  000817  0001               	dw	1
    96  000819  4240               	dw	16960
    97  00081B  000F               	dw	15
    98  00081D  9680               	dw	38528
    99  00081F  0098               	dw	152
   100  000821  E100               	dw	57600
   101  000823  05F5               	dw	1525
   102  000825  CA00               	dw	51712
   103  000827  3B9A               	dw	15258
   104  000829                     __end_of_dpowers:
   105                           	opt stack 0
   106  000829                     __powers_:
   107                           	opt stack 0
   108  000829  00                 	db	0
   109  00082A  80                 	db	128
   110  00082B  3F                 	db	63
   111  00082C  00                 	db	0
   112  00082D  20                 	db	32
   113  00082E  41                 	db	65
   114  00082F  00                 	db	0
   115  000830  C8                 	db	200
   116  000831  42                 	db	66
   117  000832  00                 	db	0
   118  000833  7A                 	db	122
   119  000834  44                 	db	68
   120  000835  40                 	db	64
   121  000836  1C                 	db	28
   122  000837  46                 	db	70
   123  000838  50                 	db	80
   124  000839  C3                 	db	195
   125  00083A  47                 	db	71
   126  00083B  24                 	db	36
   127  00083C  74                 	db	116
   128  00083D  49                 	db	73
   129  00083E  97                 	db	151
   130  00083F  18                 	db	24
   131  000840  4B                 	db	75
   132  000841  BC                 	db	188
   133  000842  BE                 	db	190
   134  000843  4C                 	db	76
   135  000844  6B                 	db	107
   136  000845  6E                 	db	110
   137  000846  4E                 	db	78
   138  000847  03                 	db	3
   139  000848  15                 	db	21
   140  000849  50                 	db	80
   141  00084A  79                 	db	121
   142  00084B  AD                 	db	173
   143  00084C  60                 	db	96
   144  00084D  F3                 	db	243
   145  00084E  49                 	db	73
   146  00084F  71                 	db	113
   147  000850                     __end_of__powers_:
   148                           	opt stack 0
   149  000850                     __npowers_:
   150                           	opt stack 0
   151  000850  00                 	db	0
   152  000851  80                 	db	128
   153  000852  3F                 	db	63
   154  000853  CD                 	db	205
   155  000854  CC                 	db	204
   156  000855  3D                 	db	61
   157  000856  D7                 	db	215
   158  000857  23                 	db	35
   159  000858  3C                 	db	60
   160  000859  12                 	db	18
   161  00085A  83                 	db	131
   162  00085B  3A                 	db	58
   163  00085C  B7                 	db	183
   164  00085D  D1                 	db	209
   165  00085E  38                 	db	56
   166  00085F  C6                 	db	198
   167  000860  27                 	db	39
   168  000861  37                 	db	55
   169  000862  38                 	db	56
   170  000863  86                 	db	134
   171  000864  35                 	db	53
   172  000865  C0                 	db	192
   173  000866  D6                 	db	214
   174  000867  33                 	db	51
   175  000868  CC                 	db	204
   176  000869  2B                 	db	43
   177  00086A  32                 	db	50
   178  00086B  70                 	db	112
   179  00086C  89                 	db	137
   180  00086D  30                 	db	48
   181  00086E  E7                 	db	231
   182  00086F  DB                 	db	219
   183  000870  2E                 	db	46
   184  000871  E5                 	db	229
   185  000872  3C                 	db	60
   186  000873  1E                 	db	30
   187  000874  42                 	db	66
   188  000875  A2                 	db	162
   189  000876  0D                 	db	13
   190  000877                     __end_of__npowers_:
   191                           	opt stack 0
   192  0000                     _PORTC	set	3970
   193  0000                     _TRISD	set	3989
   194  0000                     _TRISC	set	3988
   195  0000                     _TRISA	set	3986
   196  0000                     _ADRESL	set	4035
   197  0000                     _ADRESH	set	4036
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON0	set	4034
   201  0000                     _PORTCbits	set	3970
   202  0000                     _PORTD	set	3971
   203  0000                     _TMR0L	set	4054
   204  0000                     _GO_DONE	set	32273
   205  0000                     _TMR0ON	set	32431
   206  0000                     _T08BIT	set	32430
   207  0000                     _TMR0IF	set	32658
   208  0000                     _T0PS2	set	32426
   209  0000                     _T0PS1	set	32425
   210  0000                     _T0PS0	set	32424
   211  0000                     _PSA	set	32427
   212  0000                     _T0CS	set	32429
   213  000877                     STR_1:
   214  000877  52                 	db	82	;'R'
   215  000878  45                 	db	69	;'E'
   216  000879  53                 	db	83	;'S'
   217  00087A  49                 	db	73	;'I'
   218  00087B  53                 	db	83	;'S'
   219  00087C  54                 	db	84	;'T'
   220  00087D  45                 	db	69	;'E'
   221  00087E  4E                 	db	78	;'N'
   222  00087F  43                 	db	67	;'C'
   223  000880  49                 	db	73	;'I'
   224  000881  41                 	db	65	;'A'
   225  000882  00                 	db	0
   226  000883                     STR_2:
   227  000883  25                 	db	37
   228  000884  66                 	db	102	;'f'
   229  000885  20                 	db	32
   230  000886  6F                 	db	111	;'o'
   231  000887  68                 	db	104	;'h'
   232  000888  6D                 	db	109	;'m'
   233  000889  73                 	db	115	;'s'
   234  00088A  00                 	db	0
   235                           
   236                           ; #config settings
   237  00088B  00                 	db	0	; dummy byte at the end
   238  0000                     
   239                           	psect	cinit
   240  0024D6                     __pcinit:
   241                           	opt stack 0
   242  0024D6                     start_initialization:
   243                           	opt stack 0
   244  0024D6                     __initialization:
   245                           	opt stack 0
   246                           
   247                           ; Clear objects allocated to COMRAM (17 bytes)
   248  0024D6  EE00  F04B         	lfsr	0,__pbssCOMRAM
   249  0024DA  0E11               	movlw	17
   250  0024DC                     clear_0:
   251  0024DC  6AEE               	clrf	postinc0,c
   252  0024DE  06E8               	decf	wreg,f,c
   253  0024E0  E1FD               	bnz	clear_0
   254  0024E2                     end_of_initialization:
   255                           	opt stack 0
   256  0024E2                     __end_of__initialization:
   257                           	opt stack 0
   258  0024E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   259  0024E4  6EF8               	movwf	tblptru,c
   260  0024E6  0100               	movlb	0
   261  0024E8  EFFD  F00D         	goto	_main	;jump to C main() function
   262                           tblptru	equ	0xFF8
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	bssCOMRAM
   267  00004B                     __pbssCOMRAM:
   268                           	opt stack 0
   269  00004B                     _Irf:
   270                           	opt stack 0
   271  00004B                     	ds	3
   272  00004E                     _Rm:
   273                           	opt stack 0
   274  00004E                     	ds	3
   275  000051                     _Vrv:
   276                           	opt stack 0
   277  000051                     	ds	3
   278  000054                     _Vrf:
   279                           	opt stack 0
   280  000054                     	ds	3
   281  000057                     _Rv:
   282                           	opt stack 0
   283  000057                     	ds	3
   284  00005A                     _adc:
   285                           	opt stack 0
   286  00005A                     	ds	2
   287                           tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	cstackBANK0
   292  000060                     __pcstackBANK0:
   293                           	opt stack 0
   294  000060                     _printf$779:
   295                           	opt stack 0
   296                           
   297                           ; 3 bytes @ 0x0
   298  000060                     	ds	3
   299  000063                     printf@ap:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x3
   303  000063                     	ds	2
   304  000065                     printf@flag:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x5
   308  000065                     	ds	2
   309  000067                     printf@prec:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x7
   313  000067                     	ds	2
   314  000069                     printf@val:
   315                           	opt stack 0
   316                           
   317                           ; 4 bytes @ 0x9
   318  000069                     	ds	4
   319  00006D                     printf@exp:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xD
   323  00006D                     	ds	2
   324  00006F                     printf@tmpval:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0xF
   328  00006F                     	ds	4
   329  000073                     printf@fval:
   330                           	opt stack 0
   331                           
   332                           ; 3 bytes @ 0x13
   333  000073                     	ds	3
   334  000076                     printf@c:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x16
   338  000076                     	ds	1
   339                           tblptru	equ	0xFF8
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           
   343                           	psect	cstackCOMRAM
   344  000001                     __pcstackCOMRAM:
   345                           	opt stack 0
   346  000001                     ?_capturar_ad:
   347                           	opt stack 0
   348  000001                     ?___awmod:
   349                           	opt stack 0
   350  000001                     ?___ftpack:
   351                           	opt stack 0
   352  000001                     ?___ftneg:
   353                           	opt stack 0
   354  000001                     ?__tdiv_to_l_:
   355                           	opt stack 0
   356  000001                     ?__div_to_l_:
   357                           	opt stack 0
   358  000001                     ?___lldiv:
   359                           	opt stack 0
   360  000001                     ?___llmod:
   361                           	opt stack 0
   362  000001                     delay_ms@tempo:
   363                           	opt stack 0
   364  000001                     ___awmod@dividend:
   365                           	opt stack 0
   366  000001                     __div_to_l_@f1:
   367                           	opt stack 0
   368  000001                     ___ftpack@arg:
   369                           	opt stack 0
   370  000001                     __tdiv_to_l_@f1:
   371                           	opt stack 0
   372  000001                     ___ftge@ff1:
   373                           	opt stack 0
   374  000001                     ___ftneg@f1:
   375                           	opt stack 0
   376  000001                     ___lldiv@dividend:
   377                           	opt stack 0
   378  000001                     ___llmod@dividend:
   379                           	opt stack 0
   380                           
   381                           ; 4 bytes @ 0x0
   382  000001                     	ds	2
   383  000003                     ??_capturar_ad:
   384  000003                     enviar_comando_lcd@valor:
   385                           	opt stack 0
   386  000003                     escrever_lcd@valor:
   387                           	opt stack 0
   388  000003                     ___awmod@divisor:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x2
   392  000003                     	ds	1
   393  000004                     putch@x:
   394                           	opt stack 0
   395  000004                     ___ftpack@exp:
   396                           	opt stack 0
   397  000004                     posicionar_cursor@linha:
   398                           	opt stack 0
   399  000004                     __div_to_l_@f2:
   400                           	opt stack 0
   401  000004                     __tdiv_to_l_@f2:
   402                           	opt stack 0
   403  000004                     ___ftge@ff2:
   404                           	opt stack 0
   405                           
   406                           ; 3 bytes @ 0x3
   407  000004                     	ds	1
   408  000005                     ___awmod@counter:
   409                           	opt stack 0
   410  000005                     ___ftpack@sign:
   411                           	opt stack 0
   412  000005                     capturar_ad@resultado:
   413                           	opt stack 0
   414  000005                     ___lldiv@divisor:
   415                           	opt stack 0
   416  000005                     ___llmod@divisor:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0x4
   420  000005                     	ds	1
   421  000006                     ??___ftpack:
   422  000006                     ___awmod@sign:
   423                           	opt stack 0
   424  000006                     posicionar_cursor@coluna:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x5
   428  000006                     	ds	1
   429  000007                     ??__tdiv_to_l_:
   430  000007                     ??___ftge:
   431  000007                     ?___awdiv:
   432                           	opt stack 0
   433  000007                     ___awdiv@dividend:
   434                           	opt stack 0
   435  000007                     __div_to_l_@quot:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0x6
   439  000007                     	ds	1
   440  000008                     
   441                           ; 1 bytes @ 0x7
   442  000008                     	ds	1
   443  000009                     ?___ftdiv:
   444                           	opt stack 0
   445  000009                     ?___awtoft:
   446                           	opt stack 0
   447  000009                     ?___lltoft:
   448                           	opt stack 0
   449  000009                     ___llmod@counter:
   450                           	opt stack 0
   451  000009                     ___awdiv@divisor:
   452                           	opt stack 0
   453  000009                     ___awtoft@c:
   454                           	opt stack 0
   455  000009                     ___ftdiv@f1:
   456                           	opt stack 0
   457  000009                     ___lldiv@quotient:
   458                           	opt stack 0
   459  000009                     ___lltoft@c:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x8
   463  000009                     	ds	1
   464  00000A                     __tdiv_to_l_@quot:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x9
   468  00000A                     	ds	1
   469  00000B                     ___awdiv@counter:
   470                           	opt stack 0
   471  00000B                     __div_to_l_@cntr:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0xA
   475  00000B                     	ds	1
   476  00000C                     ___awdiv@sign:
   477                           	opt stack 0
   478  00000C                     ___awtoft@sign:
   479                           	opt stack 0
   480  00000C                     __div_to_l_@exp1:
   481                           	opt stack 0
   482  00000C                     ___ftdiv@f2:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0xB
   486  00000C                     	ds	1
   487  00000D                     ??___lltoft:
   488  00000D                     ___lldiv@counter:
   489                           	opt stack 0
   490  00000D                     ___awdiv@quotient:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0xC
   494  00000D                     	ds	1
   495  00000E                     __tdiv_to_l_@cntr:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0xD
   499  00000E                     	ds	1
   500  00000F                     ??___ftdiv:
   501  00000F                     ?___wmul:
   502                           	opt stack 0
   503  00000F                     __tdiv_to_l_@exp1:
   504                           	opt stack 0
   505  00000F                     ___wmul@multiplier:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0xE
   509  00000F                     	ds	2
   510  000011                     ___lltoft@exp:
   511                           	opt stack 0
   512  000011                     ___wmul@multiplicand:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x10
   516  000011                     	ds	1
   517  000012                     ___ftdiv@cntr:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x11
   521  000012                     	ds	1
   522  000013                     ___wmul@product:
   523                           	opt stack 0
   524  000013                     ___ftdiv@f3:
   525                           	opt stack 0
   526                           
   527                           ; 3 bytes @ 0x12
   528  000013                     	ds	2
   529  000015                     ?___ftmul:
   530                           	opt stack 0
   531  000015                     ___ftmul@f1:
   532                           	opt stack 0
   533                           
   534                           ; 3 bytes @ 0x14
   535  000015                     	ds	1
   536  000016                     ___ftdiv@exp:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x15
   540  000016                     	ds	1
   541  000017                     ___ftdiv@sign:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x16
   545  000017                     	ds	1
   546  000018                     ___ftmul@f2:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x17
   550  000018                     	ds	3
   551  00001B                     ??___ftmul:
   552                           
   553                           ; 1 bytes @ 0x1A
   554  00001B                     	ds	3
   555  00001E                     ___ftmul@exp:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x1D
   559  00001E                     	ds	1
   560  00001F                     ___ftmul@f3_as_product:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x1E
   564  00001F                     	ds	3
   565  000022                     ___ftmul@cntr:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x21
   569  000022                     	ds	1
   570  000023                     ___ftmul@sign:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x22
   574  000023                     	ds	1
   575  000024                     ?_fround:
   576                           	opt stack 0
   577  000024                     ?_scale:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x23
   581  000024                     	ds	3
   582  000027                     _fround$777:
   583                           	opt stack 0
   584  000027                     _scale$778:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0x26
   588  000027                     	ds	3
   589  00002A                     scale@scl:
   590                           	opt stack 0
   591  00002A                     _fround$776:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x29
   595  00002A                     	ds	1
   596  00002B                     ?___fttol:
   597                           	opt stack 0
   598  00002B                     ___fttol@f1:
   599                           	opt stack 0
   600                           
   601                           ; 3 bytes @ 0x2A
   602  00002B                     	ds	2
   603  00002D                     fround@prec:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x2C
   607  00002D                     	ds	1
   608  00002E                     ?___ftadd:
   609                           	opt stack 0
   610  00002E                     ___ftadd@f1:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x2D
   614  00002E                     	ds	1
   615  00002F                     ??___fttol:
   616                           
   617                           ; 1 bytes @ 0x2E
   618  00002F                     	ds	2
   619  000031                     ___ftadd@f2:
   620                           	opt stack 0
   621                           
   622                           ; 3 bytes @ 0x30
   623  000031                     	ds	3
   624  000034                     ??___ftadd:
   625  000034                     ___fttol@sign1:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x33
   629  000034                     	ds	1
   630  000035                     ___fttol@lval:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x34
   634  000035                     	ds	2
   635  000037                     ___ftadd@sign:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x36
   639  000037                     	ds	1
   640  000038                     ___ftadd@exp2:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x37
   644  000038                     	ds	1
   645  000039                     ___ftadd@exp1:
   646                           	opt stack 0
   647  000039                     ___fttol@exp1:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x38
   651  000039                     	ds	1
   652  00003A                     ?___ftsub:
   653                           	opt stack 0
   654  00003A                     ___ftsub@f1:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x39
   658  00003A                     	ds	3
   659  00003D                     ___ftsub@f2:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x3C
   663  00003D                     	ds	3
   664  000040                     ?_printf:
   665                           	opt stack 0
   666  000040                     printf@f:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x3F
   670  000040                     	ds	5
   671  000045                     ??_printf:
   672                           
   673                           ; 1 bytes @ 0x44
   674  000045                     	ds	6
   675  00004B                     tblptru	equ	0xFF8
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           
   679                           ; 1 bytes @ 0x4A
   680 ;;
   681 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   682 ;;
   683 ;; *************** function _main *****************
   684 ;; Defined at:
   685 ;;		line 160 in file "newmain.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;		None
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   699 ;;      Params:         0       0       0       0       0       0       0       0       0
   700 ;;      Locals:         0       0       0       0       0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0       0       0
   702 ;;      Totals:         0       0       0       0       0       0       0       0       0
   703 ;;Total ram usage:        0 bytes
   704 ;; Hardware stack levels required when called:    4
   705 ;; This function calls:
   706 ;;		___awtoft
   707 ;;		___ftadd
   708 ;;		___ftdiv
   709 ;;		___ftmul
   710 ;;		___ftneg
   711 ;;		_capturar_ad
   712 ;;		_inicializa_ad
   713 ;;		_inicializa_lcd
   714 ;;		_inicializa_pinos
   715 ;;		_posicionar_cursor
   716 ;;		_printf
   717 ;; This function is called by:
   718 ;;		Startup code after reset
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text0
   723  001BFA                     __ptext0:
   724                           	opt stack 0
   725  001BFA                     _main:
   726                           	opt stack 27
   727                           
   728                           ;newmain.c: 162: inicializa_pinos();
   729                           
   730                           ;incstack = 0
   731  001BFA  EC76  F012         	call	_inicializa_pinos	;wreg free
   732                           
   733                           ;newmain.c: 163: inicializa_lcd();
   734  001BFE  EC20  F012         	call	_inicializa_lcd	;wreg free
   735                           
   736                           ;newmain.c: 164: inicializa_ad();
   737  001C02  EC81  F012         	call	_inicializa_ad	;wreg free
   738                           
   739                           ;newmain.c: 165: printf("RESISTENCIA");
   740  001C06  0E77               	movlw	low STR_1
   741  001C08  6E40               	movwf	printf@f,c
   742  001C0A  0E08               	movlw	high STR_1
   743  001C0C  6E41               	movwf	printf@f+1,c
   744  001C0E  EC46  F004         	call	_printf	;wreg free
   745  001C12                     
   746                           ;newmain.c: 167: adc=capturar_ad();
   747  001C12  EC46  F012         	call	_capturar_ad	;wreg free
   748  001C16  C001  F05A         	movff	?_capturar_ad,_adc
   749  001C1A  C002  F05B         	movff	?_capturar_ad+1,_adc+1
   750                           
   751                           ;newmain.c: 168: Vrf=(float)adc*(5.0/1024.0);
   752  001C1E  C05A  F009         	movff	_adc,___awtoft@c
   753  001C22  C05B  F00A         	movff	_adc+1,___awtoft@c+1
   754  001C26  ECC6  F011         	call	___awtoft	;wreg free
   755  001C2A  C009  F015         	movff	?___awtoft,___ftmul@f1
   756  001C2E  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
   757  001C32  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
   758  001C36  0E00               	movlw	0
   759  001C38  6E18               	movwf	___ftmul@f2,c
   760  001C3A  0EA0               	movlw	160
   761  001C3C  6E19               	movwf	___ftmul@f2+1,c
   762  001C3E  0E3B               	movlw	59
   763  001C40  6E1A               	movwf	___ftmul@f2+2,c
   764  001C42  EC84  F00E         	call	___ftmul	;wreg free
   765  001C46  C015  F054         	movff	?___ftmul,_Vrf
   766  001C4A  C016  F055         	movff	?___ftmul+1,_Vrf+1
   767  001C4E  C017  F056         	movff	?___ftmul+2,_Vrf+2
   768                           
   769                           ;newmain.c: 169: Irf=Vrf/1000.0;
   770  001C52  C054  F009         	movff	_Vrf,___ftdiv@f1
   771  001C56  C055  F00A         	movff	_Vrf+1,___ftdiv@f1+1
   772  001C5A  C056  F00B         	movff	_Vrf+2,___ftdiv@f1+2
   773  001C5E  0E00               	movlw	0
   774  001C60  6E0C               	movwf	___ftdiv@f2,c
   775  001C62  0E7A               	movlw	122
   776  001C64  6E0D               	movwf	___ftdiv@f2+1,c
   777  001C66  0E44               	movlw	68
   778  001C68  6E0E               	movwf	___ftdiv@f2+2,c
   779  001C6A  EC78  F00F         	call	___ftdiv	;wreg free
   780  001C6E  C009  F04B         	movff	?___ftdiv,_Irf
   781  001C72  C00A  F04C         	movff	?___ftdiv+1,_Irf+1
   782  001C76  C00B  F04D         	movff	?___ftdiv+2,_Irf+2
   783                           
   784                           ;newmain.c: 170: Vrv=5.0-Vrf;
   785  001C7A  C054  F001         	movff	_Vrf,___ftneg@f1
   786  001C7E  C055  F002         	movff	_Vrf+1,___ftneg@f1+1
   787  001C82  C056  F003         	movff	_Vrf+2,___ftneg@f1+2
   788  001C86  EC59  F012         	call	___ftneg	;wreg free
   789  001C8A  C001  F02E         	movff	?___ftneg,___ftadd@f1
   790  001C8E  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
   791  001C92  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
   792  001C96  0E00               	movlw	0
   793  001C98  6E31               	movwf	___ftadd@f2,c
   794  001C9A  0EA0               	movlw	160
   795  001C9C  6E32               	movwf	___ftadd@f2+1,c
   796  001C9E  0E40               	movlw	64
   797  001CA0  6E33               	movwf	___ftadd@f2+2,c
   798  001CA2  ECFA  F00B         	call	___ftadd	;wreg free
   799  001CA6  C02E  F051         	movff	?___ftadd,_Vrv
   800  001CAA  C02F  F052         	movff	?___ftadd+1,_Vrv+1
   801  001CAE  C030  F053         	movff	?___ftadd+2,_Vrv+2
   802                           
   803                           ;newmain.c: 171: Rv=Vrv/Irf;
   804  001CB2  C051  F009         	movff	_Vrv,___ftdiv@f1
   805  001CB6  C052  F00A         	movff	_Vrv+1,___ftdiv@f1+1
   806  001CBA  C053  F00B         	movff	_Vrv+2,___ftdiv@f1+2
   807  001CBE  C04B  F00C         	movff	_Irf,___ftdiv@f2
   808  001CC2  C04C  F00D         	movff	_Irf+1,___ftdiv@f2+1
   809  001CC6  C04D  F00E         	movff	_Irf+2,___ftdiv@f2+2
   810  001CCA  EC78  F00F         	call	___ftdiv	;wreg free
   811  001CCE  C009  F057         	movff	?___ftdiv,_Rv
   812  001CD2  C00A  F058         	movff	?___ftdiv+1,_Rv+1
   813  001CD6  C00B  F059         	movff	?___ftdiv+2,_Rv+2
   814                           
   815                           ;newmain.c: 172: posicionar_cursor(2,1);
   816  001CDA  0E00               	movlw	0
   817  001CDC  6E05               	movwf	posicionar_cursor@linha+1,c
   818  001CDE  0E02               	movlw	2
   819  001CE0  6E04               	movwf	posicionar_cursor@linha,c
   820  001CE2  0E00               	movlw	0
   821  001CE4  6E07               	movwf	posicionar_cursor@coluna+1,c
   822  001CE6  0E01               	movlw	1
   823  001CE8  6E06               	movwf	posicionar_cursor@coluna,c
   824  001CEA  EC42  F009         	call	_posicionar_cursor	;wreg free
   825                           
   826                           ;newmain.c: 173: printf("%f ohms", Rv);
   827  001CEE  0E83               	movlw	low STR_2
   828  001CF0  6E40               	movwf	printf@f,c
   829  001CF2  0E08               	movlw	high STR_2
   830  001CF4  6E41               	movwf	printf@f+1,c
   831  001CF6  C057  F042         	movff	_Rv,?_printf+2
   832  001CFA  C058  F043         	movff	_Rv+1,?_printf+3
   833  001CFE  C059  F044         	movff	_Rv+2,?_printf+4
   834  001D02  EC46  F004         	call	_printf	;wreg free
   835  001D06  D785               	goto	l129
   836  001D08                     __end_of_main:
   837                           	opt stack 0
   838                           tblptru	equ	0xFF8
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           
   842 ;; *************** function _printf *****************
   843 ;; Defined at:
   844 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  f               2   63[COMRAM] PTR const unsigned char 
   847 ;;		 -> STR_2(8), STR_1(12), 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  tmpval          4   15[BANK0 ] struct .
   850 ;;  val             4    9[BANK0 ] unsigned long 
   851 ;;  fval            3   19[BANK0 ] unsigned long 
   852 ;;  cp              3    0        PTR const unsigned char 
   853 ;;  exp             2   13[BANK0 ] int 
   854 ;;  prec            2    7[BANK0 ] int 
   855 ;;  flag            2    5[BANK0 ] unsigned short 
   856 ;;  ap              2    3[BANK0 ] PTR void [1]
   857 ;;		 -> ?_printf(2), 
   858 ;;  len             2    0        unsigned int 
   859 ;;  width           2    0        int 
   860 ;;  c               1   22[BANK0 ] char 
   861 ;;  d               1    0        unsigned char 
   862 ;; Return value:  Size  Location     Type
   863 ;;                  2   63[COMRAM] int 
   864 ;; Registers used:
   865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   871 ;;      Params:         5       0       0       0       0       0       0       0       0
   872 ;;      Locals:         0      23       0       0       0       0       0       0       0
   873 ;;      Temps:          6       0       0       0       0       0       0       0       0
   874 ;;      Totals:        11      23       0       0       0       0       0       0       0
   875 ;;Total ram usage:       34 bytes
   876 ;; Hardware stack levels used:    1
   877 ;; Hardware stack levels required when called:    3
   878 ;; This function calls:
   879 ;;		___awdiv
   880 ;;		___ftadd
   881 ;;		___ftge
   882 ;;		___ftmul
   883 ;;		___ftneg
   884 ;;		___ftsub
   885 ;;		___fttol
   886 ;;		___lldiv
   887 ;;		___llmod
   888 ;;		___lltoft
   889 ;;		___wmul
   890 ;;		__div_to_l_
   891 ;;		__tdiv_to_l_
   892 ;;		_fround
   893 ;;		_putch
   894 ;;		_scale
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text1
   901  00088C                     __ptext1:
   902                           	opt stack 0
   903  00088C                     _printf:
   904                           	opt stack 27
   905                           
   906                           ;doprnt.c: 466: va_list ap;
   907                           ;doprnt.c: 499: signed char c;
   908                           ;doprnt.c: 501: int width;
   909                           ;doprnt.c: 504: int prec;
   910                           ;doprnt.c: 508: unsigned short flag;
   911                           ;doprnt.c: 515: char d;
   912                           ;doprnt.c: 516: double fval;
   913                           ;doprnt.c: 517: int exp;
   914                           ;doprnt.c: 523: union {
   915                           ;doprnt.c: 524: unsigned long vd;
   916                           ;doprnt.c: 525: double integ;
   917                           ;doprnt.c: 526: } tmpval;
   918                           ;doprnt.c: 528: unsigned long val;
   919                           ;doprnt.c: 529: unsigned len;
   920                           ;doprnt.c: 530: const char * cp;
   921                           ;doprnt.c: 533: *ap = __va_start();
   922                           
   923                           ;incstack = 0
   924  00088C  0E42               	movlw	low (?_printf+2)
   925  00088E  0100               	movlb	0	; () banked
   926  000890  6F63               	movwf	printf@ap& (0+255),b
   927  000892  0E00               	movlw	high (?_printf+2)
   928  000894  6F64               	movwf	(printf@ap+1)& (0+255),b
   929                           
   930                           ;doprnt.c: 536: while(c = *f++) {
   931  000896  D2E4               	goto	l213
   932  000898                     
   933                           ; BSR set to: 0
   934                           ;doprnt.c: 538: if(c != '%')
   935                           
   936                           ; BSR set to: 0
   937  000898  0E25               	movlw	37
   938  00089A  1976               	xorwf	printf@c& (0+255),w,b
   939  00089C  B4D8               	btfsc	status,2,c
   940  00089E  D004               	goto	l169
   941                           
   942                           ; BSR set to: 0
   943                           ;doprnt.c: 540: {
   944                           ;doprnt.c: 541: (putch(c) );
   945  0008A0  5176               	movf	printf@c& (0+255),w,b
   946  0008A2  EC88  F012         	call	_putch
   947                           
   948                           ;doprnt.c: 542: continue;
   949  0008A6  D2DC               	goto	l213
   950  0008A8                     l169:
   951                           
   952                           ;doprnt.c: 543: }
   953                           ;doprnt.c: 548: flag = 0;
   954  0008A8  0E00               	movlw	0
   955  0008AA  0100               	movlb	0	; () banked
   956  0008AC  6F66               	movwf	(printf@flag+1)& (0+255),b
   957  0008AE  0E00               	movlw	0
   958  0008B0  6F65               	movwf	printf@flag& (0+255),b
   959                           
   960                           ;doprnt.c: 635: switch(c = *f++) {
   961  0008B2  D002               	goto	l170
   962  0008B4                     
   963                           ; BSR set to: 0
   964                           ;doprnt.c: 663: flag |= 0x400;
   965                           
   966                           ; BSR set to: 0
   967  0008B4  8566               	bsf	(printf@flag+1)& (0+255),2,b
   968                           
   969                           ;doprnt.c: 664: break;
   970  0008B6  D011               	goto	l174
   971  0008B8                     l170:
   972                           
   973                           ; BSR set to: 0
   974                           
   975                           ; BSR set to: 0
   976  0008B8  C040  FFF6         	movff	printf@f,tblptrl
   977  0008BC  C041  FFF7         	movff	printf@f+1,tblptrh
   978  0008C0  4A40               	infsnz	printf@f,f,c
   979  0008C2  2A41               	incf	printf@f+1,f,c
   980  0008C4                     	if	0	;tblptru may be non-zero
   981  0008C4                     	endif
   982  0008C4                     	if	0	;tblptru may be non-zero
   983  0008C4                     	endif
   984  0008C4  0008               	tblrd		*
   985  0008C6  CFF5 F076          	movff	tablat,printf@c
   986  0008CA  5176               	movf	printf@c& (0+255),w,b
   987                           
   988                           ; Switch size 1, requested type "space"
   989                           ; Number of cases is 2, Range of values is 0 to 102
   990                           ; switch strategies available:
   991                           ; Name         Instructions Cycles
   992                           ; simple_byte            7     4 (average)
   993                           ;	Chosen strategy is simple_byte
   994  0008CC  0A00               	xorlw	0	; case 0
   995  0008CE  B4D8               	btfsc	status,2,c
   996  0008D0  0012               	return	
   997  0008D2  0A66               	xorlw	102	; case 102
   998  0008D4  B4D8               	btfsc	status,2,c
   999  0008D6  D7EE               	goto	l173
  1000  0008D8  D2C3               	goto	l213
  1001  0008DA                     l174:
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;doprnt.c: 825: if(flag & (0x700)) {
  1005                           
  1006                           ; BSR set to: 0
  1007  0008DA  0E07               	movlw	7
  1008  0008DC  1566               	andwf	(printf@flag+1)& (0+255),w,b
  1009  0008DE  B4D8               	btfsc	status,2,c
  1010  0008E0  D2B2               	goto	l176
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;doprnt.c: 829: prec = 6;
  1014  0008E2  0E00               	movlw	0
  1015  0008E4  6F68               	movwf	(printf@prec+1)& (0+255),b
  1016  0008E6  0E06               	movlw	6
  1017  0008E8  6F67               	movwf	printf@prec& (0+255),b
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1021  0008EA  C063  FFD9         	movff	printf@ap,fsr2l
  1022  0008EE  C064  FFDA         	movff	printf@ap+1,fsr2h
  1023  0008F2  CFDE F073          	movff	postinc2,printf@fval
  1024  0008F6  CFDE F074          	movff	postinc2,printf@fval+1
  1025  0008FA  CFDD F075          	movff	postdec2,printf@fval+2
  1026                           
  1027                           ; BSR set to: 0
  1028  0008FE  0E03               	movlw	3
  1029  000900  2763               	addwf	printf@ap& (0+255),f,b
  1030  000902  0E00               	movlw	0
  1031  000904  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  1032                           
  1033                           ; BSR set to: 0
  1034                           ;doprnt.c: 831: if(fval < 0.0) {
  1035  000906  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  1036  000908  D011               	goto	l177
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;doprnt.c: 832: fval = -fval;
  1040  00090A  C073  F001         	movff	printf@fval,___ftneg@f1
  1041  00090E  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  1042  000912  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  1043  000916  EC59  F012         	call	___ftneg	;wreg free
  1044  00091A  C001  F073         	movff	?___ftneg,printf@fval
  1045  00091E  C002  F074         	movff	?___ftneg+1,printf@fval+1
  1046  000922  C003  F075         	movff	?___ftneg+2,printf@fval+2
  1047                           
  1048                           ;doprnt.c: 833: flag |= 0x03;
  1049  000926  0E03               	movlw	3
  1050  000928  0100               	movlb	0	; () banked
  1051  00092A  1365               	iorwf	printf@flag& (0+255),f,b
  1052  00092C                     l177:
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;doprnt.c: 834: }
  1056                           ;doprnt.c: 835: exp = 0;
  1057                           
  1058                           ; BSR set to: 0
  1059  00092C  0E00               	movlw	0
  1060  00092E  6F6E               	movwf	(printf@exp+1)& (0+255),b
  1061  000930  0E00               	movlw	0
  1062  000932  6F6D               	movwf	printf@exp& (0+255),b
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;doprnt.c: 836: if( fval!=0) {
  1066  000934  5173               	movf	printf@fval& (0+255),w,b
  1067  000936  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1068  000938  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1069  00093A  B4D8               	btfsc	status,2,c
  1070  00093C  D086               	goto	l182
  1071                           
  1072                           ; BSR set to: 0
  1073                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1074  00093E  0E82               	movlw	130
  1075  000940  6E45               	movwf	??_printf& (0+255),c
  1076  000942  0EFF               	movlw	255
  1077  000944  6E46               	movwf	(??_printf+1)& (0+255),c
  1078  000946  C073  F047         	movff	printf@fval,??_printf+2
  1079  00094A  C074  F048         	movff	printf@fval+1,??_printf+3
  1080  00094E  C075  F049         	movff	printf@fval+2,??_printf+4
  1081  000952  C076  F04A         	movff	printf@fval+3,??_printf+5
  1082  000956  0E10               	movlw	16
  1083  000958  D005               	goto	u3510
  1084  00095A                     u3515:
  1085  00095A  90D8               	bcf	status,0,c
  1086  00095C  324A               	rrcf	??_printf+5,f,c
  1087  00095E  3249               	rrcf	??_printf+4,f,c
  1088  000960  3248               	rrcf	??_printf+3,f,c
  1089  000962  3247               	rrcf	??_printf+2,f,c
  1090  000964                     u3510:
  1091  000964  2EE8               	decfsz	wreg,f,c
  1092  000966  D7F9               	goto	u3515
  1093  000968  5047               	movf	??_printf+2,w,c
  1094  00096A  2445               	addwf	??_printf,w,c
  1095  00096C  6F6D               	movwf	printf@exp& (0+255),b
  1096  00096E  0E00               	movlw	0
  1097  000970  2046               	addwfc	??_printf+1,w,c
  1098  000972  6F6E               	movwf	(printf@exp+1)& (0+255),b
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;doprnt.c: 838: exp--;
  1102  000974  076D               	decf	printf@exp& (0+255),f,b
  1103  000976  A0D8               	btfss	status,0,c
  1104  000978  076E               	decf	(printf@exp+1)& (0+255),f,b
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;doprnt.c: 839: exp *= 3;
  1108  00097A  C06D  F00F         	movff	printf@exp,___wmul@multiplier
  1109  00097E  C06E  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1110  000982  0E00               	movlw	0
  1111  000984  6E12               	movwf	___wmul@multiplicand+1,c
  1112  000986  0E03               	movlw	3
  1113  000988  6E11               	movwf	___wmul@multiplicand,c
  1114  00098A  EC0D  F012         	call	___wmul	;wreg free
  1115  00098E  C00F  F06D         	movff	?___wmul,printf@exp
  1116  000992  C010  F06E         	movff	?___wmul+1,printf@exp+1
  1117                           
  1118                           ;doprnt.c: 840: exp /= 10;
  1119  000996  C06D  F007         	movff	printf@exp,___awdiv@dividend
  1120  00099A  C06E  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1121  00099E  0E00               	movlw	0
  1122  0009A0  6E0A               	movwf	___awdiv@divisor+1,c
  1123  0009A2  0E0A               	movlw	10
  1124  0009A4  6E09               	movwf	___awdiv@divisor,c
  1125  0009A6  EC8A  F010         	call	___awdiv	;wreg free
  1126  0009AA  C007  F06D         	movff	?___awdiv,printf@exp
  1127  0009AE  C008  F06E         	movff	?___awdiv+1,printf@exp+1
  1128                           
  1129                           ;doprnt.c: 841: if(exp < 0)
  1130  0009B2  0100               	movlb	0	; () banked
  1131  0009B4  AF6E               	btfss	(printf@exp+1)& (0+255),7,b
  1132  0009B6  D003               	goto	l179
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;doprnt.c: 842: exp--;
  1136  0009B8  076D               	decf	printf@exp& (0+255),f,b
  1137  0009BA  A0D8               	btfss	status,0,c
  1138  0009BC  076E               	decf	(printf@exp+1)& (0+255),f,b
  1139  0009BE                     l179:
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1143                           
  1144                           ; BSR set to: 0
  1145  0009BE  516D               	movf	printf@exp& (0+255),w,b
  1146  0009C0  0800               	sublw	0
  1147  0009C2  EC3E  F007         	call	_scale
  1148  0009C6  C024  F06F         	movff	?_scale,printf@tmpval
  1149  0009CA  C025  F070         	movff	?_scale+1,printf@tmpval+1
  1150  0009CE  C026  F071         	movff	?_scale+2,printf@tmpval+2
  1151                           
  1152                           ;doprnt.c: 847: tmpval.integ *= fval;
  1153  0009D2  C06F  F015         	movff	printf@tmpval,___ftmul@f1
  1154  0009D6  C070  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1155  0009DA  C071  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1156  0009DE  C073  F018         	movff	printf@fval,___ftmul@f2
  1157  0009E2  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  1158  0009E6  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1159  0009EA  EC84  F00E         	call	___ftmul	;wreg free
  1160  0009EE  C015  F06F         	movff	?___ftmul,printf@tmpval
  1161  0009F2  C016  F070         	movff	?___ftmul+1,printf@tmpval+1
  1162  0009F6  C017  F071         	movff	?___ftmul+2,printf@tmpval+2
  1163                           
  1164                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1165  0009FA  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  1166  0009FE  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1167  000A02  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1168  000A06  0E00               	movlw	0
  1169  000A08  6E04               	movwf	___ftge@ff2,c
  1170  000A0A  0E80               	movlw	128
  1171  000A0C  6E05               	movwf	___ftge@ff2+1,c
  1172  000A0E  0E3F               	movlw	63
  1173  000A10  6E06               	movwf	___ftge@ff2+2,c
  1174  000A12  EC42  F010         	call	___ftge	;wreg free
  1175  000A16  B0D8               	btfsc	status,0,c
  1176  000A18  D005               	goto	l180
  1177                           
  1178                           ;doprnt.c: 849: exp--;
  1179  000A1A  0100               	movlb	0	; () banked
  1180  000A1C  076D               	decf	printf@exp& (0+255),f,b
  1181  000A1E  A0D8               	btfss	status,0,c
  1182  000A20  076E               	decf	(printf@exp+1)& (0+255),f,b
  1183  000A22  D013               	goto	l182
  1184  000A24                     l180:
  1185                           
  1186                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1187                           
  1188                           ; BSR set to: 0
  1189  000A24  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  1190  000A28  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1191  000A2C  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1192  000A30  0E00               	movlw	0
  1193  000A32  6E04               	movwf	___ftge@ff2,c
  1194  000A34  0E20               	movlw	32
  1195  000A36  6E05               	movwf	___ftge@ff2+1,c
  1196  000A38  0E41               	movlw	65
  1197  000A3A  6E06               	movwf	___ftge@ff2+2,c
  1198  000A3C  EC42  F010         	call	___ftge	;wreg free
  1199  000A40  A0D8               	btfss	status,0,c
  1200  000A42  D003               	goto	l182
  1201                           
  1202                           ;doprnt.c: 851: exp++;
  1203  000A44  0100               	movlb	0	; () banked
  1204  000A46  4B6D               	infsnz	printf@exp& (0+255),f,b
  1205  000A48  2B6E               	incf	(printf@exp+1)& (0+255),f,b
  1206  000A4A                     l182:
  1207                           
  1208                           ;doprnt.c: 852: }
  1209                           ;doprnt.c: 1112: if(prec <= 12)
  1210                           
  1211                           ; BSR set to: 0
  1212                           
  1213                           ; BSR set to: 0
  1214                           
  1215                           ; BSR set to: 0
  1216  000A4A  0100               	movlb	0	; () banked
  1217  000A4C  BF68               	btfsc	(printf@prec+1)& (0+255),7,b
  1218  000A4E  D006               	goto	u3550
  1219  000A50  5168               	movf	(printf@prec+1)& (0+255),w,b
  1220  000A52  E11B               	bnz	l2743
  1221  000A54  0E0D               	movlw	13
  1222  000A56  5D67               	subwf	printf@prec& (0+255),w,b
  1223  000A58  B0D8               	btfsc	status,0,c
  1224  000A5A  D017               	goto	l183
  1225  000A5C                     u3550:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;doprnt.c: 1113: fval += fround(prec);
  1229  000A5C  C073  F02E         	movff	printf@fval,___ftadd@f1
  1230  000A60  C074  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1231  000A64  C075  F030         	movff	printf@fval+2,___ftadd@f1+2
  1232  000A68  5167               	movf	printf@prec& (0+255),w,b
  1233  000A6A  ECD1  F00A         	call	_fround
  1234  000A6E  C024  F031         	movff	?_fround,___ftadd@f2
  1235  000A72  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1236  000A76  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1237  000A7A  ECFA  F00B         	call	___ftadd	;wreg free
  1238  000A7E  C02E  F073         	movff	?___ftadd,printf@fval
  1239  000A82  C02F  F074         	movff	?___ftadd+1,printf@fval+1
  1240  000A86  C030  F075         	movff	?___ftadd+2,printf@fval+2
  1241  000A8A                     l183:
  1242  000A8A                     l2743:
  1243                           
  1244                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1245  000A8A  0100               	movlb	0	; () banked
  1246  000A8C  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  1247  000A8E  D006               	goto	u3560
  1248  000A90  516E               	movf	(printf@exp+1)& (0+255),w,b
  1249  000A92  E120               	bnz	l2751
  1250  000A94  0E0A               	movlw	10
  1251  000A96  5D6D               	subwf	printf@exp& (0+255),w,b
  1252  000A98  B0D8               	btfsc	status,0,c
  1253  000A9A  D01C               	goto	u3590
  1254  000A9C                     u3560:
  1255                           
  1256                           ; BSR set to: 0
  1257  000A9C  5173               	movf	printf@fval& (0+255),w,b
  1258  000A9E  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1259  000AA0  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1260  000AA2  B4D8               	btfsc	status,2,c
  1261  000AA4  D056               	goto	l184
  1262                           
  1263                           ; BSR set to: 0
  1264  000AA6  C073  F02B         	movff	printf@fval,___fttol@f1
  1265  000AAA  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  1266  000AAE  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  1267  000AB2  ECFE  F00E         	call	___fttol	;wreg free
  1268  000AB6  502B               	movf	?___fttol,w,c
  1269  000AB8  102C               	iorwf	?___fttol+1,w,c
  1270  000ABA  102D               	iorwf	?___fttol+2,w,c
  1271  000ABC  102E               	iorwf	?___fttol+3,w,c
  1272  000ABE  A4D8               	btfss	status,2,c
  1273  000AC0  D048               	goto	l184
  1274  000AC2  0100               	movlb	0	; () banked
  1275  000AC4  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  1276  000AC6  D045               	goto	l184
  1277  000AC8  516E               	movf	(printf@exp+1)& (0+255),w,b
  1278  000ACA  E104               	bnz	l2751
  1279  000ACC  0E02               	movlw	2
  1280  000ACE  5D6D               	subwf	printf@exp& (0+255),w,b
  1281  000AD0  A0D8               	btfss	status,0,c
  1282  000AD2  D03F               	goto	l184
  1283  000AD4                     u3590:
  1284  000AD4                     l2751:
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1288  000AD4  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  1289  000AD8  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1290  000ADC  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1291  000AE0  0E70               	movlw	112
  1292  000AE2  6E04               	movwf	___ftge@ff2,c
  1293  000AE4  0E89               	movlw	137
  1294  000AE6  6E05               	movwf	___ftge@ff2+1,c
  1295  000AE8  0E40               	movlw	64
  1296  000AEA  6E06               	movwf	___ftge@ff2+2,c
  1297  000AEC  EC42  F010         	call	___ftge	;wreg free
  1298  000AF0  B0D8               	btfsc	status,0,c
  1299  000AF2  D003               	goto	l187
  1300                           
  1301                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1302  000AF4  0100               	movlb	0	; () banked
  1303  000AF6  0EF7               	movlw	247
  1304  000AF8  D002               	goto	L1
  1305  000AFA                     l187:
  1306                           
  1307                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1308                           
  1309                           ; BSR set to: 0
  1310  000AFA  0100               	movlb	0	; () banked
  1311  000AFC  0EF8               	movlw	248
  1312  000AFE                     L1:
  1313  000AFE  276D               	addwf	printf@exp& (0+255),f,b
  1314  000B00  0EFF               	movlw	255
  1315  000B02  236E               	addwfc	(printf@exp+1)& (0+255),f,b
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;doprnt.c: 1124: }
  1319                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1320                           
  1321                           ; BSR set to: 0
  1322  000B04  516D               	movf	printf@exp& (0+255),w,b
  1323  000B06  EC3E  F007         	call	_scale
  1324  000B0A  C024  F06F         	movff	?_scale,printf@tmpval
  1325  000B0E  C025  F070         	movff	?_scale+1,printf@tmpval+1
  1326  000B12  C026  F071         	movff	?_scale+2,printf@tmpval+2
  1327                           
  1328                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1329  000B16  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1330  000B1A  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1331  000B1E  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1332  000B22  C06F  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1333  000B26  C070  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1334  000B2A  C071  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1335  000B2E  ECD0  F00C         	call	__tdiv_to_l_	;wreg free
  1336  000B32  C001  F069         	movff	?__tdiv_to_l_,printf@val
  1337  000B36  C002  F06A         	movff	?__tdiv_to_l_+1,printf@val+1
  1338  000B3A  C003  F06B         	movff	?__tdiv_to_l_+2,printf@val+2
  1339  000B3E  C004  F06C         	movff	?__tdiv_to_l_+3,printf@val+3
  1340                           
  1341                           ;doprnt.c: 1129: fval = 0.0;
  1342  000B42  0E00               	movlw	0
  1343  000B44  0100               	movlb	0	; () banked
  1344  000B46  6F73               	movwf	printf@fval& (0+255),b
  1345  000B48  0E00               	movlw	0
  1346  000B4A  6F74               	movwf	(printf@fval+1)& (0+255),b
  1347  000B4C  0E00               	movlw	0
  1348  000B4E  6F75               	movwf	(printf@fval+2)& (0+255),b
  1349                           
  1350                           ;doprnt.c: 1130: } else {
  1351  000B50  D033               	goto	l193
  1352  000B52                     l184:
  1353                           
  1354                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1355                           
  1356                           ; BSR set to: 0
  1357  000B52  C073  F02B         	movff	printf@fval,___fttol@f1
  1358  000B56  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  1359  000B5A  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  1360  000B5E  ECFE  F00E         	call	___fttol	;wreg free
  1361  000B62  C02B  F069         	movff	?___fttol,printf@val
  1362  000B66  C02C  F06A         	movff	?___fttol+1,printf@val+1
  1363  000B6A  C02D  F06B         	movff	?___fttol+2,printf@val+2
  1364  000B6E  C02E  F06C         	movff	?___fttol+3,printf@val+3
  1365                           
  1366                           ;doprnt.c: 1132: fval -= (double)val;
  1367  000B72  C073  F03A         	movff	printf@fval,___ftsub@f1
  1368  000B76  C074  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1369  000B7A  C075  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1370  000B7E  C069  F009         	movff	printf@val,___lltoft@c
  1371  000B82  C06A  F00A         	movff	printf@val+1,___lltoft@c+1
  1372  000B86  C06B  F00B         	movff	printf@val+2,___lltoft@c+2
  1373  000B8A  C06C  F00C         	movff	printf@val+3,___lltoft@c+3
  1374  000B8E  EC78  F011         	call	___lltoft	;wreg free
  1375  000B92  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1376  000B96  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1377  000B9A  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1378  000B9E  ECA6  F011         	call	___ftsub	;wreg free
  1379  000BA2  C03A  F073         	movff	?___ftsub,printf@fval
  1380  000BA6  C03B  F074         	movff	?___ftsub+1,printf@fval+1
  1381  000BAA  C03C  F075         	movff	?___ftsub+2,printf@fval+2
  1382                           
  1383                           ;doprnt.c: 1133: exp = 0;
  1384  000BAE  0E00               	movlw	0
  1385  000BB0  0100               	movlb	0	; () banked
  1386  000BB2  6F6E               	movwf	(printf@exp+1)& (0+255),b
  1387  000BB4  0E00               	movlw	0
  1388  000BB6  6F6D               	movwf	printf@exp& (0+255),b
  1389  000BB8                     l193:
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;doprnt.c: 1134: }
  1393                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1394                           
  1395                           ; BSR set to: 0
  1396  000BB8  0E01               	movlw	1
  1397  000BBA  6F76               	movwf	printf@c& (0+255),b
  1398  000BBC                     l2771:
  1399                           
  1400                           ; BSR set to: 0
  1401  000BBC  0E0A               	movlw	10
  1402  000BBE  1976               	xorwf	printf@c& (0+255),w,b
  1403  000BC0  B4D8               	btfsc	status,2,c
  1404  000BC2  D018               	goto	u3630
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;doprnt.c: 1137: if(val < dpowers[c])
  1408                           
  1409                           ; BSR set to: 0
  1410                           
  1411                           ; BSR set to: 0
  1412  000BC4  5176               	movf	printf@c& (0+255),w,b
  1413  000BC6  0D04               	mullw	4
  1414  000BC8  0E01               	movlw	low _dpowers
  1415  000BCA  24F3               	addwf	prodl,w,c
  1416  000BCC  6EF6               	movwf	tblptrl,c
  1417  000BCE  0E08               	movlw	high _dpowers
  1418  000BD0  20F4               	addwfc	prodh,w,c
  1419  000BD2  6EF7               	movwf	tblptrh,c
  1420  000BD4                     	if	0	;There are less than 3 active tblptr bytes
  1421  000BD4                     	endif
  1422  000BD4  0009               	tblrd		*+
  1423  000BD6  50F5               	movf	tablat,w,c
  1424  000BD8  5D69               	subwf	printf@val& (0+255),w,b
  1425  000BDA  0009               	tblrd		*+
  1426  000BDC  50F5               	movf	tablat,w,c
  1427  000BDE  596A               	subwfb	(printf@val+1)& (0+255),w,b
  1428  000BE0  0009               	tblrd		*+
  1429  000BE2  50F5               	movf	tablat,w,c
  1430  000BE4  596B               	subwfb	(printf@val+2)& (0+255),w,b
  1431  000BE6  0009               	tblrd		*+
  1432  000BE8  50F5               	movf	tablat,w,c
  1433  000BEA  596C               	subwfb	(printf@val+3)& (0+255),w,b
  1434  000BEC  A0D8               	btfss	status,0,c
  1435  000BEE  D002               	goto	u3630
  1436                           
  1437                           ; BSR set to: 0
  1438                           
  1439                           ; BSR set to: 0
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;doprnt.c: 1138: break;
  1443  000BF0  2B76               	incf	printf@c& (0+255),f,b
  1444  000BF2  D7E4               	goto	l2771
  1445  000BF4                     u3630:
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;doprnt.c: 1175: {
  1449                           ;doprnt.c: 1188: if(flag & 0x03)
  1450                           
  1451                           ; BSR set to: 0
  1452  000BF4  0E03               	movlw	3
  1453  000BF6  1565               	andwf	printf@flag& (0+255),w,b
  1454  000BF8  6E45               	movwf	??_printf& (0+255),c
  1455  000BFA  0E00               	movlw	0
  1456  000BFC  1566               	andwf	(printf@flag+1)& (0+255),w,b
  1457  000BFE  6E46               	movwf	(??_printf+1)& (0+255),c
  1458  000C00  5045               	movf	??_printf,w,c
  1459  000C02  1046               	iorwf	??_printf+1,w,c
  1460  000C04  B4D8               	btfsc	status,2,c
  1461  000C06  D04A               	goto	l198
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;doprnt.c: 1190: (putch('-') );
  1465  000C08  0E2D               	movlw	45
  1466  000C0A  EC88  F012         	call	_putch
  1467                           
  1468                           ;doprnt.c: 1195: }
  1469                           ;doprnt.c: 1196: while(c--) {
  1470  000C0E  D046               	goto	l198
  1471  000C10                     
  1472                           ;doprnt.c: 1200: {
  1473                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1474  000C10  C069  F001         	movff	printf@val,___lldiv@dividend
  1475  000C14  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  1476  000C18  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  1477  000C1C  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  1478  000C20  0100               	movlb	0	; () banked
  1479  000C22  5176               	movf	printf@c& (0+255),w,b
  1480  000C24  0D04               	mullw	4
  1481  000C26  0E01               	movlw	low _dpowers
  1482  000C28  24F3               	addwf	prodl,w,c
  1483  000C2A  6EF6               	movwf	tblptrl,c
  1484  000C2C  0E08               	movlw	high _dpowers
  1485  000C2E  20F4               	addwfc	prodh,w,c
  1486  000C30  6EF7               	movwf	tblptrh,c
  1487  000C32                     	if	0	;There are less than 3 active tblptr bytes
  1488  000C32                     	endif
  1489  000C32  0009               	tblrd		*+
  1490  000C34  CFF5 F005          	movff	tablat,___lldiv@divisor
  1491  000C38  0009               	tblrd		*+
  1492  000C3A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1493  000C3E  0009               	tblrd		*+
  1494  000C40  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1495  000C44  000A               	tblrd		*-
  1496  000C46  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1497  000C4A  ECCC  F010         	call	___lldiv	;wreg free
  1498  000C4E  C001  F06F         	movff	?___lldiv,printf@tmpval
  1499  000C52  C002  F070         	movff	?___lldiv+1,printf@tmpval+1
  1500  000C56  C003  F071         	movff	?___lldiv+2,printf@tmpval+2
  1501  000C5A  C004  F072         	movff	?___lldiv+3,printf@tmpval+3
  1502                           
  1503                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1504  000C5E  C06F  F001         	movff	printf@tmpval,___llmod@dividend
  1505  000C62  C070  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1506  000C66  C071  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1507  000C6A  C072  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1508  000C6E  0E0A               	movlw	10
  1509  000C70  6E05               	movwf	___llmod@divisor,c
  1510  000C72  0E00               	movlw	0
  1511  000C74  6E06               	movwf	___llmod@divisor+1,c
  1512  000C76  0E00               	movlw	0
  1513  000C78  6E07               	movwf	___llmod@divisor+2,c
  1514  000C7A  0E00               	movlw	0
  1515  000C7C  6E08               	movwf	___llmod@divisor+3,c
  1516  000C7E  EC45  F011         	call	___llmod	;wreg free
  1517  000C82  C001  F06F         	movff	?___llmod,printf@tmpval
  1518  000C86  C002  F070         	movff	?___llmod+1,printf@tmpval+1
  1519  000C8A  C003  F071         	movff	?___llmod+2,printf@tmpval+2
  1520  000C8E  C004  F072         	movff	?___llmod+3,printf@tmpval+3
  1521                           
  1522                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1523  000C92  0100               	movlb	0	; () banked
  1524  000C94  516F               	movf	printf@tmpval& (0+255),w,b
  1525  000C96  0F30               	addlw	48
  1526  000C98  EC88  F012         	call	_putch
  1527  000C9C                     l198:
  1528  000C9C  0100               	movlb	0	; () banked
  1529  000C9E  0776               	decf	printf@c& (0+255),f,b
  1530  000CA0  2976               	incf	printf@c& (0+255),w,b
  1531  000CA2  B4D8               	btfsc	status,2,c
  1532  000CA4  D008               	goto	l201
  1533  000CA6  D7B4               	goto	l199
  1534  000CA8                     l2795:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;doprnt.c: 1208: (putch('0') );
  1538  000CA8  0E30               	movlw	48
  1539  000CAA  EC88  F012         	call	_putch
  1540                           
  1541                           ;doprnt.c: 1209: exp--;
  1542  000CAE  0100               	movlb	0	; () banked
  1543  000CB0  076D               	decf	printf@exp& (0+255),f,b
  1544  000CB2  A0D8               	btfss	status,0,c
  1545  000CB4  076E               	decf	(printf@exp+1)& (0+255),f,b
  1546  000CB6                     l201:
  1547                           
  1548                           ; BSR set to: 0
  1549                           
  1550                           ; BSR set to: 0
  1551  000CB6  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  1552  000CB8  D005               	goto	u3660
  1553  000CBA  516E               	movf	(printf@exp+1)& (0+255),w,b
  1554  000CBC  E1F5               	bnz	l2795
  1555  000CBE  056D               	decf	printf@exp& (0+255),w,b
  1556  000CC0  B0D8               	btfsc	status,0,c
  1557  000CC2  D7F2               	goto	l202
  1558  000CC4                     u3660:
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;doprnt.c: 1210: }
  1562                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1563                           
  1564                           ; BSR set to: 0
  1565  000CC4  BF68               	btfsc	(printf@prec+1)& (0+255),7,b
  1566  000CC6  D009               	goto	l204
  1567  000CC8  5168               	movf	(printf@prec+1)& (0+255),w,b
  1568  000CCA  E104               	bnz	u3670
  1569  000CCC  0E09               	movlw	9
  1570  000CCE  5D67               	subwf	printf@prec& (0+255),w,b
  1571  000CD0  A0D8               	btfss	status,0,c
  1572  000CD2  D003               	goto	l204
  1573  000CD4                     u3670:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1577  000CD4  0E08               	movlw	8
  1578  000CD6  6F76               	movwf	printf@c& (0+255),b
  1579  000CD8  D002               	goto	l205
  1580  000CDA                     l204:
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;doprnt.c: 1213: else
  1584                           ;doprnt.c: 1214: c = prec;
  1585  000CDA  C067  F076         	movff	printf@prec,printf@c
  1586  000CDE                     l205:
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;doprnt.c: 1215: prec -= c;
  1590                           
  1591                           ; BSR set to: 0
  1592  000CDE  5176               	movf	printf@c& (0+255),w,b
  1593  000CE0  5F67               	subwf	printf@prec& (0+255),f,b
  1594  000CE2  0E00               	movlw	0
  1595  000CE4  BF76               	btfsc	printf@c& (0+255),7,b
  1596  000CE6  0EFF               	movlw	255
  1597  000CE8  5B68               	subwfb	(printf@prec+1)& (0+255),f,b
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;doprnt.c: 1219: if(c)
  1601  000CEA  5176               	movf	printf@c& (0+255),w,b
  1602  000CEC  B4D8               	btfsc	status,2,c
  1603  000CEE  D003               	goto	l206
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;doprnt.c: 1221: (putch('.') );
  1607  000CF0  0E2E               	movlw	46
  1608  000CF2  EC88  F012         	call	_putch
  1609  000CF6                     l206:
  1610                           
  1611                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1612  000CF6  0100               	movlb	0	; () banked
  1613  000CF8  5176               	movf	printf@c& (0+255),w,b
  1614  000CFA  EC3E  F007         	call	_scale
  1615  000CFE  C024  F060         	movff	?_scale,_printf$779
  1616  000D02  C025  F061         	movff	?_scale+1,_printf$779+1
  1617  000D06  C026  F062         	movff	?_scale+2,_printf$779+2
  1618                           
  1619                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1620  000D0A  C073  F018         	movff	printf@fval,___ftmul@f2
  1621  000D0E  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  1622  000D12  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1623  000D16  C060  F015         	movff	_printf$779,___ftmul@f1
  1624  000D1A  C061  F016         	movff	_printf$779+1,___ftmul@f1+1
  1625  000D1E  C062  F017         	movff	_printf$779+2,___ftmul@f1+2
  1626  000D22  EC84  F00E         	call	___ftmul	;wreg free
  1627  000D26  C015  F02B         	movff	?___ftmul,___fttol@f1
  1628  000D2A  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1629  000D2E  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1630  000D32  ECFE  F00E         	call	___fttol	;wreg free
  1631  000D36  C02B  F069         	movff	?___fttol,printf@val
  1632  000D3A  C02C  F06A         	movff	?___fttol+1,printf@val+1
  1633  000D3E  C02D  F06B         	movff	?___fttol+2,printf@val+2
  1634  000D42  C02E  F06C         	movff	?___fttol+3,printf@val+3
  1635                           
  1636                           ;doprnt.c: 1228: while(c--) {
  1637  000D46  D06D               	goto	l207
  1638  000D48                     
  1639                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1640  000D48  C069  F001         	movff	printf@val,___lldiv@dividend
  1641  000D4C  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  1642  000D50  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  1643  000D54  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  1644  000D58  0100               	movlb	0	; () banked
  1645  000D5A  5176               	movf	printf@c& (0+255),w,b
  1646  000D5C  0D04               	mullw	4
  1647  000D5E  0E01               	movlw	low _dpowers
  1648  000D60  24F3               	addwf	prodl,w,c
  1649  000D62  6EF6               	movwf	tblptrl,c
  1650  000D64  0E08               	movlw	high _dpowers
  1651  000D66  20F4               	addwfc	prodh,w,c
  1652  000D68  6EF7               	movwf	tblptrh,c
  1653  000D6A                     	if	0	;There are less than 3 active tblptr bytes
  1654  000D6A                     	endif
  1655  000D6A  0009               	tblrd		*+
  1656  000D6C  CFF5 F005          	movff	tablat,___lldiv@divisor
  1657  000D70  0009               	tblrd		*+
  1658  000D72  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1659  000D76  0009               	tblrd		*+
  1660  000D78  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1661  000D7C  000A               	tblrd		*-
  1662  000D7E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1663  000D82  ECCC  F010         	call	___lldiv	;wreg free
  1664  000D86  C001  F06F         	movff	?___lldiv,printf@tmpval
  1665  000D8A  C002  F070         	movff	?___lldiv+1,printf@tmpval+1
  1666  000D8E  C003  F071         	movff	?___lldiv+2,printf@tmpval+2
  1667  000D92  C004  F072         	movff	?___lldiv+3,printf@tmpval+3
  1668                           
  1669                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1670  000D96  C06F  F001         	movff	printf@tmpval,___llmod@dividend
  1671  000D9A  C070  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1672  000D9E  C071  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1673  000DA2  C072  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1674  000DA6  0E0A               	movlw	10
  1675  000DA8  6E05               	movwf	___llmod@divisor,c
  1676  000DAA  0E00               	movlw	0
  1677  000DAC  6E06               	movwf	___llmod@divisor+1,c
  1678  000DAE  0E00               	movlw	0
  1679  000DB0  6E07               	movwf	___llmod@divisor+2,c
  1680  000DB2  0E00               	movlw	0
  1681  000DB4  6E08               	movwf	___llmod@divisor+3,c
  1682  000DB6  EC45  F011         	call	___llmod	;wreg free
  1683  000DBA  C001  F06F         	movff	?___llmod,printf@tmpval
  1684  000DBE  C002  F070         	movff	?___llmod+1,printf@tmpval+1
  1685  000DC2  C003  F071         	movff	?___llmod+2,printf@tmpval+2
  1686  000DC6  C004  F072         	movff	?___llmod+3,printf@tmpval+3
  1687                           
  1688                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1689  000DCA  0100               	movlb	0	; () banked
  1690  000DCC  516F               	movf	printf@tmpval& (0+255),w,b
  1691  000DCE  0F30               	addlw	48
  1692  000DD0  EC88  F012         	call	_putch
  1693                           
  1694                           ;doprnt.c: 1232: val %= dpowers[c];
  1695  000DD4  C069  F001         	movff	printf@val,___llmod@dividend
  1696  000DD8  C06A  F002         	movff	printf@val+1,___llmod@dividend+1
  1697  000DDC  C06B  F003         	movff	printf@val+2,___llmod@dividend+2
  1698  000DE0  C06C  F004         	movff	printf@val+3,___llmod@dividend+3
  1699  000DE4  0100               	movlb	0	; () banked
  1700  000DE6  5176               	movf	printf@c& (0+255),w,b
  1701  000DE8  0D04               	mullw	4
  1702  000DEA  0E01               	movlw	low _dpowers
  1703  000DEC  24F3               	addwf	prodl,w,c
  1704  000DEE  6EF6               	movwf	tblptrl,c
  1705  000DF0  0E08               	movlw	high _dpowers
  1706  000DF2  20F4               	addwfc	prodh,w,c
  1707  000DF4  6EF7               	movwf	tblptrh,c
  1708  000DF6                     	if	0	;There are less than 3 active tblptr bytes
  1709  000DF6                     	endif
  1710  000DF6  0009               	tblrd		*+
  1711  000DF8  CFF5 F005          	movff	tablat,___llmod@divisor
  1712  000DFC  0009               	tblrd		*+
  1713  000DFE  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1714  000E02  0009               	tblrd		*+
  1715  000E04  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1716  000E08  000A               	tblrd		*-
  1717  000E0A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1718  000E0E  EC45  F011         	call	___llmod	;wreg free
  1719  000E12  C001  F069         	movff	?___llmod,printf@val
  1720  000E16  C002  F06A         	movff	?___llmod+1,printf@val+1
  1721  000E1A  C003  F06B         	movff	?___llmod+2,printf@val+2
  1722  000E1E  C004  F06C         	movff	?___llmod+3,printf@val+3
  1723  000E22                     l207:
  1724  000E22  0100               	movlb	0	; () banked
  1725  000E24  0776               	decf	printf@c& (0+255),f,b
  1726  000E26  2976               	incf	printf@c& (0+255),w,b
  1727  000E28  B4D8               	btfsc	status,2,c
  1728  000E2A  D008               	goto	l210
  1729  000E2C  D78D               	goto	l208
  1730  000E2E                     
  1731                           ; BSR set to: 0
  1732                           ;doprnt.c: 1236: (putch('0') );
  1733                           
  1734                           ; BSR set to: 0
  1735  000E2E  0E30               	movlw	48
  1736  000E30  EC88  F012         	call	_putch
  1737                           
  1738                           ;doprnt.c: 1237: prec--;
  1739  000E34  0100               	movlb	0	; () banked
  1740  000E36  0767               	decf	printf@prec& (0+255),f,b
  1741  000E38  A0D8               	btfss	status,0,c
  1742  000E3A  0768               	decf	(printf@prec+1)& (0+255),f,b
  1743  000E3C                     l210:
  1744                           
  1745                           ; BSR set to: 0
  1746                           
  1747                           ; BSR set to: 0
  1748  000E3C  5167               	movf	printf@prec& (0+255),w,b
  1749  000E3E  1168               	iorwf	(printf@prec+1)& (0+255),w,b
  1750  000E40  B4D8               	btfsc	status,2,c
  1751  000E42  D00E               	goto	l213
  1752  000E44  D7F4               	goto	l211
  1753  000E46                     l176:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;doprnt.c: 1246: }
  1757                           ;doprnt.c: 1422: {
  1758                           ;doprnt.c: 1438: if(flag & 0x03)
  1759                           
  1760                           ; BSR set to: 0
  1761  000E46  0E03               	movlw	3
  1762  000E48  1565               	andwf	printf@flag& (0+255),w,b
  1763  000E4A  6E45               	movwf	??_printf& (0+255),c
  1764  000E4C  0E00               	movlw	0
  1765  000E4E  1566               	andwf	(printf@flag+1)& (0+255),w,b
  1766  000E50  6E46               	movwf	(??_printf+1)& (0+255),c
  1767  000E52  5045               	movf	??_printf,w,c
  1768  000E54  1046               	iorwf	??_printf+1,w,c
  1769  000E56  B4D8               	btfsc	status,2,c
  1770  000E58  D003               	goto	l213
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;doprnt.c: 1439: (putch('-') );
  1774  000E5A  0E2D               	movlw	45
  1775  000E5C  EC88  F012         	call	_putch
  1776  000E60                     l213:
  1777  000E60  C040  FFF6         	movff	printf@f,tblptrl
  1778  000E64  C041  FFF7         	movff	printf@f+1,tblptrh
  1779  000E68  4A40               	infsnz	printf@f,f,c
  1780  000E6A  2A41               	incf	printf@f+1,f,c
  1781  000E6C                     	if	0	;tblptru may be non-zero
  1782  000E6C                     	endif
  1783  000E6C                     	if	0	;tblptru may be non-zero
  1784  000E6C                     	endif
  1785  000E6C  0008               	tblrd		*
  1786  000E6E  CFF5 F076          	movff	tablat,printf@c
  1787  000E72  0100               	movlb	0	; () banked
  1788  000E74  5176               	movf	printf@c& (0+255),w,b
  1789  000E76  B4D8               	btfsc	status,2,c
  1790  000E78  0012               	return	
  1791  000E7A  D50E               	goto	l168
  1792  000E7C                     __end_of_printf:
  1793                           	opt stack 0
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           prodh	equ	0xFF4
  1799                           prodl	equ	0xFF3
  1800                           postinc0	equ	0xFEE
  1801                           wreg	equ	0xFE8
  1802                           postinc2	equ	0xFDE
  1803                           postdec2	equ	0xFDD
  1804                           fsr2h	equ	0xFDA
  1805                           fsr2l	equ	0xFD9
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _scale *****************
  1809 ;; Defined at:
  1810 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  scl             1    wreg     char 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;  scl             1   41[COMRAM] char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  3   35[COMRAM] char 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1824 ;;      Params:         3       0       0       0       0       0       0       0       0
  1825 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1827 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1828 ;;Total ram usage:        7 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    2
  1831 ;; This function calls:
  1832 ;;		___awdiv
  1833 ;;		___awmod
  1834 ;;		___ftmul
  1835 ;;		___wmul
  1836 ;; This function is called by:
  1837 ;;		_printf
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text2
  1842  000E7C                     __ptext2:
  1843                           	opt stack 0
  1844  000E7C                     _scale:
  1845                           	opt stack 27
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;incstack = 0
  1849                           ;scale@scl stored from wreg
  1850  000E7C  6E2A               	movwf	scale@scl,c
  1851                           
  1852                           ;doprnt.c: 428: if(scl < 0) {
  1853  000E7E  AE2A               	btfss	scale@scl,7,c
  1854  000E80  D101               	goto	l157
  1855                           
  1856                           ;doprnt.c: 429: scl = -scl;
  1857  000E82  6C2A               	negf	scale@scl,c
  1858                           
  1859                           ;doprnt.c: 430: if(scl>=110)
  1860  000E84  502A               	movf	scale@scl,w,c
  1861  000E86  0A80               	xorlw	128
  1862  000E88  0F12               	addlw	-238
  1863  000E8A  A0D8               	btfss	status,0,c
  1864  000E8C  D091               	goto	l158
  1865                           
  1866                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1867  000E8E  0E00               	movlw	0
  1868  000E90  6E12               	movwf	___wmul@multiplicand+1,c
  1869  000E92  0E03               	movlw	3
  1870  000E94  6E11               	movwf	___wmul@multiplicand,c
  1871  000E96  0E00               	movlw	0
  1872  000E98  6E0A               	movwf	___awdiv@divisor+1,c
  1873  000E9A  0E0A               	movlw	10
  1874  000E9C  6E09               	movwf	___awdiv@divisor,c
  1875  000E9E  0E00               	movlw	0
  1876  000EA0  6E04               	movwf	___awmod@divisor+1,c
  1877  000EA2  0E64               	movlw	100
  1878  000EA4  6E03               	movwf	___awmod@divisor,c
  1879  000EA6  502A               	movf	scale@scl,w,c
  1880  000EA8  6E01               	movwf	___awmod@dividend,c
  1881  000EAA  6A02               	clrf	___awmod@dividend+1,c
  1882  000EAC  BE01               	btfsc	___awmod@dividend,7,c
  1883  000EAE  0602               	decf	___awmod@dividend+1,f,c
  1884  000EB0  EC0D  F011         	call	___awmod	;wreg free
  1885  000EB4  C001  F007         	movff	?___awmod,___awdiv@dividend
  1886  000EB8  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  1887  000EBC  EC8A  F010         	call	___awdiv	;wreg free
  1888  000EC0  0E09               	movlw	9
  1889  000EC2  2407               	addwf	?___awdiv,w,c
  1890  000EC4  6E0F               	movwf	___wmul@multiplier,c
  1891  000EC6  0E00               	movlw	0
  1892  000EC8  2008               	addwfc	?___awdiv+1,w,c
  1893  000ECA  6E10               	movwf	___wmul@multiplier+1,c
  1894  000ECC  EC0D  F012         	call	___wmul	;wreg free
  1895  000ED0  0E50               	movlw	low __npowers_
  1896  000ED2  240F               	addwf	?___wmul,w,c
  1897  000ED4  6EF6               	movwf	tblptrl,c
  1898  000ED6  0E08               	movlw	high __npowers_
  1899  000ED8  2010               	addwfc	?___wmul+1,w,c
  1900  000EDA  6EF7               	movwf	tblptrh,c
  1901  000EDC                     	if	0	;There are less than 3 active tblptr bytes
  1902  000EDC                     	endif
  1903  000EDC  0009               	tblrd		*+
  1904  000EDE  CFF5 F018          	movff	tablat,___ftmul@f2
  1905  000EE2  0009               	tblrd		*+
  1906  000EE4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1907  000EE8  000A               	tblrd		*-
  1908  000EEA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1909  000EEE  0E00               	movlw	0
  1910  000EF0  6E0A               	movwf	___awdiv@divisor+1,c
  1911  000EF2  0E64               	movlw	100
  1912  000EF4  6E09               	movwf	___awdiv@divisor,c
  1913  000EF6  502A               	movf	scale@scl,w,c
  1914  000EF8  6E07               	movwf	___awdiv@dividend,c
  1915  000EFA  6A08               	clrf	___awdiv@dividend+1,c
  1916  000EFC  BE07               	btfsc	___awdiv@dividend,7,c
  1917  000EFE  0608               	decf	___awdiv@dividend+1,f,c
  1918  000F00  EC8A  F010         	call	___awdiv	;wreg free
  1919  000F04  0E12               	movlw	18
  1920  000F06  2407               	addwf	?___awdiv,w,c
  1921  000F08  6E0F               	movwf	___wmul@multiplier,c
  1922  000F0A  0E00               	movlw	0
  1923  000F0C  2008               	addwfc	?___awdiv+1,w,c
  1924  000F0E  6E10               	movwf	___wmul@multiplier+1,c
  1925  000F10  0E00               	movlw	0
  1926  000F12  6E12               	movwf	___wmul@multiplicand+1,c
  1927  000F14  0E03               	movlw	3
  1928  000F16  6E11               	movwf	___wmul@multiplicand,c
  1929  000F18  EC0D  F012         	call	___wmul	;wreg free
  1930  000F1C  0E50               	movlw	low __npowers_
  1931  000F1E  240F               	addwf	?___wmul,w,c
  1932  000F20  6EF6               	movwf	tblptrl,c
  1933  000F22  0E08               	movlw	high __npowers_
  1934  000F24  2010               	addwfc	?___wmul+1,w,c
  1935  000F26  6EF7               	movwf	tblptrh,c
  1936  000F28                     	if	0	;There are less than 3 active tblptr bytes
  1937  000F28                     	endif
  1938  000F28  0009               	tblrd		*+
  1939  000F2A  CFF5 F015          	movff	tablat,___ftmul@f1
  1940  000F2E  0009               	tblrd		*+
  1941  000F30  CFF5 F016          	movff	tablat,___ftmul@f1+1
  1942  000F34  000A               	tblrd		*-
  1943  000F36  CFF5 F017          	movff	tablat,___ftmul@f1+2
  1944  000F3A  EC84  F00E         	call	___ftmul	;wreg free
  1945  000F3E  C015  F027         	movff	?___ftmul,_scale$778
  1946  000F42  C016  F028         	movff	?___ftmul+1,_scale$778+1
  1947  000F46  C017  F029         	movff	?___ftmul+2,_scale$778+2
  1948                           
  1949                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1950  000F4A  C027  F015         	movff	_scale$778,___ftmul@f1
  1951  000F4E  C028  F016         	movff	_scale$778+1,___ftmul@f1+1
  1952  000F52  C029  F017         	movff	_scale$778+2,___ftmul@f1+2
  1953  000F56  0E00               	movlw	0
  1954  000F58  6E12               	movwf	___wmul@multiplicand+1,c
  1955  000F5A  0E03               	movlw	3
  1956  000F5C  6E11               	movwf	___wmul@multiplicand,c
  1957  000F5E  0E00               	movlw	0
  1958  000F60  6E04               	movwf	___awmod@divisor+1,c
  1959  000F62  0E0A               	movlw	10
  1960  000F64  6E03               	movwf	___awmod@divisor,c
  1961  000F66  502A               	movf	scale@scl,w,c
  1962  000F68  6E01               	movwf	___awmod@dividend,c
  1963  000F6A  6A02               	clrf	___awmod@dividend+1,c
  1964  000F6C  BE01               	btfsc	___awmod@dividend,7,c
  1965  000F6E  0602               	decf	___awmod@dividend+1,f,c
  1966  000F70  EC0D  F011         	call	___awmod	;wreg free
  1967  000F74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  1968  000F78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  1969  000F7C  EC0D  F012         	call	___wmul	;wreg free
  1970  000F80  0E50               	movlw	low __npowers_
  1971  000F82  240F               	addwf	?___wmul,w,c
  1972  000F84  6EF6               	movwf	tblptrl,c
  1973  000F86  0E08               	movlw	high __npowers_
  1974  000F88  2010               	addwfc	?___wmul+1,w,c
  1975  000F8A  6EF7               	movwf	tblptrh,c
  1976  000F8C                     	if	0	;There are less than 3 active tblptr bytes
  1977  000F8C                     	endif
  1978  000F8C  0009               	tblrd		*+
  1979  000F8E  CFF5 F018          	movff	tablat,___ftmul@f2
  1980  000F92  0009               	tblrd		*+
  1981  000F94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1982  000F98  000A               	tblrd		*-
  1983  000F9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1984  000F9E  EC84  F00E         	call	___ftmul	;wreg free
  1985  000FA2  C015  F024         	movff	?___ftmul,?_scale
  1986  000FA6  C016  F025         	movff	?___ftmul+1,?_scale+1
  1987  000FAA  C017  F026         	movff	?___ftmul+2,?_scale+2
  1988  000FAE  0012               	return	
  1989  000FB0                     l158:
  1990                           
  1991                           ;doprnt.c: 432: else if(scl > 10)
  1992  000FB0  502A               	movf	scale@scl,w,c
  1993  000FB2  0A80               	xorlw	128
  1994  000FB4  0F75               	addlw	-139
  1995  000FB6  A0D8               	btfss	status,0,c
  1996  000FB8  D053               	goto	l161
  1997                           
  1998                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  1999  000FBA  0E00               	movlw	0
  2000  000FBC  6E0A               	movwf	___awdiv@divisor+1,c
  2001  000FBE  0E0A               	movlw	10
  2002  000FC0  6E09               	movwf	___awdiv@divisor,c
  2003  000FC2  502A               	movf	scale@scl,w,c
  2004  000FC4  6E07               	movwf	___awdiv@dividend,c
  2005  000FC6  6A08               	clrf	___awdiv@dividend+1,c
  2006  000FC8  BE07               	btfsc	___awdiv@dividend,7,c
  2007  000FCA  0608               	decf	___awdiv@dividend+1,f,c
  2008  000FCC  EC8A  F010         	call	___awdiv	;wreg free
  2009  000FD0  0E09               	movlw	9
  2010  000FD2  2407               	addwf	?___awdiv,w,c
  2011  000FD4  6E0F               	movwf	___wmul@multiplier,c
  2012  000FD6  0E00               	movlw	0
  2013  000FD8  2008               	addwfc	?___awdiv+1,w,c
  2014  000FDA  6E10               	movwf	___wmul@multiplier+1,c
  2015  000FDC  0E00               	movlw	0
  2016  000FDE  6E12               	movwf	___wmul@multiplicand+1,c
  2017  000FE0  0E03               	movlw	3
  2018  000FE2  6E11               	movwf	___wmul@multiplicand,c
  2019  000FE4  EC0D  F012         	call	___wmul	;wreg free
  2020  000FE8  0E50               	movlw	low __npowers_
  2021  000FEA  240F               	addwf	?___wmul,w,c
  2022  000FEC  6EF6               	movwf	tblptrl,c
  2023  000FEE  0E08               	movlw	high __npowers_
  2024  000FF0  2010               	addwfc	?___wmul+1,w,c
  2025  000FF2  6EF7               	movwf	tblptrh,c
  2026  000FF4                     	if	0	;There are less than 3 active tblptr bytes
  2027  000FF4                     	endif
  2028  000FF4  0009               	tblrd		*+
  2029  000FF6  CFF5 F015          	movff	tablat,___ftmul@f1
  2030  000FFA  0009               	tblrd		*+
  2031  000FFC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2032  001000  000A               	tblrd		*-
  2033  001002  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2034  001006  0E00               	movlw	0
  2035  001008  6E12               	movwf	___wmul@multiplicand+1,c
  2036  00100A  0E03               	movlw	3
  2037  00100C  6E11               	movwf	___wmul@multiplicand,c
  2038  00100E  0E00               	movlw	0
  2039  001010  6E04               	movwf	___awmod@divisor+1,c
  2040  001012  0E0A               	movlw	10
  2041  001014  6E03               	movwf	___awmod@divisor,c
  2042  001016  502A               	movf	scale@scl,w,c
  2043  001018  6E01               	movwf	___awmod@dividend,c
  2044  00101A  6A02               	clrf	___awmod@dividend+1,c
  2045  00101C  BE01               	btfsc	___awmod@dividend,7,c
  2046  00101E  0602               	decf	___awmod@dividend+1,f,c
  2047  001020  EC0D  F011         	call	___awmod	;wreg free
  2048  001024  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2049  001028  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2050  00102C  EC0D  F012         	call	___wmul	;wreg free
  2051  001030  0E50               	movlw	low __npowers_
  2052  001032  240F               	addwf	?___wmul,w,c
  2053  001034  6EF6               	movwf	tblptrl,c
  2054  001036  0E08               	movlw	high __npowers_
  2055  001038  2010               	addwfc	?___wmul+1,w,c
  2056  00103A  6EF7               	movwf	tblptrh,c
  2057  00103C                     	if	0	;There are less than 3 active tblptr bytes
  2058  00103C                     	endif
  2059  00103C  0009               	tblrd		*+
  2060  00103E  CFF5 F018          	movff	tablat,___ftmul@f2
  2061  001042  0009               	tblrd		*+
  2062  001044  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2063  001048  000A               	tblrd		*-
  2064  00104A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2065  00104E  EC84  F00E         	call	___ftmul	;wreg free
  2066  001052  C015  F024         	movff	?___ftmul,?_scale
  2067  001056  C016  F025         	movff	?___ftmul+1,?_scale+1
  2068  00105A  C017  F026         	movff	?___ftmul+2,?_scale+2
  2069  00105E  0012               	return	
  2070  001060                     l161:
  2071                           
  2072                           ;doprnt.c: 434: return _npowers_[scl];
  2073  001060  502A               	movf	scale@scl,w,c
  2074  001062  0D03               	mullw	3
  2075  001064  0E50               	movlw	low __npowers_
  2076  001066  24F3               	addwf	prodl,w,c
  2077  001068  6EF6               	movwf	tblptrl,c
  2078  00106A  0E08               	movlw	high __npowers_
  2079  00106C  20F4               	addwfc	prodh,w,c
  2080  00106E  6EF7               	movwf	tblptrh,c
  2081  001070                     	if	0	;There are less than 3 active tblptr bytes
  2082  001070                     	endif
  2083  001070  0009               	tblrd		*+
  2084  001072  CFF5 F024          	movff	tablat,?_scale
  2085  001076  0009               	tblrd		*+
  2086  001078  CFF5 F025          	movff	tablat,?_scale+1
  2087  00107C  000A               	tblrd		*-
  2088  00107E  CFF5 F026          	movff	tablat,?_scale+2
  2089  001082  0012               	return	
  2090  001084                     l157:
  2091                           
  2092                           ;doprnt.c: 435: }
  2093                           ;doprnt.c: 436: if(scl>=110)
  2094  001084  502A               	movf	scale@scl,w,c
  2095  001086  0A80               	xorlw	128
  2096  001088  0F12               	addlw	-238
  2097  00108A  A0D8               	btfss	status,0,c
  2098  00108C  D091               	goto	l162
  2099                           
  2100                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2101  00108E  0E00               	movlw	0
  2102  001090  6E12               	movwf	___wmul@multiplicand+1,c
  2103  001092  0E03               	movlw	3
  2104  001094  6E11               	movwf	___wmul@multiplicand,c
  2105  001096  0E00               	movlw	0
  2106  001098  6E0A               	movwf	___awdiv@divisor+1,c
  2107  00109A  0E0A               	movlw	10
  2108  00109C  6E09               	movwf	___awdiv@divisor,c
  2109  00109E  0E00               	movlw	0
  2110  0010A0  6E04               	movwf	___awmod@divisor+1,c
  2111  0010A2  0E64               	movlw	100
  2112  0010A4  6E03               	movwf	___awmod@divisor,c
  2113  0010A6  502A               	movf	scale@scl,w,c
  2114  0010A8  6E01               	movwf	___awmod@dividend,c
  2115  0010AA  6A02               	clrf	___awmod@dividend+1,c
  2116  0010AC  BE01               	btfsc	___awmod@dividend,7,c
  2117  0010AE  0602               	decf	___awmod@dividend+1,f,c
  2118  0010B0  EC0D  F011         	call	___awmod	;wreg free
  2119  0010B4  C001  F007         	movff	?___awmod,___awdiv@dividend
  2120  0010B8  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2121  0010BC  EC8A  F010         	call	___awdiv	;wreg free
  2122  0010C0  0E09               	movlw	9
  2123  0010C2  2407               	addwf	?___awdiv,w,c
  2124  0010C4  6E0F               	movwf	___wmul@multiplier,c
  2125  0010C6  0E00               	movlw	0
  2126  0010C8  2008               	addwfc	?___awdiv+1,w,c
  2127  0010CA  6E10               	movwf	___wmul@multiplier+1,c
  2128  0010CC  EC0D  F012         	call	___wmul	;wreg free
  2129  0010D0  0E29               	movlw	low __powers_
  2130  0010D2  240F               	addwf	?___wmul,w,c
  2131  0010D4  6EF6               	movwf	tblptrl,c
  2132  0010D6  0E08               	movlw	high __powers_
  2133  0010D8  2010               	addwfc	?___wmul+1,w,c
  2134  0010DA  6EF7               	movwf	tblptrh,c
  2135  0010DC                     	if	0	;There are less than 3 active tblptr bytes
  2136  0010DC                     	endif
  2137  0010DC  0009               	tblrd		*+
  2138  0010DE  CFF5 F018          	movff	tablat,___ftmul@f2
  2139  0010E2  0009               	tblrd		*+
  2140  0010E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2141  0010E8  000A               	tblrd		*-
  2142  0010EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2143  0010EE  0E00               	movlw	0
  2144  0010F0  6E0A               	movwf	___awdiv@divisor+1,c
  2145  0010F2  0E64               	movlw	100
  2146  0010F4  6E09               	movwf	___awdiv@divisor,c
  2147  0010F6  502A               	movf	scale@scl,w,c
  2148  0010F8  6E07               	movwf	___awdiv@dividend,c
  2149  0010FA  6A08               	clrf	___awdiv@dividend+1,c
  2150  0010FC  BE07               	btfsc	___awdiv@dividend,7,c
  2151  0010FE  0608               	decf	___awdiv@dividend+1,f,c
  2152  001100  EC8A  F010         	call	___awdiv	;wreg free
  2153  001104  0E12               	movlw	18
  2154  001106  2407               	addwf	?___awdiv,w,c
  2155  001108  6E0F               	movwf	___wmul@multiplier,c
  2156  00110A  0E00               	movlw	0
  2157  00110C  2008               	addwfc	?___awdiv+1,w,c
  2158  00110E  6E10               	movwf	___wmul@multiplier+1,c
  2159  001110  0E00               	movlw	0
  2160  001112  6E12               	movwf	___wmul@multiplicand+1,c
  2161  001114  0E03               	movlw	3
  2162  001116  6E11               	movwf	___wmul@multiplicand,c
  2163  001118  EC0D  F012         	call	___wmul	;wreg free
  2164  00111C  0E29               	movlw	low __powers_
  2165  00111E  240F               	addwf	?___wmul,w,c
  2166  001120  6EF6               	movwf	tblptrl,c
  2167  001122  0E08               	movlw	high __powers_
  2168  001124  2010               	addwfc	?___wmul+1,w,c
  2169  001126  6EF7               	movwf	tblptrh,c
  2170  001128                     	if	0	;There are less than 3 active tblptr bytes
  2171  001128                     	endif
  2172  001128  0009               	tblrd		*+
  2173  00112A  CFF5 F015          	movff	tablat,___ftmul@f1
  2174  00112E  0009               	tblrd		*+
  2175  001130  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2176  001134  000A               	tblrd		*-
  2177  001136  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2178  00113A  EC84  F00E         	call	___ftmul	;wreg free
  2179  00113E  C015  F027         	movff	?___ftmul,_scale$778
  2180  001142  C016  F028         	movff	?___ftmul+1,_scale$778+1
  2181  001146  C017  F029         	movff	?___ftmul+2,_scale$778+2
  2182                           
  2183                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2184  00114A  C027  F015         	movff	_scale$778,___ftmul@f1
  2185  00114E  C028  F016         	movff	_scale$778+1,___ftmul@f1+1
  2186  001152  C029  F017         	movff	_scale$778+2,___ftmul@f1+2
  2187  001156  0E00               	movlw	0
  2188  001158  6E12               	movwf	___wmul@multiplicand+1,c
  2189  00115A  0E03               	movlw	3
  2190  00115C  6E11               	movwf	___wmul@multiplicand,c
  2191  00115E  0E00               	movlw	0
  2192  001160  6E04               	movwf	___awmod@divisor+1,c
  2193  001162  0E0A               	movlw	10
  2194  001164  6E03               	movwf	___awmod@divisor,c
  2195  001166  502A               	movf	scale@scl,w,c
  2196  001168  6E01               	movwf	___awmod@dividend,c
  2197  00116A  6A02               	clrf	___awmod@dividend+1,c
  2198  00116C  BE01               	btfsc	___awmod@dividend,7,c
  2199  00116E  0602               	decf	___awmod@dividend+1,f,c
  2200  001170  EC0D  F011         	call	___awmod	;wreg free
  2201  001174  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2202  001178  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2203  00117C  EC0D  F012         	call	___wmul	;wreg free
  2204  001180  0E29               	movlw	low __powers_
  2205  001182  240F               	addwf	?___wmul,w,c
  2206  001184  6EF6               	movwf	tblptrl,c
  2207  001186  0E08               	movlw	high __powers_
  2208  001188  2010               	addwfc	?___wmul+1,w,c
  2209  00118A  6EF7               	movwf	tblptrh,c
  2210  00118C                     	if	0	;There are less than 3 active tblptr bytes
  2211  00118C                     	endif
  2212  00118C  0009               	tblrd		*+
  2213  00118E  CFF5 F018          	movff	tablat,___ftmul@f2
  2214  001192  0009               	tblrd		*+
  2215  001194  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2216  001198  000A               	tblrd		*-
  2217  00119A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2218  00119E  EC84  F00E         	call	___ftmul	;wreg free
  2219  0011A2  C015  F024         	movff	?___ftmul,?_scale
  2220  0011A6  C016  F025         	movff	?___ftmul+1,?_scale+1
  2221  0011AA  C017  F026         	movff	?___ftmul+2,?_scale+2
  2222  0011AE  0012               	return	
  2223  0011B0                     l162:
  2224                           
  2225                           ;doprnt.c: 438: else if(scl > 10)
  2226  0011B0  502A               	movf	scale@scl,w,c
  2227  0011B2  0A80               	xorlw	128
  2228  0011B4  0F75               	addlw	-139
  2229  0011B6  A0D8               	btfss	status,0,c
  2230  0011B8  D053               	goto	l164
  2231                           
  2232                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2233  0011BA  0E00               	movlw	0
  2234  0011BC  6E0A               	movwf	___awdiv@divisor+1,c
  2235  0011BE  0E0A               	movlw	10
  2236  0011C0  6E09               	movwf	___awdiv@divisor,c
  2237  0011C2  502A               	movf	scale@scl,w,c
  2238  0011C4  6E07               	movwf	___awdiv@dividend,c
  2239  0011C6  6A08               	clrf	___awdiv@dividend+1,c
  2240  0011C8  BE07               	btfsc	___awdiv@dividend,7,c
  2241  0011CA  0608               	decf	___awdiv@dividend+1,f,c
  2242  0011CC  EC8A  F010         	call	___awdiv	;wreg free
  2243  0011D0  0E09               	movlw	9
  2244  0011D2  2407               	addwf	?___awdiv,w,c
  2245  0011D4  6E0F               	movwf	___wmul@multiplier,c
  2246  0011D6  0E00               	movlw	0
  2247  0011D8  2008               	addwfc	?___awdiv+1,w,c
  2248  0011DA  6E10               	movwf	___wmul@multiplier+1,c
  2249  0011DC  0E00               	movlw	0
  2250  0011DE  6E12               	movwf	___wmul@multiplicand+1,c
  2251  0011E0  0E03               	movlw	3
  2252  0011E2  6E11               	movwf	___wmul@multiplicand,c
  2253  0011E4  EC0D  F012         	call	___wmul	;wreg free
  2254  0011E8  0E29               	movlw	low __powers_
  2255  0011EA  240F               	addwf	?___wmul,w,c
  2256  0011EC  6EF6               	movwf	tblptrl,c
  2257  0011EE  0E08               	movlw	high __powers_
  2258  0011F0  2010               	addwfc	?___wmul+1,w,c
  2259  0011F2  6EF7               	movwf	tblptrh,c
  2260  0011F4                     	if	0	;There are less than 3 active tblptr bytes
  2261  0011F4                     	endif
  2262  0011F4  0009               	tblrd		*+
  2263  0011F6  CFF5 F015          	movff	tablat,___ftmul@f1
  2264  0011FA  0009               	tblrd		*+
  2265  0011FC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2266  001200  000A               	tblrd		*-
  2267  001202  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2268  001206  0E00               	movlw	0
  2269  001208  6E12               	movwf	___wmul@multiplicand+1,c
  2270  00120A  0E03               	movlw	3
  2271  00120C  6E11               	movwf	___wmul@multiplicand,c
  2272  00120E  0E00               	movlw	0
  2273  001210  6E04               	movwf	___awmod@divisor+1,c
  2274  001212  0E0A               	movlw	10
  2275  001214  6E03               	movwf	___awmod@divisor,c
  2276  001216  502A               	movf	scale@scl,w,c
  2277  001218  6E01               	movwf	___awmod@dividend,c
  2278  00121A  6A02               	clrf	___awmod@dividend+1,c
  2279  00121C  BE01               	btfsc	___awmod@dividend,7,c
  2280  00121E  0602               	decf	___awmod@dividend+1,f,c
  2281  001220  EC0D  F011         	call	___awmod	;wreg free
  2282  001224  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2283  001228  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2284  00122C  EC0D  F012         	call	___wmul	;wreg free
  2285  001230  0E29               	movlw	low __powers_
  2286  001232  240F               	addwf	?___wmul,w,c
  2287  001234  6EF6               	movwf	tblptrl,c
  2288  001236  0E08               	movlw	high __powers_
  2289  001238  2010               	addwfc	?___wmul+1,w,c
  2290  00123A  6EF7               	movwf	tblptrh,c
  2291  00123C                     	if	0	;There are less than 3 active tblptr bytes
  2292  00123C                     	endif
  2293  00123C  0009               	tblrd		*+
  2294  00123E  CFF5 F018          	movff	tablat,___ftmul@f2
  2295  001242  0009               	tblrd		*+
  2296  001244  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2297  001248  000A               	tblrd		*-
  2298  00124A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2299  00124E  EC84  F00E         	call	___ftmul	;wreg free
  2300  001252  C015  F024         	movff	?___ftmul,?_scale
  2301  001256  C016  F025         	movff	?___ftmul+1,?_scale+1
  2302  00125A  C017  F026         	movff	?___ftmul+2,?_scale+2
  2303  00125E  0012               	return	
  2304  001260                     l164:
  2305                           
  2306                           ;doprnt.c: 440: return _powers_[scl];
  2307  001260  502A               	movf	scale@scl,w,c
  2308  001262  0D03               	mullw	3
  2309  001264  0E29               	movlw	low __powers_
  2310  001266  24F3               	addwf	prodl,w,c
  2311  001268  6EF6               	movwf	tblptrl,c
  2312  00126A  0E08               	movlw	high __powers_
  2313  00126C  20F4               	addwfc	prodh,w,c
  2314  00126E  6EF7               	movwf	tblptrh,c
  2315  001270                     	if	0	;There are less than 3 active tblptr bytes
  2316  001270                     	endif
  2317  001270  0009               	tblrd		*+
  2318  001272  CFF5 F024          	movff	tablat,?_scale
  2319  001276  0009               	tblrd		*+
  2320  001278  CFF5 F025          	movff	tablat,?_scale+1
  2321  00127C  000A               	tblrd		*-
  2322  00127E  CFF5 F026          	movff	tablat,?_scale+2
  2323  001282  0012               	return	
  2324  001284                     __end_of_scale:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           prodh	equ	0xFF4
  2331                           prodl	equ	0xFF3
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           postinc2	equ	0xFDE
  2335                           postdec2	equ	0xFDD
  2336                           fsr2h	equ	0xFDA
  2337                           fsr2l	equ	0xFD9
  2338                           status	equ	0xFD8
  2339                           
  2340 ;; *************** function _putch *****************
  2341 ;; Defined at:
  2342 ;;		line 67 in file "newmain.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  x               1    wreg     unsigned char 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;  x               1    3[COMRAM] unsigned char 
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1    wreg      void 
  2349 ;; Registers used:
  2350 ;;		wreg, status,2, status,0, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2356 ;;      Params:         0       0       0       0       0       0       0       0       0
  2357 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2359 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2360 ;;Total ram usage:        1 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    2
  2363 ;; This function calls:
  2364 ;;		_escrever_lcd
  2365 ;; This function is called by:
  2366 ;;		_printf
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text3
  2371  002510                     __ptext3:
  2372                           	opt stack 0
  2373  002510                     _putch:
  2374                           	opt stack 27
  2375                           
  2376                           ;incstack = 0
  2377                           ;putch@x stored from wreg
  2378  002510  6E04               	movwf	putch@x,c
  2379                           
  2380                           ;newmain.c: 69: escrever_lcd(x);
  2381  002512  5004               	movf	putch@x,w,c
  2382  002514  ECFA  F011         	call	_escrever_lcd
  2383  002518  0012               	return		;funcret
  2384  00251A                     __end_of_putch:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           postinc0	equ	0xFEE
  2393                           wreg	equ	0xFE8
  2394                           postinc2	equ	0xFDE
  2395                           postdec2	equ	0xFDD
  2396                           fsr2h	equ	0xFDA
  2397                           fsr2l	equ	0xFD9
  2398                           status	equ	0xFD8
  2399                           
  2400 ;; *************** function _escrever_lcd *****************
  2401 ;; Defined at:
  2402 ;;		line 57 in file "newmain.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  valor           1    wreg     unsigned char 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  valor           1    2[COMRAM] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      void 
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2416 ;;      Params:         0       0       0       0       0       0       0       0       0
  2417 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2419 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2420 ;;Total ram usage:        1 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    1
  2423 ;; This function calls:
  2424 ;;		_delay_ms
  2425 ;; This function is called by:
  2426 ;;		_putch
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text4
  2431  0023F4                     __ptext4:
  2432                           	opt stack 0
  2433  0023F4                     _escrever_lcd:
  2434                           	opt stack 27
  2435                           
  2436                           ;incstack = 0
  2437                           ;escrever_lcd@valor stored from wreg
  2438  0023F4  6E03               	movwf	escrever_lcd@valor,c
  2439                           
  2440                           ;newmain.c: 59: PORTD = valor;
  2441  0023F6  C003  FF83         	movff	escrever_lcd@valor,3971	;volatile
  2442                           
  2443                           ;newmain.c: 60: PORTCbits.RC0 = 1;
  2444  0023FA  8082               	bsf	3970,0,c	;volatile
  2445                           
  2446                           ;newmain.c: 61: PORTCbits.RC1 = 1;
  2447  0023FC  8282               	bsf	3970,1,c	;volatile
  2448                           
  2449                           ;newmain.c: 62: delay_ms(1);
  2450  0023FE  0E00               	movlw	0
  2451  002400  6E02               	movwf	delay_ms@tempo+1,c
  2452  002402  0E01               	movlw	1
  2453  002404  6E01               	movwf	delay_ms@tempo,c
  2454  002406  ECE2  F011         	call	_delay_ms	;wreg free
  2455                           
  2456                           ;newmain.c: 63: PORTCbits.RC1 = 0;
  2457  00240A  9282               	bcf	3970,1,c	;volatile
  2458                           
  2459                           ;newmain.c: 64: delay_ms(1);
  2460  00240C  0E00               	movlw	0
  2461  00240E  6E02               	movwf	delay_ms@tempo+1,c
  2462  002410  0E01               	movlw	1
  2463  002412  6E01               	movwf	delay_ms@tempo,c
  2464  002414  ECE2  F011         	call	_delay_ms	;wreg free
  2465  002418  0012               	return		;funcret
  2466  00241A                     __end_of_escrever_lcd:
  2467                           	opt stack 0
  2468                           tblptru	equ	0xFF8
  2469                           tblptrh	equ	0xFF7
  2470                           tblptrl	equ	0xFF6
  2471                           tablat	equ	0xFF5
  2472                           prodh	equ	0xFF4
  2473                           prodl	equ	0xFF3
  2474                           postinc0	equ	0xFEE
  2475                           wreg	equ	0xFE8
  2476                           postinc2	equ	0xFDE
  2477                           postdec2	equ	0xFDD
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _fround *****************
  2483 ;; Defined at:
  2484 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  prec            1    wreg     unsigned char 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  prec            1   44[COMRAM] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  3   35[COMRAM] unsigned char 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2498 ;;      Params:         3       0       0       0       0       0       0       0       0
  2499 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2501 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2502 ;;Total ram usage:       10 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    2
  2505 ;; This function calls:
  2506 ;;		___awdiv
  2507 ;;		___awmod
  2508 ;;		___ftmul
  2509 ;;		___wmul
  2510 ;; This function is called by:
  2511 ;;		_printf
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           	psect	text5
  2516  0015A2                     __ptext5:
  2517                           	opt stack 0
  2518  0015A2                     _fround:
  2519                           	opt stack 27
  2520                           
  2521                           ;incstack = 0
  2522                           ;fround@prec stored from wreg
  2523  0015A2  6E2D               	movwf	fround@prec,c
  2524                           
  2525                           ;doprnt.c: 413: if(prec>=110)
  2526  0015A4  0E6D               	movlw	109
  2527  0015A6  642D               	cpfsgt	fround@prec,c
  2528  0015A8  D09F               	goto	l151
  2529                           
  2530                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2531  0015AA  0E00               	movlw	0
  2532  0015AC  6E12               	movwf	___wmul@multiplicand+1,c
  2533  0015AE  0E03               	movlw	3
  2534  0015B0  6E11               	movwf	___wmul@multiplicand,c
  2535  0015B2  0E00               	movlw	0
  2536  0015B4  6E0A               	movwf	___awdiv@divisor+1,c
  2537  0015B6  0E0A               	movlw	10
  2538  0015B8  6E09               	movwf	___awdiv@divisor,c
  2539  0015BA  0E00               	movlw	0
  2540  0015BC  6E04               	movwf	___awmod@divisor+1,c
  2541  0015BE  0E64               	movlw	100
  2542  0015C0  6E03               	movwf	___awmod@divisor,c
  2543  0015C2  C02D  F001         	movff	fround@prec,___awmod@dividend
  2544  0015C6  6A02               	clrf	___awmod@dividend+1,c
  2545  0015C8  EC0D  F011         	call	___awmod	;wreg free
  2546  0015CC  C001  F007         	movff	?___awmod,___awdiv@dividend
  2547  0015D0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2548  0015D4  EC8A  F010         	call	___awdiv	;wreg free
  2549  0015D8  0E09               	movlw	9
  2550  0015DA  2407               	addwf	?___awdiv,w,c
  2551  0015DC  6E0F               	movwf	___wmul@multiplier,c
  2552  0015DE  0E00               	movlw	0
  2553  0015E0  2008               	addwfc	?___awdiv+1,w,c
  2554  0015E2  6E10               	movwf	___wmul@multiplier+1,c
  2555  0015E4  EC0D  F012         	call	___wmul	;wreg free
  2556  0015E8  0E50               	movlw	low __npowers_
  2557  0015EA  240F               	addwf	?___wmul,w,c
  2558  0015EC  6EF6               	movwf	tblptrl,c
  2559  0015EE  0E08               	movlw	high __npowers_
  2560  0015F0  2010               	addwfc	?___wmul+1,w,c
  2561  0015F2  6EF7               	movwf	tblptrh,c
  2562  0015F4                     	if	0	;There are less than 3 active tblptr bytes
  2563  0015F4                     	endif
  2564  0015F4  0009               	tblrd		*+
  2565  0015F6  CFF5 F018          	movff	tablat,___ftmul@f2
  2566  0015FA  0009               	tblrd		*+
  2567  0015FC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2568  001600  000A               	tblrd		*-
  2569  001602  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2570  001606  0E00               	movlw	0
  2571  001608  6E0A               	movwf	___awdiv@divisor+1,c
  2572  00160A  0E64               	movlw	100
  2573  00160C  6E09               	movwf	___awdiv@divisor,c
  2574  00160E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2575  001612  6A08               	clrf	___awdiv@dividend+1,c
  2576  001614  EC8A  F010         	call	___awdiv	;wreg free
  2577  001618  0E12               	movlw	18
  2578  00161A  2407               	addwf	?___awdiv,w,c
  2579  00161C  6E0F               	movwf	___wmul@multiplier,c
  2580  00161E  0E00               	movlw	0
  2581  001620  2008               	addwfc	?___awdiv+1,w,c
  2582  001622  6E10               	movwf	___wmul@multiplier+1,c
  2583  001624  0E00               	movlw	0
  2584  001626  6E12               	movwf	___wmul@multiplicand+1,c
  2585  001628  0E03               	movlw	3
  2586  00162A  6E11               	movwf	___wmul@multiplicand,c
  2587  00162C  EC0D  F012         	call	___wmul	;wreg free
  2588  001630  0E50               	movlw	low __npowers_
  2589  001632  240F               	addwf	?___wmul,w,c
  2590  001634  6EF6               	movwf	tblptrl,c
  2591  001636  0E08               	movlw	high __npowers_
  2592  001638  2010               	addwfc	?___wmul+1,w,c
  2593  00163A  6EF7               	movwf	tblptrh,c
  2594  00163C                     	if	0	;There are less than 3 active tblptr bytes
  2595  00163C                     	endif
  2596  00163C  0009               	tblrd		*+
  2597  00163E  CFF5 F015          	movff	tablat,___ftmul@f1
  2598  001642  0009               	tblrd		*+
  2599  001644  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2600  001648  000A               	tblrd		*-
  2601  00164A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2602  00164E  EC84  F00E         	call	___ftmul	;wreg free
  2603  001652  C015  F02A         	movff	?___ftmul,_fround$776
  2604  001656  C016  F02B         	movff	?___ftmul+1,_fround$776+1
  2605  00165A  C017  F02C         	movff	?___ftmul+2,_fround$776+2
  2606                           
  2607                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2608  00165E  0E00               	movlw	0
  2609  001660  6E12               	movwf	___wmul@multiplicand+1,c
  2610  001662  0E03               	movlw	3
  2611  001664  6E11               	movwf	___wmul@multiplicand,c
  2612  001666  0E00               	movlw	0
  2613  001668  6E04               	movwf	___awmod@divisor+1,c
  2614  00166A  0E0A               	movlw	10
  2615  00166C  6E03               	movwf	___awmod@divisor,c
  2616  00166E  C02D  F001         	movff	fround@prec,___awmod@dividend
  2617  001672  6A02               	clrf	___awmod@dividend+1,c
  2618  001674  EC0D  F011         	call	___awmod	;wreg free
  2619  001678  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2620  00167C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2621  001680  EC0D  F012         	call	___wmul	;wreg free
  2622  001684  0E50               	movlw	low __npowers_
  2623  001686  240F               	addwf	?___wmul,w,c
  2624  001688  6EF6               	movwf	tblptrl,c
  2625  00168A  0E08               	movlw	high __npowers_
  2626  00168C  2010               	addwfc	?___wmul+1,w,c
  2627  00168E  6EF7               	movwf	tblptrh,c
  2628  001690                     	if	0	;There are less than 3 active tblptr bytes
  2629  001690                     	endif
  2630  001690  0009               	tblrd		*+
  2631  001692  CFF5 F018          	movff	tablat,___ftmul@f2
  2632  001696  0009               	tblrd		*+
  2633  001698  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2634  00169C  000A               	tblrd		*-
  2635  00169E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2636  0016A2  C02A  F015         	movff	_fround$776,___ftmul@f1
  2637  0016A6  C02B  F016         	movff	_fround$776+1,___ftmul@f1+1
  2638  0016AA  C02C  F017         	movff	_fround$776+2,___ftmul@f1+2
  2639  0016AE  EC84  F00E         	call	___ftmul	;wreg free
  2640  0016B2  C015  F027         	movff	?___ftmul,_fround$777
  2641  0016B6  C016  F028         	movff	?___ftmul+1,_fround$777+1
  2642  0016BA  C017  F029         	movff	?___ftmul+2,_fround$777+2
  2643                           
  2644                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2645  0016BE  C027  F015         	movff	_fround$777,___ftmul@f1
  2646  0016C2  C028  F016         	movff	_fround$777+1,___ftmul@f1+1
  2647  0016C6  C029  F017         	movff	_fround$777+2,___ftmul@f1+2
  2648  0016CA  0E00               	movlw	0
  2649  0016CC  6E18               	movwf	___ftmul@f2,c
  2650  0016CE  0E00               	movlw	0
  2651  0016D0  6E19               	movwf	___ftmul@f2+1,c
  2652  0016D2  0E3F               	movlw	63
  2653  0016D4  6E1A               	movwf	___ftmul@f2+2,c
  2654  0016D6  EC84  F00E         	call	___ftmul	;wreg free
  2655  0016DA  C015  F024         	movff	?___ftmul,?_fround
  2656  0016DE  C016  F025         	movff	?___ftmul+1,?_fround+1
  2657  0016E2  C017  F026         	movff	?___ftmul+2,?_fround+2
  2658  0016E6  0012               	return	
  2659  0016E8                     l151:
  2660                           
  2661                           ;doprnt.c: 415: else if(prec > 10)
  2662  0016E8  0E0A               	movlw	10
  2663  0016EA  642D               	cpfsgt	fround@prec,c
  2664  0016EC  D063               	goto	l154
  2665                           
  2666                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2667  0016EE  0E00               	movlw	0
  2668  0016F0  6E12               	movwf	___wmul@multiplicand+1,c
  2669  0016F2  0E03               	movlw	3
  2670  0016F4  6E11               	movwf	___wmul@multiplicand,c
  2671  0016F6  0E00               	movlw	0
  2672  0016F8  6E04               	movwf	___awmod@divisor+1,c
  2673  0016FA  0E0A               	movlw	10
  2674  0016FC  6E03               	movwf	___awmod@divisor,c
  2675  0016FE  C02D  F001         	movff	fround@prec,___awmod@dividend
  2676  001702  6A02               	clrf	___awmod@dividend+1,c
  2677  001704  EC0D  F011         	call	___awmod	;wreg free
  2678  001708  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2679  00170C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2680  001710  EC0D  F012         	call	___wmul	;wreg free
  2681  001714  0E50               	movlw	low __npowers_
  2682  001716  240F               	addwf	?___wmul,w,c
  2683  001718  6EF6               	movwf	tblptrl,c
  2684  00171A  0E08               	movlw	high __npowers_
  2685  00171C  2010               	addwfc	?___wmul+1,w,c
  2686  00171E  6EF7               	movwf	tblptrh,c
  2687  001720                     	if	0	;There are less than 3 active tblptr bytes
  2688  001720                     	endif
  2689  001720  0009               	tblrd		*+
  2690  001722  CFF5 F018          	movff	tablat,___ftmul@f2
  2691  001726  0009               	tblrd		*+
  2692  001728  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2693  00172C  000A               	tblrd		*-
  2694  00172E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2695  001732  0E00               	movlw	0
  2696  001734  6E0A               	movwf	___awdiv@divisor+1,c
  2697  001736  0E0A               	movlw	10
  2698  001738  6E09               	movwf	___awdiv@divisor,c
  2699  00173A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2700  00173E  6A08               	clrf	___awdiv@dividend+1,c
  2701  001740  EC8A  F010         	call	___awdiv	;wreg free
  2702  001744  0E09               	movlw	9
  2703  001746  2407               	addwf	?___awdiv,w,c
  2704  001748  6E0F               	movwf	___wmul@multiplier,c
  2705  00174A  0E00               	movlw	0
  2706  00174C  2008               	addwfc	?___awdiv+1,w,c
  2707  00174E  6E10               	movwf	___wmul@multiplier+1,c
  2708  001750  0E00               	movlw	0
  2709  001752  6E12               	movwf	___wmul@multiplicand+1,c
  2710  001754  0E03               	movlw	3
  2711  001756  6E11               	movwf	___wmul@multiplicand,c
  2712  001758  EC0D  F012         	call	___wmul	;wreg free
  2713  00175C  0E50               	movlw	low __npowers_
  2714  00175E  240F               	addwf	?___wmul,w,c
  2715  001760  6EF6               	movwf	tblptrl,c
  2716  001762  0E08               	movlw	high __npowers_
  2717  001764  2010               	addwfc	?___wmul+1,w,c
  2718  001766  6EF7               	movwf	tblptrh,c
  2719  001768                     	if	0	;There are less than 3 active tblptr bytes
  2720  001768                     	endif
  2721  001768  0009               	tblrd		*+
  2722  00176A  CFF5 F015          	movff	tablat,___ftmul@f1
  2723  00176E  0009               	tblrd		*+
  2724  001770  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2725  001774  000A               	tblrd		*-
  2726  001776  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2727  00177A  EC84  F00E         	call	___ftmul	;wreg free
  2728  00177E  C015  F02A         	movff	?___ftmul,_fround$776
  2729  001782  C016  F02B         	movff	?___ftmul+1,_fround$776+1
  2730  001786  C017  F02C         	movff	?___ftmul+2,_fround$776+2
  2731                           
  2732                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2733  00178A  C02A  F015         	movff	_fround$776,___ftmul@f1
  2734  00178E  C02B  F016         	movff	_fround$776+1,___ftmul@f1+1
  2735  001792  C02C  F017         	movff	_fround$776+2,___ftmul@f1+2
  2736  001796  0E00               	movlw	0
  2737  001798  6E18               	movwf	___ftmul@f2,c
  2738  00179A  0E00               	movlw	0
  2739  00179C  6E19               	movwf	___ftmul@f2+1,c
  2740  00179E  0E3F               	movlw	63
  2741  0017A0  6E1A               	movwf	___ftmul@f2+2,c
  2742  0017A2  EC84  F00E         	call	___ftmul	;wreg free
  2743  0017A6  C015  F024         	movff	?___ftmul,?_fround
  2744  0017AA  C016  F025         	movff	?___ftmul+1,?_fround+1
  2745  0017AE  C017  F026         	movff	?___ftmul+2,?_fround+2
  2746  0017B2  0012               	return	
  2747  0017B4                     l154:
  2748                           
  2749                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2750  0017B4  502D               	movf	fround@prec,w,c
  2751  0017B6  0D03               	mullw	3
  2752  0017B8  0E50               	movlw	low __npowers_
  2753  0017BA  24F3               	addwf	prodl,w,c
  2754  0017BC  6EF6               	movwf	tblptrl,c
  2755  0017BE  0E08               	movlw	high __npowers_
  2756  0017C0  20F4               	addwfc	prodh,w,c
  2757  0017C2  6EF7               	movwf	tblptrh,c
  2758  0017C4                     	if	0	;There are less than 3 active tblptr bytes
  2759  0017C4                     	endif
  2760  0017C4  0009               	tblrd		*+
  2761  0017C6  CFF5 F015          	movff	tablat,___ftmul@f1
  2762  0017CA  0009               	tblrd		*+
  2763  0017CC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2764  0017D0  000A               	tblrd		*-
  2765  0017D2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2766  0017D6  0E00               	movlw	0
  2767  0017D8  6E18               	movwf	___ftmul@f2,c
  2768  0017DA  0E00               	movlw	0
  2769  0017DC  6E19               	movwf	___ftmul@f2+1,c
  2770  0017DE  0E3F               	movlw	63
  2771  0017E0  6E1A               	movwf	___ftmul@f2+2,c
  2772  0017E2  EC84  F00E         	call	___ftmul	;wreg free
  2773  0017E6  C015  F024         	movff	?___ftmul,?_fround
  2774  0017EA  C016  F025         	movff	?___ftmul+1,?_fround+1
  2775  0017EE  C017  F026         	movff	?___ftmul+2,?_fround+2
  2776  0017F2  0012               	return	
  2777  0017F4                     __end_of_fround:
  2778                           	opt stack 0
  2779                           tblptru	equ	0xFF8
  2780                           tblptrh	equ	0xFF7
  2781                           tblptrl	equ	0xFF6
  2782                           tablat	equ	0xFF5
  2783                           prodh	equ	0xFF4
  2784                           prodl	equ	0xFF3
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           postinc2	equ	0xFDE
  2788                           postdec2	equ	0xFDD
  2789                           fsr2h	equ	0xFDA
  2790                           fsr2l	equ	0xFD9
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function ___wmul *****************
  2794 ;; Defined at:
  2795 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  multiplier      2   14[COMRAM] unsigned int 
  2798 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  product         2   18[COMRAM] unsigned int 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  2   14[COMRAM] unsigned int 
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0, prodl, prodh
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2810 ;;      Params:         4       0       0       0       0       0       0       0       0
  2811 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2813 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2814 ;;Total ram usage:        6 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_fround
  2820 ;;		_scale
  2821 ;;		_printf
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text6
  2826  00241A                     __ptext6:
  2827                           	opt stack 0
  2828  00241A                     ___wmul:
  2829                           	opt stack 28
  2830                           
  2831                           ;incstack = 0
  2832  00241A  500F               	movf	___wmul@multiplier,w,c
  2833  00241C  0211               	mulwf	___wmul@multiplicand,c
  2834  00241E  CFF3 F013          	movff	prodl,___wmul@product
  2835  002422  CFF4 F014          	movff	prodh,___wmul@product+1
  2836  002426  500F               	movf	___wmul@multiplier,w,c
  2837  002428  0212               	mulwf	___wmul@multiplicand+1,c
  2838  00242A  50F3               	movf	prodl,w,c
  2839  00242C  2614               	addwf	___wmul@product+1,f,c
  2840  00242E  5010               	movf	___wmul@multiplier+1,w,c
  2841  002430  0211               	mulwf	___wmul@multiplicand,c
  2842  002432  50F3               	movf	prodl,w,c
  2843  002434  2614               	addwf	___wmul@product+1,f,c
  2844  002436  C013  F00F         	movff	___wmul@product,?___wmul
  2845  00243A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2846  00243E  0012               	return	
  2847  002440                     __end_of___wmul:
  2848                           	opt stack 0
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           prodh	equ	0xFF4
  2854                           prodl	equ	0xFF3
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postinc2	equ	0xFDE
  2858                           postdec2	equ	0xFDD
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function ___ftmul *****************
  2864 ;; Defined at:
  2865 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  f1              3   20[COMRAM] float 
  2868 ;;  f2              3   23[COMRAM] float 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  2871 ;;  sign            1   34[COMRAM] unsigned char 
  2872 ;;  cntr            1   33[COMRAM] unsigned char 
  2873 ;;  exp             1   29[COMRAM] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  3   20[COMRAM] float 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2883 ;;      Params:         6       0       0       0       0       0       0       0       0
  2884 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2885 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2886 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2887 ;;Total ram usage:       15 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    1
  2890 ;; This function calls:
  2891 ;;		___ftpack
  2892 ;; This function is called by:
  2893 ;;		_main
  2894 ;;		_fround
  2895 ;;		_scale
  2896 ;;		_printf
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text7
  2901  001D08                     __ptext7:
  2902                           	opt stack 0
  2903  001D08                     ___ftmul:
  2904                           	opt stack 27
  2905                           
  2906                           ;incstack = 0
  2907  001D08  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  2908  001D0C  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  2909  001D0E  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  2910  001D10  3416               	rlcf	___ftmul@f1+1,w,c
  2911  001D12  361B               	rlcf	??___ftmul& (0+255),f,c
  2912  001D14  E301               	bnc	u2211
  2913  001D16  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  2914  001D18                     u2211:
  2915  001D18  501B               	movf	??___ftmul,w,c
  2916  001D1A  6E1E               	movwf	___ftmul@exp,c
  2917  001D1C  501E               	movf	___ftmul@exp,w,c
  2918  001D1E  A4D8               	btfss	status,2,c
  2919  001D20  D007               	goto	l543
  2920  001D22  0E00               	movlw	0
  2921  001D24  6E15               	movwf	?___ftmul,c
  2922  001D26  0E00               	movlw	0
  2923  001D28  6E16               	movwf	?___ftmul+1,c
  2924  001D2A  0E00               	movlw	0
  2925  001D2C  6E17               	movwf	?___ftmul+2,c
  2926  001D2E  0012               	return	
  2927  001D30                     l543:
  2928  001D30  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  2929  001D34  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  2930  001D36  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  2931  001D38  3419               	rlcf	___ftmul@f2+1,w,c
  2932  001D3A  361B               	rlcf	??___ftmul& (0+255),f,c
  2933  001D3C  E301               	bnc	u2231
  2934  001D3E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  2935  001D40                     u2231:
  2936  001D40  501B               	movf	??___ftmul,w,c
  2937  001D42  6E23               	movwf	___ftmul@sign,c
  2938  001D44  5023               	movf	___ftmul@sign,w,c
  2939  001D46  A4D8               	btfss	status,2,c
  2940  001D48  D007               	goto	l545
  2941  001D4A  0E00               	movlw	0
  2942  001D4C  6E15               	movwf	?___ftmul,c
  2943  001D4E  0E00               	movlw	0
  2944  001D50  6E16               	movwf	?___ftmul+1,c
  2945  001D52  0E00               	movlw	0
  2946  001D54  6E17               	movwf	?___ftmul+2,c
  2947  001D56  0012               	return	
  2948  001D58                     l545:
  2949  001D58  5023               	movf	___ftmul@sign,w,c
  2950  001D5A  0F7B               	addlw	123
  2951  001D5C  261E               	addwf	___ftmul@exp,f,c
  2952  001D5E  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  2953  001D62  501A               	movf	___ftmul@f2+2,w,c
  2954  001D64  1A23               	xorwf	___ftmul@sign,f,c
  2955  001D66  0E80               	movlw	128
  2956  001D68  1623               	andwf	___ftmul@sign,f,c
  2957  001D6A  8E16               	bsf	___ftmul@f1+1,7,c
  2958  001D6C  8E19               	bsf	___ftmul@f2+1,7,c
  2959  001D6E  0EFF               	movlw	255
  2960  001D70  1618               	andwf	___ftmul@f2,f,c
  2961  001D72  0EFF               	movlw	255
  2962  001D74  1619               	andwf	___ftmul@f2+1,f,c
  2963  001D76  0E00               	movlw	0
  2964  001D78  161A               	andwf	___ftmul@f2+2,f,c
  2965  001D7A  0E00               	movlw	0
  2966  001D7C  6E1F               	movwf	___ftmul@f3_as_product,c
  2967  001D7E  0E00               	movlw	0
  2968  001D80  6E20               	movwf	___ftmul@f3_as_product+1,c
  2969  001D82  0E00               	movlw	0
  2970  001D84  6E21               	movwf	___ftmul@f3_as_product+2,c
  2971  001D86  0E07               	movlw	7
  2972  001D88  6E22               	movwf	___ftmul@cntr,c
  2973  001D8A  A015               	btfss	___ftmul@f1,0,c
  2974  001D8C  D006               	goto	l547
  2975  001D8E  5018               	movf	___ftmul@f2,w,c
  2976  001D90  261F               	addwf	___ftmul@f3_as_product,f,c
  2977  001D92  5019               	movf	___ftmul@f2+1,w,c
  2978  001D94  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  2979  001D96  501A               	movf	___ftmul@f2+2,w,c
  2980  001D98  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  2981  001D9A                     l547:
  2982  001D9A  90D8               	bcf	status,0,c
  2983  001D9C  3217               	rrcf	___ftmul@f1+2,f,c
  2984  001D9E  3216               	rrcf	___ftmul@f1+1,f,c
  2985  001DA0  3215               	rrcf	___ftmul@f1,f,c
  2986  001DA2  90D8               	bcf	status,0,c
  2987  001DA4  3618               	rlcf	___ftmul@f2,f,c
  2988  001DA6  3619               	rlcf	___ftmul@f2+1,f,c
  2989  001DA8  361A               	rlcf	___ftmul@f2+2,f,c
  2990  001DAA  2E22               	decfsz	___ftmul@cntr,f,c
  2991  001DAC  D7EE               	goto	l546
  2992  001DAE  0E09               	movlw	9
  2993  001DB0  6E22               	movwf	___ftmul@cntr,c
  2994  001DB2  A015               	btfss	___ftmul@f1,0,c
  2995  001DB4  D006               	goto	l550
  2996  001DB6  5018               	movf	___ftmul@f2,w,c
  2997  001DB8  261F               	addwf	___ftmul@f3_as_product,f,c
  2998  001DBA  5019               	movf	___ftmul@f2+1,w,c
  2999  001DBC  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3000  001DBE  501A               	movf	___ftmul@f2+2,w,c
  3001  001DC0  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3002  001DC2                     l550:
  3003  001DC2  90D8               	bcf	status,0,c
  3004  001DC4  3217               	rrcf	___ftmul@f1+2,f,c
  3005  001DC6  3216               	rrcf	___ftmul@f1+1,f,c
  3006  001DC8  3215               	rrcf	___ftmul@f1,f,c
  3007  001DCA  90D8               	bcf	status,0,c
  3008  001DCC  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3009  001DCE  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3010  001DD0  321F               	rrcf	___ftmul@f3_as_product,f,c
  3011  001DD2  2E22               	decfsz	___ftmul@cntr,f,c
  3012  001DD4  D7EE               	goto	l549
  3013  001DD6  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3014  001DDA  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3015  001DDE  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3016  001DE2  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3017  001DE6  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3018  001DEA  ECEB  F00F         	call	___ftpack	;wreg free
  3019  001DEE  C001  F015         	movff	?___ftpack,?___ftmul
  3020  001DF2  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3021  001DF6  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3022  001DFA  0012               	return	
  3023  001DFC                     __end_of___ftmul:
  3024                           	opt stack 0
  3025                           tblptru	equ	0xFF8
  3026                           tblptrh	equ	0xFF7
  3027                           tblptrl	equ	0xFF6
  3028                           tablat	equ	0xFF5
  3029                           prodh	equ	0xFF4
  3030                           prodl	equ	0xFF3
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           postinc2	equ	0xFDE
  3034                           postdec2	equ	0xFDD
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function ___awmod *****************
  3040 ;; Defined at:
  3041 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;  dividend        2    0[COMRAM] int 
  3044 ;;  divisor         2    2[COMRAM] int 
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  sign            1    5[COMRAM] unsigned char 
  3047 ;;  counter         1    4[COMRAM] unsigned char 
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  2    0[COMRAM] int 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2, status,0
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3057 ;;      Params:         4       0       0       0       0       0       0       0       0
  3058 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3060 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3061 ;;Total ram usage:        6 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; This function calls:
  3064 ;;		Nothing
  3065 ;; This function is called by:
  3066 ;;		_fround
  3067 ;;		_scale
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text8
  3072  00221A                     __ptext8:
  3073                           	opt stack 0
  3074  00221A                     ___awmod:
  3075                           	opt stack 28
  3076                           
  3077                           ;incstack = 0
  3078  00221A  0E00               	movlw	0
  3079  00221C  6E06               	movwf	___awmod@sign,c
  3080  00221E  AE02               	btfss	___awmod@dividend+1,7,c
  3081  002220  D006               	goto	l396
  3082  002222  6C01               	negf	___awmod@dividend,c
  3083  002224  1E02               	comf	___awmod@dividend+1,f,c
  3084  002226  B0D8               	btfsc	status,0,c
  3085  002228  2A02               	incf	___awmod@dividend+1,f,c
  3086  00222A  0E01               	movlw	1
  3087  00222C  6E06               	movwf	___awmod@sign,c
  3088  00222E                     l396:
  3089  00222E  AE04               	btfss	___awmod@divisor+1,7,c
  3090  002230  D004               	goto	l397
  3091  002232  6C03               	negf	___awmod@divisor,c
  3092  002234  1E04               	comf	___awmod@divisor+1,f,c
  3093  002236  B0D8               	btfsc	status,0,c
  3094  002238  2A04               	incf	___awmod@divisor+1,f,c
  3095  00223A                     l397:
  3096  00223A  5003               	movf	___awmod@divisor,w,c
  3097  00223C  1004               	iorwf	___awmod@divisor+1,w,c
  3098  00223E  B4D8               	btfsc	status,2,c
  3099  002240  D018               	goto	l404
  3100  002242  0E01               	movlw	1
  3101  002244  6E05               	movwf	___awmod@counter,c
  3102  002246  D004               	goto	l399
  3103  002248  90D8               	bcf	status,0,c
  3104  00224A  3603               	rlcf	___awmod@divisor,f,c
  3105  00224C  3604               	rlcf	___awmod@divisor+1,f,c
  3106  00224E  2A05               	incf	___awmod@counter,f,c
  3107  002250                     l399:
  3108  002250  AE04               	btfss	___awmod@divisor+1,7,c
  3109  002252  D7FA               	goto	l400
  3110  002254                     u2360:
  3111  002254  5003               	movf	___awmod@divisor,w,c
  3112  002256  5C01               	subwf	___awmod@dividend,w,c
  3113  002258  5004               	movf	___awmod@divisor+1,w,c
  3114  00225A  5802               	subwfb	___awmod@dividend+1,w,c
  3115  00225C  A0D8               	btfss	status,0,c
  3116  00225E  D004               	goto	l403
  3117  002260  5003               	movf	___awmod@divisor,w,c
  3118  002262  5E01               	subwf	___awmod@dividend,f,c
  3119  002264  5004               	movf	___awmod@divisor+1,w,c
  3120  002266  5A02               	subwfb	___awmod@dividend+1,f,c
  3121  002268                     l403:
  3122  002268  90D8               	bcf	status,0,c
  3123  00226A  3204               	rrcf	___awmod@divisor+1,f,c
  3124  00226C  3203               	rrcf	___awmod@divisor,f,c
  3125  00226E  2E05               	decfsz	___awmod@counter,f,c
  3126  002270  D7F1               	goto	u2360
  3127  002272                     l404:
  3128  002272  5006               	movf	___awmod@sign,w,c
  3129  002274  B4D8               	btfsc	status,2,c
  3130  002276  D004               	goto	l405
  3131  002278  6C01               	negf	___awmod@dividend,c
  3132  00227A  1E02               	comf	___awmod@dividend+1,f,c
  3133  00227C  B0D8               	btfsc	status,0,c
  3134  00227E  2A02               	incf	___awmod@dividend+1,f,c
  3135  002280                     l405:
  3136  002280  C001  F001         	movff	___awmod@dividend,?___awmod
  3137  002284  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3138  002288  0012               	return	
  3139  00228A                     __end_of___awmod:
  3140                           	opt stack 0
  3141                           tblptru	equ	0xFF8
  3142                           tblptrh	equ	0xFF7
  3143                           tblptrl	equ	0xFF6
  3144                           tablat	equ	0xFF5
  3145                           prodh	equ	0xFF4
  3146                           prodl	equ	0xFF3
  3147                           postinc0	equ	0xFEE
  3148                           wreg	equ	0xFE8
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function ___awdiv *****************
  3156 ;; Defined at:
  3157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  dividend        2    6[COMRAM] int 
  3160 ;;  divisor         2    8[COMRAM] int 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  quotient        2   12[COMRAM] int 
  3163 ;;  sign            1   11[COMRAM] unsigned char 
  3164 ;;  counter         1   10[COMRAM] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  2    6[COMRAM] int 
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3174 ;;      Params:         4       0       0       0       0       0       0       0       0
  3175 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3177 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3178 ;;Total ram usage:        8 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_fround
  3184 ;;		_scale
  3185 ;;		_printf
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text9
  3190  002114                     __ptext9:
  3191                           	opt stack 0
  3192  002114                     ___awdiv:
  3193                           	opt stack 28
  3194                           
  3195                           ;incstack = 0
  3196  002114  0E00               	movlw	0
  3197  002116  6E0C               	movwf	___awdiv@sign,c
  3198  002118  AE0A               	btfss	___awdiv@divisor+1,7,c
  3199  00211A  D006               	goto	l383
  3200  00211C  6C09               	negf	___awdiv@divisor,c
  3201  00211E  1E0A               	comf	___awdiv@divisor+1,f,c
  3202  002120  B0D8               	btfsc	status,0,c
  3203  002122  2A0A               	incf	___awdiv@divisor+1,f,c
  3204  002124  0E01               	movlw	1
  3205  002126  6E0C               	movwf	___awdiv@sign,c
  3206  002128                     l383:
  3207  002128  AE08               	btfss	___awdiv@dividend+1,7,c
  3208  00212A  D006               	goto	l384
  3209  00212C  6C07               	negf	___awdiv@dividend,c
  3210  00212E  1E08               	comf	___awdiv@dividend+1,f,c
  3211  002130  B0D8               	btfsc	status,0,c
  3212  002132  2A08               	incf	___awdiv@dividend+1,f,c
  3213  002134  0E01               	movlw	1
  3214  002136  1A0C               	xorwf	___awdiv@sign,f,c
  3215  002138                     l384:
  3216  002138  0E00               	movlw	0
  3217  00213A  6E0E               	movwf	___awdiv@quotient+1,c
  3218  00213C  0E00               	movlw	0
  3219  00213E  6E0D               	movwf	___awdiv@quotient,c
  3220  002140  5009               	movf	___awdiv@divisor,w,c
  3221  002142  100A               	iorwf	___awdiv@divisor+1,w,c
  3222  002144  B4D8               	btfsc	status,2,c
  3223  002146  D01C               	goto	l391
  3224  002148  0E01               	movlw	1
  3225  00214A  6E0B               	movwf	___awdiv@counter,c
  3226  00214C  D004               	goto	l386
  3227  00214E  90D8               	bcf	status,0,c
  3228  002150  3609               	rlcf	___awdiv@divisor,f,c
  3229  002152  360A               	rlcf	___awdiv@divisor+1,f,c
  3230  002154  2A0B               	incf	___awdiv@counter,f,c
  3231  002156                     l386:
  3232  002156  AE0A               	btfss	___awdiv@divisor+1,7,c
  3233  002158  D7FA               	goto	l387
  3234  00215A                     u2300:
  3235  00215A  90D8               	bcf	status,0,c
  3236  00215C  360D               	rlcf	___awdiv@quotient,f,c
  3237  00215E  360E               	rlcf	___awdiv@quotient+1,f,c
  3238  002160  5009               	movf	___awdiv@divisor,w,c
  3239  002162  5C07               	subwf	___awdiv@dividend,w,c
  3240  002164  500A               	movf	___awdiv@divisor+1,w,c
  3241  002166  5808               	subwfb	___awdiv@dividend+1,w,c
  3242  002168  A0D8               	btfss	status,0,c
  3243  00216A  D005               	goto	l390
  3244  00216C  5009               	movf	___awdiv@divisor,w,c
  3245  00216E  5E07               	subwf	___awdiv@dividend,f,c
  3246  002170  500A               	movf	___awdiv@divisor+1,w,c
  3247  002172  5A08               	subwfb	___awdiv@dividend+1,f,c
  3248  002174  800D               	bsf	___awdiv@quotient,0,c
  3249  002176                     l390:
  3250  002176  90D8               	bcf	status,0,c
  3251  002178  320A               	rrcf	___awdiv@divisor+1,f,c
  3252  00217A  3209               	rrcf	___awdiv@divisor,f,c
  3253  00217C  2E0B               	decfsz	___awdiv@counter,f,c
  3254  00217E  D7ED               	goto	u2300
  3255  002180                     l391:
  3256  002180  500C               	movf	___awdiv@sign,w,c
  3257  002182  B4D8               	btfsc	status,2,c
  3258  002184  D004               	goto	l392
  3259  002186  6C0D               	negf	___awdiv@quotient,c
  3260  002188  1E0E               	comf	___awdiv@quotient+1,f,c
  3261  00218A  B0D8               	btfsc	status,0,c
  3262  00218C  2A0E               	incf	___awdiv@quotient+1,f,c
  3263  00218E                     l392:
  3264  00218E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3265  002192  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3266  002196  0012               	return	
  3267  002198                     __end_of___awdiv:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postinc2	equ	0xFDE
  3278                           postdec2	equ	0xFDD
  3279                           fsr2h	equ	0xFDA
  3280                           fsr2l	equ	0xFD9
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function __tdiv_to_l_ *****************
  3284 ;; Defined at:
  3285 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  f1              3    0[COMRAM] float 
  3288 ;;  f2              3    3[COMRAM] float 
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  quot            4    9[COMRAM] unsigned long 
  3291 ;;  exp1            1   14[COMRAM] unsigned char 
  3292 ;;  cntr            1   13[COMRAM] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  4    0[COMRAM] unsigned long 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3302 ;;      Params:         6       0       0       0       0       0       0       0       0
  3303 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3304 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3305 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3306 ;;Total ram usage:       15 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_printf
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text10
  3316  0019A0                     __ptext10:
  3317                           	opt stack 0
  3318  0019A0                     __tdiv_to_l_:
  3319                           	opt stack 29
  3320                           
  3321                           ;incstack = 0
  3322  0019A0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3323  0019A4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3324  0019A6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3325  0019A8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3326  0019AA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3327  0019AC  E301               	bnc	u2461
  3328  0019AE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3329  0019B0                     u2461:
  3330  0019B0  5007               	movf	??__tdiv_to_l_,w,c
  3331  0019B2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3332  0019B4  500F               	movf	__tdiv_to_l_@exp1,w,c
  3333  0019B6  A4D8               	btfss	status,2,c
  3334  0019B8  D009               	goto	l519
  3335  0019BA  0E00               	movlw	0
  3336  0019BC  6E01               	movwf	?__tdiv_to_l_,c
  3337  0019BE  0E00               	movlw	0
  3338  0019C0  6E02               	movwf	?__tdiv_to_l_+1,c
  3339  0019C2  0E00               	movlw	0
  3340  0019C4  6E03               	movwf	?__tdiv_to_l_+2,c
  3341  0019C6  0E00               	movlw	0
  3342  0019C8  6E04               	movwf	?__tdiv_to_l_+3,c
  3343  0019CA  0012               	return	
  3344  0019CC                     l519:
  3345  0019CC  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3346  0019D0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3347  0019D2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3348  0019D4  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3349  0019D6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3350  0019D8  E301               	bnc	u2481
  3351  0019DA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3352  0019DC                     u2481:
  3353  0019DC  5007               	movf	??__tdiv_to_l_,w,c
  3354  0019DE  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3355  0019E0  500E               	movf	__tdiv_to_l_@cntr,w,c
  3356  0019E2  A4D8               	btfss	status,2,c
  3357  0019E4  D009               	goto	l521
  3358  0019E6  0E00               	movlw	0
  3359  0019E8  6E01               	movwf	?__tdiv_to_l_,c
  3360  0019EA  0E00               	movlw	0
  3361  0019EC  6E02               	movwf	?__tdiv_to_l_+1,c
  3362  0019EE  0E00               	movlw	0
  3363  0019F0  6E03               	movwf	?__tdiv_to_l_+2,c
  3364  0019F2  0E00               	movlw	0
  3365  0019F4  6E04               	movwf	?__tdiv_to_l_+3,c
  3366  0019F6  0012               	return	
  3367  0019F8                     l521:
  3368  0019F8  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3369  0019FA  0EFF               	movlw	255
  3370  0019FC  1601               	andwf	__tdiv_to_l_@f1,f,c
  3371  0019FE  0EFF               	movlw	255
  3372  001A00  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3373  001A02  0E00               	movlw	0
  3374  001A04  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3375  001A06  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3376  001A08  0EFF               	movlw	255
  3377  001A0A  1604               	andwf	__tdiv_to_l_@f2,f,c
  3378  001A0C  0EFF               	movlw	255
  3379  001A0E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3380  001A10  0E00               	movlw	0
  3381  001A12  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3382  001A14  0E00               	movlw	0
  3383  001A16  6E0A               	movwf	__tdiv_to_l_@quot,c
  3384  001A18  0E00               	movlw	0
  3385  001A1A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3386  001A1C  0E00               	movlw	0
  3387  001A1E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3388  001A20  0E00               	movlw	0
  3389  001A22  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3390  001A24  0E7F               	movlw	127
  3391  001A26  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3392  001A28  500E               	movf	__tdiv_to_l_@cntr,w,c
  3393  001A2A  0F98               	addlw	152
  3394  001A2C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3395  001A2E  0E18               	movlw	24
  3396  001A30  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3397  001A32                     l522:
  3398  001A32  90D8               	bcf	status,0,c
  3399  001A34  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3400  001A36  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3401  001A38  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3402  001A3A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3403  001A3C  5004               	movf	__tdiv_to_l_@f2,w,c
  3404  001A3E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3405  001A40  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3406  001A42  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3407  001A44  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3408  001A46  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3409  001A48  A0D8               	btfss	status,0,c
  3410  001A4A  D007               	goto	l523
  3411  001A4C  5004               	movf	__tdiv_to_l_@f2,w,c
  3412  001A4E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3413  001A50  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3414  001A52  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3415  001A54  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3416  001A56  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3417  001A58  800A               	bsf	__tdiv_to_l_@quot,0,c
  3418  001A5A                     l523:
  3419  001A5A  90D8               	bcf	status,0,c
  3420  001A5C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3421  001A5E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3422  001A60  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3423  001A62  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3424  001A64  D7E6               	goto	l522
  3425  001A66  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3426  001A68  D016               	goto	l525
  3427  001A6A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3428  001A6C  0A80               	xorlw	128
  3429  001A6E  0F97               	addlw	151
  3430  001A70  B0D8               	btfsc	status,0,c
  3431  001A72  D009               	goto	l526
  3432  001A74  0E00               	movlw	0
  3433  001A76  6E01               	movwf	?__tdiv_to_l_,c
  3434  001A78  0E00               	movlw	0
  3435  001A7A  6E02               	movwf	?__tdiv_to_l_+1,c
  3436  001A7C  0E00               	movlw	0
  3437  001A7E  6E03               	movwf	?__tdiv_to_l_+2,c
  3438  001A80  0E00               	movlw	0
  3439  001A82  6E04               	movwf	?__tdiv_to_l_+3,c
  3440  001A84  0012               	return	
  3441  001A86                     l526:
  3442  001A86  90D8               	bcf	status,0,c
  3443  001A88  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3444  001A8A  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3445  001A8C  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3446  001A8E  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3447  001A90  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3448  001A92  D7F9               	goto	l526
  3449  001A94  D015               	goto	u2540
  3450  001A96                     l525:
  3451  001A96  0E17               	movlw	23
  3452  001A98  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3453  001A9A  D00F               	goto	l531
  3454  001A9C  0E00               	movlw	0
  3455  001A9E  6E01               	movwf	?__tdiv_to_l_,c
  3456  001AA0  0E00               	movlw	0
  3457  001AA2  6E02               	movwf	?__tdiv_to_l_+1,c
  3458  001AA4  0E00               	movlw	0
  3459  001AA6  6E03               	movwf	?__tdiv_to_l_+2,c
  3460  001AA8  0E00               	movlw	0
  3461  001AAA  6E04               	movwf	?__tdiv_to_l_+3,c
  3462  001AAC  0012               	return	
  3463  001AAE  90D8               	bcf	status,0,c
  3464  001AB0  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3465  001AB2  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3466  001AB4  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3467  001AB6  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3468  001AB8  060F               	decf	__tdiv_to_l_@exp1,f,c
  3469  001ABA                     l531:
  3470  001ABA  500F               	movf	__tdiv_to_l_@exp1,w,c
  3471  001ABC  A4D8               	btfss	status,2,c
  3472  001ABE  D7F7               	goto	l532
  3473  001AC0                     u2540:
  3474  001AC0  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3475  001AC4  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3476  001AC8  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3477  001ACC  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3478  001AD0  0012               	return		;funcret
  3479  001AD2                     __end_of__tdiv_to_l_:
  3480                           	opt stack 0
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postinc2	equ	0xFDE
  3490                           postdec2	equ	0xFDD
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function __div_to_l_ *****************
  3496 ;; Defined at:
  3497 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  f1              3    0[COMRAM] unsigned long 
  3500 ;;  f2              3    3[COMRAM] unsigned long 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  quot            4    6[COMRAM] unsigned long 
  3503 ;;  exp1            1   11[COMRAM] unsigned char 
  3504 ;;  cntr            1   10[COMRAM] unsigned char 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  4    0[COMRAM] unsigned long 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2, status,0
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3514 ;;      Params:         6       0       0       0       0       0       0       0       0
  3515 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3517 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3518 ;;Total ram usage:       12 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; This function calls:
  3521 ;;		Nothing
  3522 ;; This function is called by:
  3523 ;;		_printf
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           	psect	text11
  3528  001AD2                     __ptext11:
  3529                           	opt stack 0
  3530  001AD2                     __div_to_l_:
  3531                           	opt stack 29
  3532                           
  3533                           ;incstack = 0
  3534  001AD2  3403               	rlcf	__div_to_l_@f1+2,w,c
  3535  001AD4  3404               	rlcf	__div_to_l_@f1+3,w,c
  3536  001AD6  6E0C               	movwf	__div_to_l_@exp1,c
  3537  001AD8  500C               	movf	__div_to_l_@exp1,w,c
  3538  001ADA  A4D8               	btfss	status,2,c
  3539  001ADC  D009               	goto	l415
  3540  001ADE  0E00               	movlw	0
  3541  001AE0  6E01               	movwf	?__div_to_l_,c
  3542  001AE2  0E00               	movlw	0
  3543  001AE4  6E02               	movwf	?__div_to_l_+1,c
  3544  001AE6  0E00               	movlw	0
  3545  001AE8  6E03               	movwf	?__div_to_l_+2,c
  3546  001AEA  0E00               	movlw	0
  3547  001AEC  6E04               	movwf	?__div_to_l_+3,c
  3548  001AEE  0012               	return	
  3549  001AF0                     l415:
  3550  001AF0  3406               	rlcf	__div_to_l_@f2+2,w,c
  3551  001AF2  3407               	rlcf	__div_to_l_@f2+3,w,c
  3552  001AF4  6E0B               	movwf	__div_to_l_@cntr,c
  3553  001AF6  500B               	movf	__div_to_l_@cntr,w,c
  3554  001AF8  A4D8               	btfss	status,2,c
  3555  001AFA  D009               	goto	l417
  3556  001AFC  0E00               	movlw	0
  3557  001AFE  6E01               	movwf	?__div_to_l_,c
  3558  001B00  0E00               	movlw	0
  3559  001B02  6E02               	movwf	?__div_to_l_+1,c
  3560  001B04  0E00               	movlw	0
  3561  001B06  6E03               	movwf	?__div_to_l_+2,c
  3562  001B08  0E00               	movlw	0
  3563  001B0A  6E04               	movwf	?__div_to_l_+3,c
  3564  001B0C  0012               	return	
  3565  001B0E                     l417:
  3566  001B0E  8E03               	bsf	__div_to_l_@f1+2,7,c
  3567  001B10  0EFF               	movlw	255
  3568  001B12  1601               	andwf	__div_to_l_@f1,f,c
  3569  001B14  0EFF               	movlw	255
  3570  001B16  1602               	andwf	__div_to_l_@f1+1,f,c
  3571  001B18  0EFF               	movlw	255
  3572  001B1A  1603               	andwf	__div_to_l_@f1+2,f,c
  3573  001B1C  0E00               	movlw	0
  3574  001B1E  1604               	andwf	__div_to_l_@f1+3,f,c
  3575  001B20  8E06               	bsf	__div_to_l_@f2+2,7,c
  3576  001B22  0EFF               	movlw	255
  3577  001B24  1604               	andwf	__div_to_l_@f2,f,c
  3578  001B26  0EFF               	movlw	255
  3579  001B28  1605               	andwf	__div_to_l_@f2+1,f,c
  3580  001B2A  0EFF               	movlw	255
  3581  001B2C  1606               	andwf	__div_to_l_@f2+2,f,c
  3582  001B2E  0E00               	movlw	0
  3583  001B30  1607               	andwf	__div_to_l_@f2+3,f,c
  3584  001B32  0E00               	movlw	0
  3585  001B34  6E07               	movwf	__div_to_l_@quot,c
  3586  001B36  0E00               	movlw	0
  3587  001B38  6E08               	movwf	__div_to_l_@quot+1,c
  3588  001B3A  0E00               	movlw	0
  3589  001B3C  6E09               	movwf	__div_to_l_@quot+2,c
  3590  001B3E  0E00               	movlw	0
  3591  001B40  6E0A               	movwf	__div_to_l_@quot+3,c
  3592  001B42  0E7F               	movlw	127
  3593  001B44  5E0C               	subwf	__div_to_l_@exp1,f,c
  3594  001B46  500B               	movf	__div_to_l_@cntr,w,c
  3595  001B48  0FA0               	addlw	160
  3596  001B4A  5E0C               	subwf	__div_to_l_@exp1,f,c
  3597  001B4C  0E20               	movlw	32
  3598  001B4E  6E0B               	movwf	__div_to_l_@cntr,c
  3599  001B50  90D8               	bcf	status,0,c
  3600  001B52  3607               	rlcf	__div_to_l_@quot,f,c
  3601  001B54  3608               	rlcf	__div_to_l_@quot+1,f,c
  3602  001B56  3609               	rlcf	__div_to_l_@quot+2,f,c
  3603  001B58  360A               	rlcf	__div_to_l_@quot+3,f,c
  3604  001B5A  5004               	movf	__div_to_l_@f2,w,c
  3605  001B5C  5C01               	subwf	__div_to_l_@f1,w,c
  3606  001B5E  5005               	movf	__div_to_l_@f2+1,w,c
  3607  001B60  5802               	subwfb	__div_to_l_@f1+1,w,c
  3608  001B62  5006               	movf	__div_to_l_@f2+2,w,c
  3609  001B64  5803               	subwfb	__div_to_l_@f1+2,w,c
  3610  001B66  5007               	movf	__div_to_l_@f2+3,w,c
  3611  001B68  5804               	subwfb	__div_to_l_@f1+3,w,c
  3612  001B6A  A0D8               	btfss	status,0,c
  3613  001B6C  D009               	goto	l419
  3614  001B6E  5004               	movf	__div_to_l_@f2,w,c
  3615  001B70  5E01               	subwf	__div_to_l_@f1,f,c
  3616  001B72  5005               	movf	__div_to_l_@f2+1,w,c
  3617  001B74  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3618  001B76  5006               	movf	__div_to_l_@f2+2,w,c
  3619  001B78  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3620  001B7A  5007               	movf	__div_to_l_@f2+3,w,c
  3621  001B7C  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3622  001B7E  8007               	bsf	__div_to_l_@quot,0,c
  3623  001B80                     l419:
  3624  001B80  90D8               	bcf	status,0,c
  3625  001B82  3601               	rlcf	__div_to_l_@f1,f,c
  3626  001B84  3602               	rlcf	__div_to_l_@f1+1,f,c
  3627  001B86  3603               	rlcf	__div_to_l_@f1+2,f,c
  3628  001B88  3604               	rlcf	__div_to_l_@f1+3,f,c
  3629  001B8A  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3630  001B8C  D7E1               	goto	l418
  3631  001B8E  AE0C               	btfss	__div_to_l_@exp1,7,c
  3632  001B90  D016               	goto	l421
  3633  001B92  500C               	movf	__div_to_l_@exp1,w,c
  3634  001B94  0A80               	xorlw	128
  3635  001B96  0F9F               	addlw	159
  3636  001B98  B0D8               	btfsc	status,0,c
  3637  001B9A  D009               	goto	l422
  3638  001B9C  0E00               	movlw	0
  3639  001B9E  6E01               	movwf	?__div_to_l_,c
  3640  001BA0  0E00               	movlw	0
  3641  001BA2  6E02               	movwf	?__div_to_l_+1,c
  3642  001BA4  0E00               	movlw	0
  3643  001BA6  6E03               	movwf	?__div_to_l_+2,c
  3644  001BA8  0E00               	movlw	0
  3645  001BAA  6E04               	movwf	?__div_to_l_+3,c
  3646  001BAC  0012               	return	
  3647  001BAE                     l422:
  3648  001BAE  90D8               	bcf	status,0,c
  3649  001BB0  320A               	rrcf	__div_to_l_@quot+3,f,c
  3650  001BB2  3209               	rrcf	__div_to_l_@quot+2,f,c
  3651  001BB4  3208               	rrcf	__div_to_l_@quot+1,f,c
  3652  001BB6  3207               	rrcf	__div_to_l_@quot,f,c
  3653  001BB8  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3654  001BBA  D7F9               	goto	l422
  3655  001BBC  D015               	goto	u2610
  3656  001BBE                     l421:
  3657  001BBE  0E1F               	movlw	31
  3658  001BC0  640C               	cpfsgt	__div_to_l_@exp1,c
  3659  001BC2  D00F               	goto	l427
  3660  001BC4  0E00               	movlw	0
  3661  001BC6  6E01               	movwf	?__div_to_l_,c
  3662  001BC8  0E00               	movlw	0
  3663  001BCA  6E02               	movwf	?__div_to_l_+1,c
  3664  001BCC  0E00               	movlw	0
  3665  001BCE  6E03               	movwf	?__div_to_l_+2,c
  3666  001BD0  0E00               	movlw	0
  3667  001BD2  6E04               	movwf	?__div_to_l_+3,c
  3668  001BD4  0012               	return	
  3669  001BD6  90D8               	bcf	status,0,c
  3670  001BD8  3607               	rlcf	__div_to_l_@quot,f,c
  3671  001BDA  3608               	rlcf	__div_to_l_@quot+1,f,c
  3672  001BDC  3609               	rlcf	__div_to_l_@quot+2,f,c
  3673  001BDE  360A               	rlcf	__div_to_l_@quot+3,f,c
  3674  001BE0  060C               	decf	__div_to_l_@exp1,f,c
  3675  001BE2                     l427:
  3676  001BE2  500C               	movf	__div_to_l_@exp1,w,c
  3677  001BE4  A4D8               	btfss	status,2,c
  3678  001BE6  D7F7               	goto	l428
  3679  001BE8                     u2610:
  3680  001BE8  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3681  001BEC  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3682  001BF0  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3683  001BF4  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3684  001BF8  0012               	return		;funcret
  3685  001BFA                     __end_of__div_to_l_:
  3686                           	opt stack 0
  3687                           tblptru	equ	0xFF8
  3688                           tblptrh	equ	0xFF7
  3689                           tblptrl	equ	0xFF6
  3690                           tablat	equ	0xFF5
  3691                           prodh	equ	0xFF4
  3692                           prodl	equ	0xFF3
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           postinc2	equ	0xFDE
  3696                           postdec2	equ	0xFDD
  3697                           fsr2h	equ	0xFDA
  3698                           fsr2l	equ	0xFD9
  3699                           status	equ	0xFD8
  3700                           
  3701 ;; *************** function ___lltoft *****************
  3702 ;; Defined at:
  3703 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  c               4    8[COMRAM] unsigned long 
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;  exp             1   16[COMRAM] unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  3    8[COMRAM] float 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0, cstack
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3717 ;;      Params:         4       0       0       0       0       0       0       0       0
  3718 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3719 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3720 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3721 ;;Total ram usage:        9 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    1
  3724 ;; This function calls:
  3725 ;;		___ftpack
  3726 ;; This function is called by:
  3727 ;;		_printf
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           	psect	text12
  3732  0022F0                     __ptext12:
  3733                           	opt stack 0
  3734  0022F0                     ___lltoft:
  3735                           	opt stack 28
  3736                           
  3737                           ;incstack = 0
  3738  0022F0  0E8E               	movlw	142
  3739  0022F2  6E11               	movwf	___lltoft@exp,c
  3740  0022F4  D006               	goto	l621
  3741  0022F6  90D8               	bcf	status,0,c
  3742  0022F8  320C               	rrcf	___lltoft@c+3,f,c
  3743  0022FA  320B               	rrcf	___lltoft@c+2,f,c
  3744  0022FC  320A               	rrcf	___lltoft@c+1,f,c
  3745  0022FE  3209               	rrcf	___lltoft@c,f,c
  3746  002300  2A11               	incf	___lltoft@exp,f,c
  3747  002302                     l621:
  3748  002302  0E00               	movlw	0
  3749  002304  1409               	andwf	___lltoft@c,w,c
  3750  002306  6E0D               	movwf	??___lltoft& (0+255),c
  3751  002308  0E00               	movlw	0
  3752  00230A  140A               	andwf	___lltoft@c+1,w,c
  3753  00230C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3754  00230E  0E00               	movlw	0
  3755  002310  140B               	andwf	___lltoft@c+2,w,c
  3756  002312  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3757  002314  0EFF               	movlw	255
  3758  002316  140C               	andwf	___lltoft@c+3,w,c
  3759  002318  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3760  00231A  500D               	movf	??___lltoft,w,c
  3761  00231C  100E               	iorwf	??___lltoft+1,w,c
  3762  00231E  100F               	iorwf	??___lltoft+2,w,c
  3763  002320  1010               	iorwf	??___lltoft+3,w,c
  3764  002322  A4D8               	btfss	status,2,c
  3765  002324  D7E8               	goto	l622
  3766  002326  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3767  00232A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3768  00232E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3769  002332  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3770  002336  0E00               	movlw	0
  3771  002338  6E05               	movwf	___ftpack@sign,c
  3772  00233A  ECEB  F00F         	call	___ftpack	;wreg free
  3773  00233E  C001  F009         	movff	?___ftpack,?___lltoft
  3774  002342  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3775  002346  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3776  00234A  0012               	return	
  3777  00234C                     __end_of___lltoft:
  3778                           	opt stack 0
  3779                           tblptru	equ	0xFF8
  3780                           tblptrh	equ	0xFF7
  3781                           tblptrl	equ	0xFF6
  3782                           tablat	equ	0xFF5
  3783                           prodh	equ	0xFF4
  3784                           prodl	equ	0xFF3
  3785                           postinc0	equ	0xFEE
  3786                           wreg	equ	0xFE8
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function ___llmod *****************
  3794 ;; Defined at:
  3795 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  dividend        4    0[COMRAM] unsigned long 
  3798 ;;  divisor         4    4[COMRAM] unsigned long 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  counter         1    8[COMRAM] unsigned char 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  4    0[COMRAM] unsigned long 
  3803 ;; Registers used:
  3804 ;;		wreg, status,2, status,0
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3810 ;;      Params:         8       0       0       0       0       0       0       0       0
  3811 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3813 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3814 ;;Total ram usage:        9 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_printf
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text13
  3824  00228A                     __ptext13:
  3825                           	opt stack 0
  3826  00228A                     ___llmod:
  3827                           	opt stack 29
  3828                           
  3829                           ;incstack = 0
  3830  00228A  5005               	movf	___llmod@divisor,w,c
  3831  00228C  1006               	iorwf	___llmod@divisor+1,w,c
  3832  00228E  1007               	iorwf	___llmod@divisor+2,w,c
  3833  002290  1008               	iorwf	___llmod@divisor+3,w,c
  3834  002292  B4D8               	btfsc	status,2,c
  3835  002294  D024               	goto	l615
  3836  002296  0E01               	movlw	1
  3837  002298  6E09               	movwf	___llmod@counter,c
  3838  00229A  D006               	goto	l610
  3839  00229C  90D8               	bcf	status,0,c
  3840  00229E  3605               	rlcf	___llmod@divisor,f,c
  3841  0022A0  3606               	rlcf	___llmod@divisor+1,f,c
  3842  0022A2  3607               	rlcf	___llmod@divisor+2,f,c
  3843  0022A4  3608               	rlcf	___llmod@divisor+3,f,c
  3844  0022A6  2A09               	incf	___llmod@counter,f,c
  3845  0022A8                     l610:
  3846  0022A8  AE08               	btfss	___llmod@divisor+3,7,c
  3847  0022AA  D7F8               	goto	l611
  3848  0022AC                     u2790:
  3849  0022AC  5005               	movf	___llmod@divisor,w,c
  3850  0022AE  5C01               	subwf	___llmod@dividend,w,c
  3851  0022B0  5006               	movf	___llmod@divisor+1,w,c
  3852  0022B2  5802               	subwfb	___llmod@dividend+1,w,c
  3853  0022B4  5007               	movf	___llmod@divisor+2,w,c
  3854  0022B6  5803               	subwfb	___llmod@dividend+2,w,c
  3855  0022B8  5008               	movf	___llmod@divisor+3,w,c
  3856  0022BA  5804               	subwfb	___llmod@dividend+3,w,c
  3857  0022BC  A0D8               	btfss	status,0,c
  3858  0022BE  D008               	goto	l614
  3859  0022C0  5005               	movf	___llmod@divisor,w,c
  3860  0022C2  5E01               	subwf	___llmod@dividend,f,c
  3861  0022C4  5006               	movf	___llmod@divisor+1,w,c
  3862  0022C6  5A02               	subwfb	___llmod@dividend+1,f,c
  3863  0022C8  5007               	movf	___llmod@divisor+2,w,c
  3864  0022CA  5A03               	subwfb	___llmod@dividend+2,f,c
  3865  0022CC  5008               	movf	___llmod@divisor+3,w,c
  3866  0022CE  5A04               	subwfb	___llmod@dividend+3,f,c
  3867  0022D0                     l614:
  3868  0022D0  90D8               	bcf	status,0,c
  3869  0022D2  3208               	rrcf	___llmod@divisor+3,f,c
  3870  0022D4  3207               	rrcf	___llmod@divisor+2,f,c
  3871  0022D6  3206               	rrcf	___llmod@divisor+1,f,c
  3872  0022D8  3205               	rrcf	___llmod@divisor,f,c
  3873  0022DA  2E09               	decfsz	___llmod@counter,f,c
  3874  0022DC  D7E7               	goto	u2790
  3875  0022DE                     l615:
  3876  0022DE  C001  F001         	movff	___llmod@dividend,?___llmod
  3877  0022E2  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3878  0022E6  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3879  0022EA  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3880  0022EE  0012               	return		;funcret
  3881  0022F0                     __end_of___llmod:
  3882                           	opt stack 0
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           postinc0	equ	0xFEE
  3890                           wreg	equ	0xFE8
  3891                           postinc2	equ	0xFDE
  3892                           postdec2	equ	0xFDD
  3893                           fsr2h	equ	0xFDA
  3894                           fsr2l	equ	0xFD9
  3895                           status	equ	0xFD8
  3896                           
  3897 ;; *************** function ___lldiv *****************
  3898 ;; Defined at:
  3899 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  dividend        4    0[COMRAM] unsigned long 
  3902 ;;  divisor         4    4[COMRAM] unsigned long 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  quotient        4    8[COMRAM] unsigned long 
  3905 ;;  counter         1   12[COMRAM] unsigned char 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  4    0[COMRAM] unsigned long 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3915 ;;      Params:         8       0       0       0       0       0       0       0       0
  3916 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3918 ;;      Totals:        13       0       0       0       0       0       0       0       0
  3919 ;;Total ram usage:       13 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; This function calls:
  3922 ;;		Nothing
  3923 ;; This function is called by:
  3924 ;;		_printf
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	text14
  3929  002198                     __ptext14:
  3930                           	opt stack 0
  3931  002198                     ___lldiv:
  3932                           	opt stack 29
  3933                           
  3934                           ;incstack = 0
  3935  002198  0E00               	movlw	0
  3936  00219A  6E09               	movwf	___lldiv@quotient,c
  3937  00219C  0E00               	movlw	0
  3938  00219E  6E0A               	movwf	___lldiv@quotient+1,c
  3939  0021A0  0E00               	movlw	0
  3940  0021A2  6E0B               	movwf	___lldiv@quotient+2,c
  3941  0021A4  0E00               	movlw	0
  3942  0021A6  6E0C               	movwf	___lldiv@quotient+3,c
  3943  0021A8  5005               	movf	___lldiv@divisor,w,c
  3944  0021AA  1006               	iorwf	___lldiv@divisor+1,w,c
  3945  0021AC  1007               	iorwf	___lldiv@divisor+2,w,c
  3946  0021AE  1008               	iorwf	___lldiv@divisor+3,w,c
  3947  0021B0  B4D8               	btfsc	status,2,c
  3948  0021B2  D02A               	goto	l605
  3949  0021B4  0E01               	movlw	1
  3950  0021B6  6E0D               	movwf	___lldiv@counter,c
  3951  0021B8  D006               	goto	l600
  3952  0021BA  90D8               	bcf	status,0,c
  3953  0021BC  3605               	rlcf	___lldiv@divisor,f,c
  3954  0021BE  3606               	rlcf	___lldiv@divisor+1,f,c
  3955  0021C0  3607               	rlcf	___lldiv@divisor+2,f,c
  3956  0021C2  3608               	rlcf	___lldiv@divisor+3,f,c
  3957  0021C4  2A0D               	incf	___lldiv@counter,f,c
  3958  0021C6                     l600:
  3959  0021C6  AE08               	btfss	___lldiv@divisor+3,7,c
  3960  0021C8  D7F8               	goto	l601
  3961  0021CA                     u2760:
  3962  0021CA  90D8               	bcf	status,0,c
  3963  0021CC  3609               	rlcf	___lldiv@quotient,f,c
  3964  0021CE  360A               	rlcf	___lldiv@quotient+1,f,c
  3965  0021D0  360B               	rlcf	___lldiv@quotient+2,f,c
  3966  0021D2  360C               	rlcf	___lldiv@quotient+3,f,c
  3967  0021D4  5005               	movf	___lldiv@divisor,w,c
  3968  0021D6  5C01               	subwf	___lldiv@dividend,w,c
  3969  0021D8  5006               	movf	___lldiv@divisor+1,w,c
  3970  0021DA  5802               	subwfb	___lldiv@dividend+1,w,c
  3971  0021DC  5007               	movf	___lldiv@divisor+2,w,c
  3972  0021DE  5803               	subwfb	___lldiv@dividend+2,w,c
  3973  0021E0  5008               	movf	___lldiv@divisor+3,w,c
  3974  0021E2  5804               	subwfb	___lldiv@dividend+3,w,c
  3975  0021E4  A0D8               	btfss	status,0,c
  3976  0021E6  D009               	goto	l604
  3977  0021E8  5005               	movf	___lldiv@divisor,w,c
  3978  0021EA  5E01               	subwf	___lldiv@dividend,f,c
  3979  0021EC  5006               	movf	___lldiv@divisor+1,w,c
  3980  0021EE  5A02               	subwfb	___lldiv@dividend+1,f,c
  3981  0021F0  5007               	movf	___lldiv@divisor+2,w,c
  3982  0021F2  5A03               	subwfb	___lldiv@dividend+2,f,c
  3983  0021F4  5008               	movf	___lldiv@divisor+3,w,c
  3984  0021F6  5A04               	subwfb	___lldiv@dividend+3,f,c
  3985  0021F8  8009               	bsf	___lldiv@quotient,0,c
  3986  0021FA                     l604:
  3987  0021FA  90D8               	bcf	status,0,c
  3988  0021FC  3208               	rrcf	___lldiv@divisor+3,f,c
  3989  0021FE  3207               	rrcf	___lldiv@divisor+2,f,c
  3990  002200  3206               	rrcf	___lldiv@divisor+1,f,c
  3991  002202  3205               	rrcf	___lldiv@divisor,f,c
  3992  002204  2E0D               	decfsz	___lldiv@counter,f,c
  3993  002206  D7E1               	goto	u2760
  3994  002208                     l605:
  3995  002208  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3996  00220C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3997  002210  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3998  002214  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3999  002218  0012               	return		;funcret
  4000  00221A                     __end_of___lldiv:
  4001                           	opt stack 0
  4002                           tblptru	equ	0xFF8
  4003                           tblptrh	equ	0xFF7
  4004                           tblptrl	equ	0xFF6
  4005                           tablat	equ	0xFF5
  4006                           prodh	equ	0xFF4
  4007                           prodl	equ	0xFF3
  4008                           postinc0	equ	0xFEE
  4009                           wreg	equ	0xFE8
  4010                           postinc2	equ	0xFDE
  4011                           postdec2	equ	0xFDD
  4012                           fsr2h	equ	0xFDA
  4013                           fsr2l	equ	0xFD9
  4014                           status	equ	0xFD8
  4015                           
  4016 ;; *************** function ___fttol *****************
  4017 ;; Defined at:
  4018 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  f1              3   42[COMRAM] float 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  lval            4   52[COMRAM] unsigned long 
  4023 ;;  exp1            1   56[COMRAM] unsigned char 
  4024 ;;  sign1           1   51[COMRAM] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  4   42[COMRAM] long 
  4027 ;; Registers used:
  4028 ;;		wreg, status,2, status,0
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4034 ;;      Params:         4       0       0       0       0       0       0       0       0
  4035 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4036 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4037 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4038 ;;Total ram usage:       15 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; This function calls:
  4041 ;;		Nothing
  4042 ;; This function is called by:
  4043 ;;		_printf
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           	psect	text15
  4048  001DFC                     __ptext15:
  4049                           	opt stack 0
  4050  001DFC                     ___fttol:
  4051                           	opt stack 29
  4052                           
  4053                           ;incstack = 0
  4054  001DFC  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4055  001E00  6A30               	clrf	(??___fttol+1)& (0+255),c
  4056  001E02  6A31               	clrf	(??___fttol+2)& (0+255),c
  4057  001E04  342C               	rlcf	___fttol@f1+1,w,c
  4058  001E06  362F               	rlcf	??___fttol& (0+255),f,c
  4059  001E08  E301               	bnc	u2671
  4060  001E0A  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4061  001E0C                     u2671:
  4062  001E0C  502F               	movf	??___fttol,w,c
  4063  001E0E  6E39               	movwf	___fttol@exp1,c
  4064  001E10  5039               	movf	___fttol@exp1,w,c
  4065  001E12  A4D8               	btfss	status,2,c
  4066  001E14  D009               	goto	l564
  4067  001E16  0E00               	movlw	0
  4068  001E18  6E2B               	movwf	?___fttol,c
  4069  001E1A  0E00               	movlw	0
  4070  001E1C  6E2C               	movwf	?___fttol+1,c
  4071  001E1E  0E00               	movlw	0
  4072  001E20  6E2D               	movwf	?___fttol+2,c
  4073  001E22  0E00               	movlw	0
  4074  001E24  6E2E               	movwf	?___fttol+3,c
  4075  001E26  0012               	return	
  4076  001E28                     l564:
  4077  001E28  0E17               	movlw	23
  4078  001E2A  6E2F               	movwf	??___fttol& (0+255),c
  4079  001E2C  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4080  001E30  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4081  001E34  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4082  001E38  282F               	incf	??___fttol,w,c
  4083  001E3A  6E33               	movwf	(??___fttol+4)& (0+255),c
  4084  001E3C  D004               	goto	u2690
  4085  001E3E                     u2695:
  4086  001E3E  90D8               	bcf	status,0,c
  4087  001E40  3232               	rrcf	??___fttol+3,f,c
  4088  001E42  3231               	rrcf	??___fttol+2,f,c
  4089  001E44  3230               	rrcf	??___fttol+1,f,c
  4090  001E46                     u2690:
  4091  001E46  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4092  001E48  D7FA               	goto	u2695
  4093  001E4A  5030               	movf	??___fttol+1,w,c
  4094  001E4C  6E34               	movwf	___fttol@sign1,c
  4095  001E4E  8E2C               	bsf	___fttol@f1+1,7,c
  4096  001E50  0EFF               	movlw	255
  4097  001E52  162B               	andwf	___fttol@f1,f,c
  4098  001E54  0EFF               	movlw	255
  4099  001E56  162C               	andwf	___fttol@f1+1,f,c
  4100  001E58  0E00               	movlw	0
  4101  001E5A  162D               	andwf	___fttol@f1+2,f,c
  4102  001E5C  502B               	movf	___fttol@f1,w,c
  4103  001E5E  6E35               	movwf	___fttol@lval,c
  4104  001E60  502C               	movf	___fttol@f1+1,w,c
  4105  001E62  6E36               	movwf	___fttol@lval+1,c
  4106  001E64  502D               	movf	___fttol@f1+2,w,c
  4107  001E66  6E37               	movwf	___fttol@lval+2,c
  4108  001E68  6A38               	clrf	___fttol@lval+3,c
  4109  001E6A  0E8E               	movlw	142
  4110  001E6C  5E39               	subwf	___fttol@exp1,f,c
  4111  001E6E  AE39               	btfss	___fttol@exp1,7,c
  4112  001E70  D016               	goto	l566
  4113  001E72  5039               	movf	___fttol@exp1,w,c
  4114  001E74  0A80               	xorlw	128
  4115  001E76  0F8F               	addlw	143
  4116  001E78  B0D8               	btfsc	status,0,c
  4117  001E7A  D009               	goto	l567
  4118  001E7C  0E00               	movlw	0
  4119  001E7E  6E2B               	movwf	?___fttol,c
  4120  001E80  0E00               	movlw	0
  4121  001E82  6E2C               	movwf	?___fttol+1,c
  4122  001E84  0E00               	movlw	0
  4123  001E86  6E2D               	movwf	?___fttol+2,c
  4124  001E88  0E00               	movlw	0
  4125  001E8A  6E2E               	movwf	?___fttol+3,c
  4126  001E8C  0012               	return	
  4127  001E8E                     l567:
  4128  001E8E  90D8               	bcf	status,0,c
  4129  001E90  3238               	rrcf	___fttol@lval+3,f,c
  4130  001E92  3237               	rrcf	___fttol@lval+2,f,c
  4131  001E94  3236               	rrcf	___fttol@lval+1,f,c
  4132  001E96  3235               	rrcf	___fttol@lval,f,c
  4133  001E98  3E39               	incfsz	___fttol@exp1,f,c
  4134  001E9A  D7F9               	goto	l567
  4135  001E9C  D015               	goto	u2730
  4136  001E9E                     l566:
  4137  001E9E  0E17               	movlw	23
  4138  001EA0  6439               	cpfsgt	___fttol@exp1,c
  4139  001EA2  D00F               	goto	l572
  4140  001EA4  0E00               	movlw	0
  4141  001EA6  6E2B               	movwf	?___fttol,c
  4142  001EA8  0E00               	movlw	0
  4143  001EAA  6E2C               	movwf	?___fttol+1,c
  4144  001EAC  0E00               	movlw	0
  4145  001EAE  6E2D               	movwf	?___fttol+2,c
  4146  001EB0  0E00               	movlw	0
  4147  001EB2  6E2E               	movwf	?___fttol+3,c
  4148  001EB4  0012               	return	
  4149  001EB6  90D8               	bcf	status,0,c
  4150  001EB8  3635               	rlcf	___fttol@lval,f,c
  4151  001EBA  3636               	rlcf	___fttol@lval+1,f,c
  4152  001EBC  3637               	rlcf	___fttol@lval+2,f,c
  4153  001EBE  3638               	rlcf	___fttol@lval+3,f,c
  4154  001EC0  0639               	decf	___fttol@exp1,f,c
  4155  001EC2                     l572:
  4156  001EC2  5039               	movf	___fttol@exp1,w,c
  4157  001EC4  A4D8               	btfss	status,2,c
  4158  001EC6  D7F7               	goto	l573
  4159  001EC8                     u2730:
  4160  001EC8  5034               	movf	___fttol@sign1,w,c
  4161  001ECA  B4D8               	btfsc	status,2,c
  4162  001ECC  D008               	goto	l575
  4163  001ECE  1E38               	comf	___fttol@lval+3,f,c
  4164  001ED0  1E37               	comf	___fttol@lval+2,f,c
  4165  001ED2  1E36               	comf	___fttol@lval+1,f,c
  4166  001ED4  6C35               	negf	___fttol@lval,c
  4167  001ED6  0E00               	movlw	0
  4168  001ED8  2236               	addwfc	___fttol@lval+1,f,c
  4169  001EDA  2237               	addwfc	___fttol@lval+2,f,c
  4170  001EDC  2238               	addwfc	___fttol@lval+3,f,c
  4171  001EDE                     l575:
  4172  001EDE  C035  F02B         	movff	___fttol@lval,?___fttol
  4173  001EE2  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4174  001EE6  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4175  001EEA  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4176  001EEE  0012               	return	
  4177  001EF0                     __end_of___fttol:
  4178                           	opt stack 0
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           postinc2	equ	0xFDE
  4188                           postdec2	equ	0xFDD
  4189                           fsr2h	equ	0xFDA
  4190                           fsr2l	equ	0xFD9
  4191                           status	equ	0xFD8
  4192                           
  4193 ;; *************** function ___ftsub *****************
  4194 ;; Defined at:
  4195 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  f1              3   57[COMRAM] float 
  4198 ;;  f2              3   60[COMRAM] float 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  3   57[COMRAM] float 
  4203 ;; Registers used:
  4204 ;;		wreg, status,2, status,0, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4210 ;;      Params:         6       0       0       0       0       0       0       0       0
  4211 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4213 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4214 ;;Total ram usage:        6 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    2
  4217 ;; This function calls:
  4218 ;;		___ftadd
  4219 ;; This function is called by:
  4220 ;;		_printf
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           	psect	text16
  4225  00234C                     __ptext16:
  4226                           	opt stack 0
  4227  00234C                     ___ftsub:
  4228                           	opt stack 27
  4229                           
  4230                           ;incstack = 0
  4231  00234C  503D               	movf	___ftsub@f2,w,c
  4232  00234E  103E               	iorwf	___ftsub@f2+1,w,c
  4233  002350  103F               	iorwf	___ftsub@f2+2,w,c
  4234  002352  B4D8               	btfsc	status,2,c
  4235  002354  D006               	goto	l560
  4236  002356  0E00               	movlw	0
  4237  002358  1A3D               	xorwf	___ftsub@f2,f,c
  4238  00235A  0E00               	movlw	0
  4239  00235C  1A3E               	xorwf	___ftsub@f2+1,f,c
  4240  00235E  0E80               	movlw	128
  4241  002360  1A3F               	xorwf	___ftsub@f2+2,f,c
  4242  002362                     l560:
  4243  002362  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4244  002366  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4245  00236A  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4246  00236E  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4247  002372  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4248  002376  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4249  00237A  ECFA  F00B         	call	___ftadd	;wreg free
  4250  00237E  C02E  F03A         	movff	?___ftadd,?___ftsub
  4251  002382  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4252  002386  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4253  00238A  0012               	return	
  4254  00238C                     __end_of___ftsub:
  4255                           	opt stack 0
  4256                           tblptru	equ	0xFF8
  4257                           tblptrh	equ	0xFF7
  4258                           tblptrl	equ	0xFF6
  4259                           tablat	equ	0xFF5
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postinc2	equ	0xFDE
  4265                           postdec2	equ	0xFDD
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           
  4270 ;; *************** function ___ftadd *****************
  4271 ;; Defined at:
  4272 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  f1              3   45[COMRAM] float 
  4275 ;;  f2              3   48[COMRAM] float 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  exp1            1   56[COMRAM] unsigned char 
  4278 ;;  exp2            1   55[COMRAM] unsigned char 
  4279 ;;  sign            1   54[COMRAM] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  3   45[COMRAM] float 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2, status,0, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4289 ;;      Params:         6       0       0       0       0       0       0       0       0
  4290 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4291 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4292 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4293 ;;Total ram usage:       12 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    1
  4296 ;; This function calls:
  4297 ;;		___ftpack
  4298 ;; This function is called by:
  4299 ;;		_main
  4300 ;;		_printf
  4301 ;;		___ftsub
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text17
  4306  0017F4                     __ptext17:
  4307                           	opt stack 0
  4308  0017F4                     ___ftadd:
  4309                           	opt stack 27
  4310                           
  4311                           ;incstack = 0
  4312  0017F4  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4313  0017F8  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4314  0017FA  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4315  0017FC  342F               	rlcf	___ftadd@f1+1,w,c
  4316  0017FE  3634               	rlcf	??___ftadd& (0+255),f,c
  4317  001800  E301               	bnc	u2001
  4318  001802  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4319  001804                     u2001:
  4320  001804  5034               	movf	??___ftadd,w,c
  4321  001806  6E39               	movwf	___ftadd@exp1,c
  4322  001808  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4323  00180C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4324  00180E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4325  001810  3432               	rlcf	___ftadd@f2+1,w,c
  4326  001812  3634               	rlcf	??___ftadd& (0+255),f,c
  4327  001814  E301               	bnc	u2011
  4328  001816  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4329  001818                     u2011:
  4330  001818  5034               	movf	??___ftadd,w,c
  4331  00181A  6E38               	movwf	___ftadd@exp2,c
  4332  00181C  5039               	movf	___ftadd@exp1,w,c
  4333  00181E  B4D8               	btfsc	status,2,c
  4334  001820  D00B               	goto	u2040
  4335  001822  5038               	movf	___ftadd@exp2,w,c
  4336  001824  5C39               	subwf	___ftadd@exp1,w,c
  4337  001826  B0D8               	btfsc	status,0,c
  4338  001828  D00E               	goto	l478
  4339  00182A  5039               	movf	___ftadd@exp1,w,c
  4340  00182C  0800               	sublw	0
  4341  00182E  2438               	addwf	___ftadd@exp2,w,c
  4342  001830  6E34               	movwf	??___ftadd& (0+255),c
  4343  001832  0E18               	movlw	24
  4344  001834  6434               	cpfsgt	??___ftadd,c
  4345  001836  D007               	goto	l478
  4346  001838                     u2040:
  4347  001838  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4348  00183C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4349  001840  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4350  001844  0012               	return	
  4351  001846                     l478:
  4352  001846  5038               	movf	___ftadd@exp2,w,c
  4353  001848  B4D8               	btfsc	status,2,c
  4354  00184A  D00B               	goto	u2070
  4355  00184C  5039               	movf	___ftadd@exp1,w,c
  4356  00184E  5C38               	subwf	___ftadd@exp2,w,c
  4357  001850  B0D8               	btfsc	status,0,c
  4358  001852  D00E               	goto	l482
  4359  001854  5038               	movf	___ftadd@exp2,w,c
  4360  001856  0800               	sublw	0
  4361  001858  2439               	addwf	___ftadd@exp1,w,c
  4362  00185A  6E34               	movwf	??___ftadd& (0+255),c
  4363  00185C  0E18               	movlw	24
  4364  00185E  6434               	cpfsgt	??___ftadd,c
  4365  001860  D007               	goto	l482
  4366  001862                     u2070:
  4367  001862  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4368  001866  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4369  00186A  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4370  00186E  0012               	return	
  4371  001870                     l482:
  4372  001870  0E06               	movlw	6
  4373  001872  6E37               	movwf	___ftadd@sign,c
  4374  001874  BE30               	btfsc	___ftadd@f1+2,7,c
  4375  001876  8E37               	bsf	___ftadd@sign,7,c
  4376  001878  BE33               	btfsc	___ftadd@f2+2,7,c
  4377  00187A  8C37               	bsf	___ftadd@sign,6,c
  4378  00187C  8E2F               	bsf	___ftadd@f1+1,7,c
  4379  00187E  0EFF               	movlw	255
  4380  001880  162E               	andwf	___ftadd@f1,f,c
  4381  001882  0EFF               	movlw	255
  4382  001884  162F               	andwf	___ftadd@f1+1,f,c
  4383  001886  0E00               	movlw	0
  4384  001888  1630               	andwf	___ftadd@f1+2,f,c
  4385  00188A  8E32               	bsf	___ftadd@f2+1,7,c
  4386  00188C  0EFF               	movlw	255
  4387  00188E  1631               	andwf	___ftadd@f2,f,c
  4388  001890  0EFF               	movlw	255
  4389  001892  1632               	andwf	___ftadd@f2+1,f,c
  4390  001894  0E00               	movlw	0
  4391  001896  1633               	andwf	___ftadd@f2+2,f,c
  4392  001898  5038               	movf	___ftadd@exp2,w,c
  4393  00189A  5C39               	subwf	___ftadd@exp1,w,c
  4394  00189C  B0D8               	btfsc	status,0,c
  4395  00189E  D01B               	goto	l487
  4396  0018A0                     u2100:
  4397  0018A0  90D8               	bcf	status,0,c
  4398  0018A2  3631               	rlcf	___ftadd@f2,f,c
  4399  0018A4  3632               	rlcf	___ftadd@f2+1,f,c
  4400  0018A6  3633               	rlcf	___ftadd@f2+2,f,c
  4401  0018A8  0638               	decf	___ftadd@exp2,f,c
  4402  0018AA  5039               	movf	___ftadd@exp1,w,c
  4403  0018AC  1838               	xorwf	___ftadd@exp2,w,c
  4404  0018AE  B4D8               	btfsc	status,2,c
  4405  0018B0  D00D               	goto	l492
  4406  0018B2  0637               	decf	___ftadd@sign,f,c
  4407  0018B4  C037  F034         	movff	___ftadd@sign,??___ftadd
  4408  0018B8  0E07               	movlw	7
  4409  0018BA  1634               	andwf	??___ftadd,f,c
  4410  0018BC  B4D8               	btfsc	status,2,c
  4411  0018BE  D006               	goto	l492
  4412  0018C0  D7EF               	goto	u2100
  4413  0018C2  90D8               	bcf	status,0,c
  4414  0018C4  3230               	rrcf	___ftadd@f1+2,f,c
  4415  0018C6  322F               	rrcf	___ftadd@f1+1,f,c
  4416  0018C8  322E               	rrcf	___ftadd@f1,f,c
  4417  0018CA  2A39               	incf	___ftadd@exp1,f,c
  4418  0018CC                     l492:
  4419  0018CC  5038               	movf	___ftadd@exp2,w,c
  4420  0018CE  1839               	xorwf	___ftadd@exp1,w,c
  4421  0018D0  B4D8               	btfsc	status,2,c
  4422  0018D2  D01F               	goto	u2170
  4423  0018D4  D7F6               	goto	l493
  4424  0018D6                     l487:
  4425  0018D6  5039               	movf	___ftadd@exp1,w,c
  4426  0018D8  5C38               	subwf	___ftadd@exp2,w,c
  4427  0018DA  B0D8               	btfsc	status,0,c
  4428  0018DC  D01A               	goto	u2170
  4429  0018DE                     u2140:
  4430  0018DE  90D8               	bcf	status,0,c
  4431  0018E0  362E               	rlcf	___ftadd@f1,f,c
  4432  0018E2  362F               	rlcf	___ftadd@f1+1,f,c
  4433  0018E4  3630               	rlcf	___ftadd@f1+2,f,c
  4434  0018E6  0639               	decf	___ftadd@exp1,f,c
  4435  0018E8  5039               	movf	___ftadd@exp1,w,c
  4436  0018EA  1838               	xorwf	___ftadd@exp2,w,c
  4437  0018EC  B4D8               	btfsc	status,2,c
  4438  0018EE  D00D               	goto	l501
  4439  0018F0  0637               	decf	___ftadd@sign,f,c
  4440  0018F2  C037  F034         	movff	___ftadd@sign,??___ftadd
  4441  0018F6  0E07               	movlw	7
  4442  0018F8  1634               	andwf	??___ftadd,f,c
  4443  0018FA  B4D8               	btfsc	status,2,c
  4444  0018FC  D006               	goto	l501
  4445  0018FE  D7EF               	goto	u2140
  4446  001900  90D8               	bcf	status,0,c
  4447  001902  3233               	rrcf	___ftadd@f2+2,f,c
  4448  001904  3232               	rrcf	___ftadd@f2+1,f,c
  4449  001906  3231               	rrcf	___ftadd@f2,f,c
  4450  001908  2A38               	incf	___ftadd@exp2,f,c
  4451  00190A                     l501:
  4452  00190A  5038               	movf	___ftadd@exp2,w,c
  4453  00190C  1839               	xorwf	___ftadd@exp1,w,c
  4454  00190E  A4D8               	btfss	status,2,c
  4455  001910  D7F7               	goto	l502
  4456  001912                     u2170:
  4457  001912  AE37               	btfss	___ftadd@sign,7,c
  4458  001914  D00C               	goto	l504
  4459  001916  0EFF               	movlw	255
  4460  001918  1A2E               	xorwf	___ftadd@f1,f,c
  4461  00191A  0EFF               	movlw	255
  4462  00191C  1A2F               	xorwf	___ftadd@f1+1,f,c
  4463  00191E  0EFF               	movlw	255
  4464  001920  1A30               	xorwf	___ftadd@f1+2,f,c
  4465  001922  0E01               	movlw	1
  4466  001924  262E               	addwf	___ftadd@f1,f,c
  4467  001926  0E00               	movlw	0
  4468  001928  222F               	addwfc	___ftadd@f1+1,f,c
  4469  00192A  0E00               	movlw	0
  4470  00192C  2230               	addwfc	___ftadd@f1+2,f,c
  4471  00192E                     l504:
  4472  00192E  AC37               	btfss	___ftadd@sign,6,c
  4473  001930  D00C               	goto	l505
  4474  001932  0EFF               	movlw	255
  4475  001934  1A31               	xorwf	___ftadd@f2,f,c
  4476  001936  0EFF               	movlw	255
  4477  001938  1A32               	xorwf	___ftadd@f2+1,f,c
  4478  00193A  0EFF               	movlw	255
  4479  00193C  1A33               	xorwf	___ftadd@f2+2,f,c
  4480  00193E  0E01               	movlw	1
  4481  001940  2631               	addwf	___ftadd@f2,f,c
  4482  001942  0E00               	movlw	0
  4483  001944  2232               	addwfc	___ftadd@f2+1,f,c
  4484  001946  0E00               	movlw	0
  4485  001948  2233               	addwfc	___ftadd@f2+2,f,c
  4486  00194A                     l505:
  4487  00194A  0E00               	movlw	0
  4488  00194C  6E37               	movwf	___ftadd@sign,c
  4489  00194E  502E               	movf	___ftadd@f1,w,c
  4490  001950  2631               	addwf	___ftadd@f2,f,c
  4491  001952  502F               	movf	___ftadd@f1+1,w,c
  4492  001954  2232               	addwfc	___ftadd@f2+1,f,c
  4493  001956  5030               	movf	___ftadd@f1+2,w,c
  4494  001958  2233               	addwfc	___ftadd@f2+2,f,c
  4495  00195A  AE33               	btfss	___ftadd@f2+2,7,c
  4496  00195C  D00E               	goto	l506
  4497  00195E  0EFF               	movlw	255
  4498  001960  1A31               	xorwf	___ftadd@f2,f,c
  4499  001962  0EFF               	movlw	255
  4500  001964  1A32               	xorwf	___ftadd@f2+1,f,c
  4501  001966  0EFF               	movlw	255
  4502  001968  1A33               	xorwf	___ftadd@f2+2,f,c
  4503  00196A  0E01               	movlw	1
  4504  00196C  2631               	addwf	___ftadd@f2,f,c
  4505  00196E  0E00               	movlw	0
  4506  001970  2232               	addwfc	___ftadd@f2+1,f,c
  4507  001972  0E00               	movlw	0
  4508  001974  2233               	addwfc	___ftadd@f2+2,f,c
  4509  001976  0E01               	movlw	1
  4510  001978  6E37               	movwf	___ftadd@sign,c
  4511  00197A                     l506:
  4512  00197A  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4513  00197E  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4514  001982  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4515  001986  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4516  00198A  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4517  00198E  ECEB  F00F         	call	___ftpack	;wreg free
  4518  001992  C001  F02E         	movff	?___ftpack,?___ftadd
  4519  001996  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4520  00199A  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4521  00199E  0012               	return	
  4522  0019A0                     __end_of___ftadd:
  4523                           	opt stack 0
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           postinc0	equ	0xFEE
  4531                           wreg	equ	0xFE8
  4532                           postinc2	equ	0xFDE
  4533                           postdec2	equ	0xFDD
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function ___ftneg *****************
  4539 ;; Defined at:
  4540 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  f1              3    0[COMRAM] float 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;		None
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  3    0[COMRAM] float 
  4547 ;; Registers used:
  4548 ;;		wreg, status,2, status,0
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4554 ;;      Params:         3       0       0       0       0       0       0       0       0
  4555 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4557 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4558 ;;Total ram usage:        3 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;;		_printf
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           	psect	text18
  4569  0024B2                     __ptext18:
  4570                           	opt stack 0
  4571  0024B2                     ___ftneg:
  4572                           	opt stack 29
  4573                           
  4574                           ;incstack = 0
  4575  0024B2  5001               	movf	___ftneg@f1,w,c
  4576  0024B4  1002               	iorwf	___ftneg@f1+1,w,c
  4577  0024B6  1003               	iorwf	___ftneg@f1+2,w,c
  4578  0024B8  B4D8               	btfsc	status,2,c
  4579  0024BA  D006               	goto	l554
  4580  0024BC  0E00               	movlw	0
  4581  0024BE  1A01               	xorwf	___ftneg@f1,f,c
  4582  0024C0  0E00               	movlw	0
  4583  0024C2  1A02               	xorwf	___ftneg@f1+1,f,c
  4584  0024C4  0E80               	movlw	128
  4585  0024C6  1A03               	xorwf	___ftneg@f1+2,f,c
  4586  0024C8                     l554:
  4587  0024C8  C001  F001         	movff	___ftneg@f1,?___ftneg
  4588  0024CC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4589  0024D0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4590  0024D4  0012               	return		;funcret
  4591  0024D6                     __end_of___ftneg:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           postinc0	equ	0xFEE
  4600                           wreg	equ	0xFE8
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function ___ftge *****************
  4608 ;; Defined at:
  4609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  ff1             3    0[COMRAM] float 
  4612 ;;  ff2             3    3[COMRAM] float 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;		None               void
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4624 ;;      Params:         6       0       0       0       0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4626 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4627 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4628 ;;Total ram usage:        9 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_printf
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text19
  4638  002084                     __ptext19:
  4639                           	opt stack 0
  4640  002084                     ___ftge:
  4641                           	opt stack 29
  4642                           
  4643                           ;incstack = 0
  4644  002084  AE03               	btfss	___ftge@ff1+2,7,c
  4645  002086  D016               	goto	l536
  4646  002088  C001  F007         	movff	___ftge@ff1,??___ftge
  4647  00208C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4648  002090  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4649  002094  1E07               	comf	??___ftge,f,c
  4650  002096  1E08               	comf	??___ftge+1,f,c
  4651  002098  1E09               	comf	??___ftge+2,f,c
  4652  00209A  2A07               	incf	??___ftge,f,c
  4653  00209C  0E00               	movlw	0
  4654  00209E  2208               	addwfc	??___ftge+1,f,c
  4655  0020A0  2209               	addwfc	??___ftge+2,f,c
  4656  0020A2  0E00               	movlw	0
  4657  0020A4  2407               	addwf	??___ftge,w,c
  4658  0020A6  6E01               	movwf	___ftge@ff1,c
  4659  0020A8  0E00               	movlw	0
  4660  0020AA  2008               	addwfc	??___ftge+1,w,c
  4661  0020AC  6E02               	movwf	___ftge@ff1+1,c
  4662  0020AE  0E80               	movlw	128
  4663  0020B0  2009               	addwfc	??___ftge+2,w,c
  4664  0020B2  6E03               	movwf	___ftge@ff1+2,c
  4665  0020B4                     l536:
  4666  0020B4  AE06               	btfss	___ftge@ff2+2,7,c
  4667  0020B6  D016               	goto	l537
  4668  0020B8  C004  F007         	movff	___ftge@ff2,??___ftge
  4669  0020BC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4670  0020C0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4671  0020C4  1E07               	comf	??___ftge,f,c
  4672  0020C6  1E08               	comf	??___ftge+1,f,c
  4673  0020C8  1E09               	comf	??___ftge+2,f,c
  4674  0020CA  2A07               	incf	??___ftge,f,c
  4675  0020CC  0E00               	movlw	0
  4676  0020CE  2208               	addwfc	??___ftge+1,f,c
  4677  0020D0  2209               	addwfc	??___ftge+2,f,c
  4678  0020D2  0E00               	movlw	0
  4679  0020D4  2407               	addwf	??___ftge,w,c
  4680  0020D6  6E04               	movwf	___ftge@ff2,c
  4681  0020D8  0E00               	movlw	0
  4682  0020DA  2008               	addwfc	??___ftge+1,w,c
  4683  0020DC  6E05               	movwf	___ftge@ff2+1,c
  4684  0020DE  0E80               	movlw	128
  4685  0020E0  2009               	addwfc	??___ftge+2,w,c
  4686  0020E2  6E06               	movwf	___ftge@ff2+2,c
  4687  0020E4                     l537:
  4688  0020E4  0E00               	movlw	0
  4689  0020E6  1A01               	xorwf	___ftge@ff1,f,c
  4690  0020E8  0E00               	movlw	0
  4691  0020EA  1A02               	xorwf	___ftge@ff1+1,f,c
  4692  0020EC  0E80               	movlw	128
  4693  0020EE  1A03               	xorwf	___ftge@ff1+2,f,c
  4694  0020F0  0E00               	movlw	0
  4695  0020F2  1A04               	xorwf	___ftge@ff2,f,c
  4696  0020F4  0E00               	movlw	0
  4697  0020F6  1A05               	xorwf	___ftge@ff2+1,f,c
  4698  0020F8  0E80               	movlw	128
  4699  0020FA  1A06               	xorwf	___ftge@ff2+2,f,c
  4700  0020FC  5004               	movf	___ftge@ff2,w,c
  4701  0020FE  5C01               	subwf	___ftge@ff1,w,c
  4702  002100  5005               	movf	___ftge@ff2+1,w,c
  4703  002102  5802               	subwfb	___ftge@ff1+1,w,c
  4704  002104  5006               	movf	___ftge@ff2+2,w,c
  4705  002106  5803               	subwfb	___ftge@ff1+2,w,c
  4706  002108  B0D8               	btfsc	status,0,c
  4707  00210A  D002               	goto	l1901
  4708  00210C  90D8               	bcf	status,0,c
  4709  00210E  0012               	return	
  4710  002110                     l1901:
  4711  002110  80D8               	bsf	status,0,c
  4712  002112  0012               	return	
  4713  002114                     __end_of___ftge:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postinc2	equ	0xFDE
  4724                           postdec2	equ	0xFDD
  4725                           fsr2h	equ	0xFDA
  4726                           fsr2l	equ	0xFD9
  4727                           status	equ	0xFD8
  4728                           
  4729 ;; *************** function _posicionar_cursor *****************
  4730 ;; Defined at:
  4731 ;;		line 93 in file "newmain.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  linha           2    3[COMRAM] int 
  4734 ;;  coluna          2    5[COMRAM] int 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;		None
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1    wreg      void 
  4739 ;; Registers used:
  4740 ;;		wreg, status,2, status,0, cstack
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4746 ;;      Params:         4       0       0       0       0       0       0       0       0
  4747 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4748 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4749 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4750 ;;Total ram usage:        4 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    2
  4753 ;; This function calls:
  4754 ;;		_enviar_comando_lcd
  4755 ;; This function is called by:
  4756 ;;		_main
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           	psect	text20
  4761  001284                     __ptext20:
  4762                           	opt stack 0
  4763  001284                     _posicionar_cursor:
  4764                           	opt stack 28
  4765                           
  4766                           ;newmain.c: 96: if ((linha == 1) && (coluna == 1)) enviar_comando_lcd(0b10000000);
  4767                           
  4768                           ;incstack = 0
  4769  001284  0404               	decf	posicionar_cursor@linha,w,c
  4770  001286  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4771  001288  A4D8               	btfss	status,2,c
  4772  00128A  D007               	goto	l68
  4773  00128C  0406               	decf	posicionar_cursor@coluna,w,c
  4774  00128E  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4775  001290  A4D8               	btfss	status,2,c
  4776  001292  D003               	goto	l68
  4777  001294  0E80               	movlw	128
  4778  001296  EC33  F012         	call	_enviar_comando_lcd
  4779  00129A                     l68:
  4780                           
  4781                           ;newmain.c: 97: if ((linha == 1) && (coluna == 2)) enviar_comando_lcd(0b10000001);
  4782  00129A  0404               	decf	posicionar_cursor@linha,w,c
  4783  00129C  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4784  00129E  A4D8               	btfss	status,2,c
  4785  0012A0  D008               	goto	l69
  4786  0012A2  0E02               	movlw	2
  4787  0012A4  1806               	xorwf	posicionar_cursor@coluna,w,c
  4788  0012A6  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4789  0012A8  A4D8               	btfss	status,2,c
  4790  0012AA  D003               	goto	l69
  4791  0012AC  0E81               	movlw	129
  4792  0012AE  EC33  F012         	call	_enviar_comando_lcd
  4793  0012B2                     l69:
  4794                           
  4795                           ;newmain.c: 98: if ((linha == 1) && (coluna == 3)) enviar_comando_lcd(0b10000010);
  4796  0012B2  0404               	decf	posicionar_cursor@linha,w,c
  4797  0012B4  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4798  0012B6  A4D8               	btfss	status,2,c
  4799  0012B8  D008               	goto	l70
  4800  0012BA  0E03               	movlw	3
  4801  0012BC  1806               	xorwf	posicionar_cursor@coluna,w,c
  4802  0012BE  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4803  0012C0  A4D8               	btfss	status,2,c
  4804  0012C2  D003               	goto	l70
  4805  0012C4  0E82               	movlw	130
  4806  0012C6  EC33  F012         	call	_enviar_comando_lcd
  4807  0012CA                     l70:
  4808                           
  4809                           ;newmain.c: 99: if ((linha == 1) && (coluna == 4)) enviar_comando_lcd(0b10000011);
  4810  0012CA  0404               	decf	posicionar_cursor@linha,w,c
  4811  0012CC  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4812  0012CE  A4D8               	btfss	status,2,c
  4813  0012D0  D008               	goto	l71
  4814  0012D2  0E04               	movlw	4
  4815  0012D4  1806               	xorwf	posicionar_cursor@coluna,w,c
  4816  0012D6  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4817  0012D8  A4D8               	btfss	status,2,c
  4818  0012DA  D003               	goto	l71
  4819  0012DC  0E83               	movlw	131
  4820  0012DE  EC33  F012         	call	_enviar_comando_lcd
  4821  0012E2                     l71:
  4822                           
  4823                           ;newmain.c: 100: if ((linha == 1) && (coluna == 5)) enviar_comando_lcd(0b10000100);
  4824  0012E2  0404               	decf	posicionar_cursor@linha,w,c
  4825  0012E4  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4826  0012E6  A4D8               	btfss	status,2,c
  4827  0012E8  D008               	goto	l72
  4828  0012EA  0E05               	movlw	5
  4829  0012EC  1806               	xorwf	posicionar_cursor@coluna,w,c
  4830  0012EE  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4831  0012F0  A4D8               	btfss	status,2,c
  4832  0012F2  D003               	goto	l72
  4833  0012F4  0E84               	movlw	132
  4834  0012F6  EC33  F012         	call	_enviar_comando_lcd
  4835  0012FA                     l72:
  4836                           
  4837                           ;newmain.c: 101: if ((linha == 1) && (coluna == 6)) enviar_comando_lcd(0b10000101);
  4838  0012FA  0404               	decf	posicionar_cursor@linha,w,c
  4839  0012FC  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4840  0012FE  A4D8               	btfss	status,2,c
  4841  001300  D008               	goto	l73
  4842  001302  0E06               	movlw	6
  4843  001304  1806               	xorwf	posicionar_cursor@coluna,w,c
  4844  001306  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4845  001308  A4D8               	btfss	status,2,c
  4846  00130A  D003               	goto	l73
  4847  00130C  0E85               	movlw	133
  4848  00130E  EC33  F012         	call	_enviar_comando_lcd
  4849  001312                     l73:
  4850                           
  4851                           ;newmain.c: 102: if ((linha == 1) && (coluna == 7)) enviar_comando_lcd(0b10000110);
  4852  001312  0404               	decf	posicionar_cursor@linha,w,c
  4853  001314  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4854  001316  A4D8               	btfss	status,2,c
  4855  001318  D008               	goto	l74
  4856  00131A  0E07               	movlw	7
  4857  00131C  1806               	xorwf	posicionar_cursor@coluna,w,c
  4858  00131E  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4859  001320  A4D8               	btfss	status,2,c
  4860  001322  D003               	goto	l74
  4861  001324  0E86               	movlw	134
  4862  001326  EC33  F012         	call	_enviar_comando_lcd
  4863  00132A                     l74:
  4864                           
  4865                           ;newmain.c: 103: if ((linha == 1) && (coluna == 8)) enviar_comando_lcd(0b10000111);
  4866  00132A  0404               	decf	posicionar_cursor@linha,w,c
  4867  00132C  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4868  00132E  A4D8               	btfss	status,2,c
  4869  001330  D008               	goto	l75
  4870  001332  0E08               	movlw	8
  4871  001334  1806               	xorwf	posicionar_cursor@coluna,w,c
  4872  001336  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4873  001338  A4D8               	btfss	status,2,c
  4874  00133A  D003               	goto	l75
  4875  00133C  0E87               	movlw	135
  4876  00133E  EC33  F012         	call	_enviar_comando_lcd
  4877  001342                     l75:
  4878                           
  4879                           ;newmain.c: 104: if ((linha == 1) && (coluna == 9)) enviar_comando_lcd(0b10001000);
  4880  001342  0404               	decf	posicionar_cursor@linha,w,c
  4881  001344  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4882  001346  A4D8               	btfss	status,2,c
  4883  001348  D008               	goto	l76
  4884  00134A  0E09               	movlw	9
  4885  00134C  1806               	xorwf	posicionar_cursor@coluna,w,c
  4886  00134E  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4887  001350  A4D8               	btfss	status,2,c
  4888  001352  D003               	goto	l76
  4889  001354  0E88               	movlw	136
  4890  001356  EC33  F012         	call	_enviar_comando_lcd
  4891  00135A                     l76:
  4892                           
  4893                           ;newmain.c: 105: if ((linha == 1) && (coluna == 10)) enviar_comando_lcd(0b10001001);
  4894  00135A  0404               	decf	posicionar_cursor@linha,w,c
  4895  00135C  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4896  00135E  A4D8               	btfss	status,2,c
  4897  001360  D008               	goto	l77
  4898  001362  0E0A               	movlw	10
  4899  001364  1806               	xorwf	posicionar_cursor@coluna,w,c
  4900  001366  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4901  001368  A4D8               	btfss	status,2,c
  4902  00136A  D003               	goto	l77
  4903  00136C  0E89               	movlw	137
  4904  00136E  EC33  F012         	call	_enviar_comando_lcd
  4905  001372                     l77:
  4906                           
  4907                           ;newmain.c: 106: if ((linha == 1) && (coluna == 11)) enviar_comando_lcd(0b10001010);
  4908  001372  0404               	decf	posicionar_cursor@linha,w,c
  4909  001374  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4910  001376  A4D8               	btfss	status,2,c
  4911  001378  D008               	goto	l78
  4912  00137A  0E0B               	movlw	11
  4913  00137C  1806               	xorwf	posicionar_cursor@coluna,w,c
  4914  00137E  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4915  001380  A4D8               	btfss	status,2,c
  4916  001382  D003               	goto	l78
  4917  001384  0E8A               	movlw	138
  4918  001386  EC33  F012         	call	_enviar_comando_lcd
  4919  00138A                     l78:
  4920                           
  4921                           ;newmain.c: 107: if ((linha == 1) && (coluna == 12)) enviar_comando_lcd(0b10001011);
  4922  00138A  0404               	decf	posicionar_cursor@linha,w,c
  4923  00138C  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4924  00138E  A4D8               	btfss	status,2,c
  4925  001390  D008               	goto	l79
  4926  001392  0E0C               	movlw	12
  4927  001394  1806               	xorwf	posicionar_cursor@coluna,w,c
  4928  001396  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4929  001398  A4D8               	btfss	status,2,c
  4930  00139A  D003               	goto	l79
  4931  00139C  0E8B               	movlw	139
  4932  00139E  EC33  F012         	call	_enviar_comando_lcd
  4933  0013A2                     l79:
  4934                           
  4935                           ;newmain.c: 108: if ((linha == 1) && (coluna == 13)) enviar_comando_lcd(0b10001100);
  4936  0013A2  0404               	decf	posicionar_cursor@linha,w,c
  4937  0013A4  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4938  0013A6  A4D8               	btfss	status,2,c
  4939  0013A8  D008               	goto	l80
  4940  0013AA  0E0D               	movlw	13
  4941  0013AC  1806               	xorwf	posicionar_cursor@coluna,w,c
  4942  0013AE  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4943  0013B0  A4D8               	btfss	status,2,c
  4944  0013B2  D003               	goto	l80
  4945  0013B4  0E8C               	movlw	140
  4946  0013B6  EC33  F012         	call	_enviar_comando_lcd
  4947  0013BA                     l80:
  4948                           
  4949                           ;newmain.c: 109: if ((linha == 1) && (coluna == 14)) enviar_comando_lcd(0b10001101);
  4950  0013BA  0404               	decf	posicionar_cursor@linha,w,c
  4951  0013BC  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4952  0013BE  A4D8               	btfss	status,2,c
  4953  0013C0  D008               	goto	l81
  4954  0013C2  0E0E               	movlw	14
  4955  0013C4  1806               	xorwf	posicionar_cursor@coluna,w,c
  4956  0013C6  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4957  0013C8  A4D8               	btfss	status,2,c
  4958  0013CA  D003               	goto	l81
  4959  0013CC  0E8D               	movlw	141
  4960  0013CE  EC33  F012         	call	_enviar_comando_lcd
  4961  0013D2                     l81:
  4962                           
  4963                           ;newmain.c: 110: if ((linha == 1) && (coluna == 15)) enviar_comando_lcd(0b10001110);
  4964  0013D2  0404               	decf	posicionar_cursor@linha,w,c
  4965  0013D4  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4966  0013D6  A4D8               	btfss	status,2,c
  4967  0013D8  D008               	goto	l82
  4968  0013DA  0E0F               	movlw	15
  4969  0013DC  1806               	xorwf	posicionar_cursor@coluna,w,c
  4970  0013DE  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4971  0013E0  A4D8               	btfss	status,2,c
  4972  0013E2  D003               	goto	l82
  4973  0013E4  0E8E               	movlw	142
  4974  0013E6  EC33  F012         	call	_enviar_comando_lcd
  4975  0013EA                     l82:
  4976                           
  4977                           ;newmain.c: 111: if ((linha == 1) && (coluna == 16)) enviar_comando_lcd(0b10001111);
  4978  0013EA  0404               	decf	posicionar_cursor@linha,w,c
  4979  0013EC  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4980  0013EE  A4D8               	btfss	status,2,c
  4981  0013F0  D008               	goto	l83
  4982  0013F2  0E10               	movlw	16
  4983  0013F4  1806               	xorwf	posicionar_cursor@coluna,w,c
  4984  0013F6  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4985  0013F8  A4D8               	btfss	status,2,c
  4986  0013FA  D003               	goto	l83
  4987  0013FC  0E8F               	movlw	143
  4988  0013FE  EC33  F012         	call	_enviar_comando_lcd
  4989  001402                     l83:
  4990                           
  4991                           ;newmain.c: 113: if ((linha == 2) && (coluna == 1)) enviar_comando_lcd(0b11000000);
  4992  001402  0E02               	movlw	2
  4993  001404  1804               	xorwf	posicionar_cursor@linha,w,c
  4994  001406  1005               	iorwf	posicionar_cursor@linha+1,w,c
  4995  001408  A4D8               	btfss	status,2,c
  4996  00140A  D007               	goto	l84
  4997  00140C  0406               	decf	posicionar_cursor@coluna,w,c
  4998  00140E  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  4999  001410  A4D8               	btfss	status,2,c
  5000  001412  D003               	goto	l84
  5001  001414  0EC0               	movlw	192
  5002  001416  EC33  F012         	call	_enviar_comando_lcd
  5003  00141A                     l84:
  5004                           
  5005                           ;newmain.c: 114: if ((linha == 2) && (coluna == 2)) enviar_comando_lcd(0b11000001);
  5006  00141A  0E02               	movlw	2
  5007  00141C  1804               	xorwf	posicionar_cursor@linha,w,c
  5008  00141E  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5009  001420  A4D8               	btfss	status,2,c
  5010  001422  D008               	goto	l85
  5011  001424  0E02               	movlw	2
  5012  001426  1806               	xorwf	posicionar_cursor@coluna,w,c
  5013  001428  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5014  00142A  A4D8               	btfss	status,2,c
  5015  00142C  D003               	goto	l85
  5016  00142E  0EC1               	movlw	193
  5017  001430  EC33  F012         	call	_enviar_comando_lcd
  5018  001434                     l85:
  5019                           
  5020                           ;newmain.c: 115: if ((linha == 2) && (coluna == 3)) enviar_comando_lcd(0b11000010);
  5021  001434  0E02               	movlw	2
  5022  001436  1804               	xorwf	posicionar_cursor@linha,w,c
  5023  001438  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5024  00143A  A4D8               	btfss	status,2,c
  5025  00143C  D008               	goto	l86
  5026  00143E  0E03               	movlw	3
  5027  001440  1806               	xorwf	posicionar_cursor@coluna,w,c
  5028  001442  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5029  001444  A4D8               	btfss	status,2,c
  5030  001446  D003               	goto	l86
  5031  001448  0EC2               	movlw	194
  5032  00144A  EC33  F012         	call	_enviar_comando_lcd
  5033  00144E                     l86:
  5034                           
  5035                           ;newmain.c: 116: if ((linha == 2) && (coluna == 4)) enviar_comando_lcd(0b11000011);
  5036  00144E  0E02               	movlw	2
  5037  001450  1804               	xorwf	posicionar_cursor@linha,w,c
  5038  001452  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5039  001454  A4D8               	btfss	status,2,c
  5040  001456  D008               	goto	l87
  5041  001458  0E04               	movlw	4
  5042  00145A  1806               	xorwf	posicionar_cursor@coluna,w,c
  5043  00145C  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5044  00145E  A4D8               	btfss	status,2,c
  5045  001460  D003               	goto	l87
  5046  001462  0EC3               	movlw	195
  5047  001464  EC33  F012         	call	_enviar_comando_lcd
  5048  001468                     l87:
  5049                           
  5050                           ;newmain.c: 117: if ((linha == 2) && (coluna == 5)) enviar_comando_lcd(0b11000100);
  5051  001468  0E02               	movlw	2
  5052  00146A  1804               	xorwf	posicionar_cursor@linha,w,c
  5053  00146C  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5054  00146E  A4D8               	btfss	status,2,c
  5055  001470  D008               	goto	l88
  5056  001472  0E05               	movlw	5
  5057  001474  1806               	xorwf	posicionar_cursor@coluna,w,c
  5058  001476  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5059  001478  A4D8               	btfss	status,2,c
  5060  00147A  D003               	goto	l88
  5061  00147C  0EC4               	movlw	196
  5062  00147E  EC33  F012         	call	_enviar_comando_lcd
  5063  001482                     l88:
  5064                           
  5065                           ;newmain.c: 118: if ((linha == 2) && (coluna == 6)) enviar_comando_lcd(0b11000101);
  5066  001482  0E02               	movlw	2
  5067  001484  1804               	xorwf	posicionar_cursor@linha,w,c
  5068  001486  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5069  001488  A4D8               	btfss	status,2,c
  5070  00148A  D008               	goto	l89
  5071  00148C  0E06               	movlw	6
  5072  00148E  1806               	xorwf	posicionar_cursor@coluna,w,c
  5073  001490  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5074  001492  A4D8               	btfss	status,2,c
  5075  001494  D003               	goto	l89
  5076  001496  0EC5               	movlw	197
  5077  001498  EC33  F012         	call	_enviar_comando_lcd
  5078  00149C                     l89:
  5079                           
  5080                           ;newmain.c: 119: if ((linha == 2) && (coluna == 7)) enviar_comando_lcd(0b11000110);
  5081  00149C  0E02               	movlw	2
  5082  00149E  1804               	xorwf	posicionar_cursor@linha,w,c
  5083  0014A0  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5084  0014A2  A4D8               	btfss	status,2,c
  5085  0014A4  D008               	goto	l90
  5086  0014A6  0E07               	movlw	7
  5087  0014A8  1806               	xorwf	posicionar_cursor@coluna,w,c
  5088  0014AA  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5089  0014AC  A4D8               	btfss	status,2,c
  5090  0014AE  D003               	goto	l90
  5091  0014B0  0EC6               	movlw	198
  5092  0014B2  EC33  F012         	call	_enviar_comando_lcd
  5093  0014B6                     l90:
  5094                           
  5095                           ;newmain.c: 120: if ((linha == 2) && (coluna == 8)) enviar_comando_lcd(0b11000111);
  5096  0014B6  0E02               	movlw	2
  5097  0014B8  1804               	xorwf	posicionar_cursor@linha,w,c
  5098  0014BA  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5099  0014BC  A4D8               	btfss	status,2,c
  5100  0014BE  D008               	goto	l91
  5101  0014C0  0E08               	movlw	8
  5102  0014C2  1806               	xorwf	posicionar_cursor@coluna,w,c
  5103  0014C4  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5104  0014C6  A4D8               	btfss	status,2,c
  5105  0014C8  D003               	goto	l91
  5106  0014CA  0EC7               	movlw	199
  5107  0014CC  EC33  F012         	call	_enviar_comando_lcd
  5108  0014D0                     l91:
  5109                           
  5110                           ;newmain.c: 121: if ((linha == 2) && (coluna == 9)) enviar_comando_lcd(0b11001000);
  5111  0014D0  0E02               	movlw	2
  5112  0014D2  1804               	xorwf	posicionar_cursor@linha,w,c
  5113  0014D4  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5114  0014D6  A4D8               	btfss	status,2,c
  5115  0014D8  D008               	goto	l92
  5116  0014DA  0E09               	movlw	9
  5117  0014DC  1806               	xorwf	posicionar_cursor@coluna,w,c
  5118  0014DE  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5119  0014E0  A4D8               	btfss	status,2,c
  5120  0014E2  D003               	goto	l92
  5121  0014E4  0EC8               	movlw	200
  5122  0014E6  EC33  F012         	call	_enviar_comando_lcd
  5123  0014EA                     l92:
  5124                           
  5125                           ;newmain.c: 122: if ((linha == 2) && (coluna == 10)) enviar_comando_lcd(0b11001001);
  5126  0014EA  0E02               	movlw	2
  5127  0014EC  1804               	xorwf	posicionar_cursor@linha,w,c
  5128  0014EE  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5129  0014F0  A4D8               	btfss	status,2,c
  5130  0014F2  D008               	goto	l93
  5131  0014F4  0E0A               	movlw	10
  5132  0014F6  1806               	xorwf	posicionar_cursor@coluna,w,c
  5133  0014F8  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5134  0014FA  A4D8               	btfss	status,2,c
  5135  0014FC  D003               	goto	l93
  5136  0014FE  0EC9               	movlw	201
  5137  001500  EC33  F012         	call	_enviar_comando_lcd
  5138  001504                     l93:
  5139                           
  5140                           ;newmain.c: 123: if ((linha == 2) && (coluna == 11)) enviar_comando_lcd(0b11001010);
  5141  001504  0E02               	movlw	2
  5142  001506  1804               	xorwf	posicionar_cursor@linha,w,c
  5143  001508  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5144  00150A  A4D8               	btfss	status,2,c
  5145  00150C  D008               	goto	l94
  5146  00150E  0E0B               	movlw	11
  5147  001510  1806               	xorwf	posicionar_cursor@coluna,w,c
  5148  001512  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5149  001514  A4D8               	btfss	status,2,c
  5150  001516  D003               	goto	l94
  5151  001518  0ECA               	movlw	202
  5152  00151A  EC33  F012         	call	_enviar_comando_lcd
  5153  00151E                     l94:
  5154                           
  5155                           ;newmain.c: 124: if ((linha == 2) && (coluna == 12)) enviar_comando_lcd(0b11001011);
  5156  00151E  0E02               	movlw	2
  5157  001520  1804               	xorwf	posicionar_cursor@linha,w,c
  5158  001522  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5159  001524  A4D8               	btfss	status,2,c
  5160  001526  D008               	goto	l95
  5161  001528  0E0C               	movlw	12
  5162  00152A  1806               	xorwf	posicionar_cursor@coluna,w,c
  5163  00152C  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5164  00152E  A4D8               	btfss	status,2,c
  5165  001530  D003               	goto	l95
  5166  001532  0ECB               	movlw	203
  5167  001534  EC33  F012         	call	_enviar_comando_lcd
  5168  001538                     l95:
  5169                           
  5170                           ;newmain.c: 125: if ((linha == 2) && (coluna == 13)) enviar_comando_lcd(0b11001100);
  5171  001538  0E02               	movlw	2
  5172  00153A  1804               	xorwf	posicionar_cursor@linha,w,c
  5173  00153C  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5174  00153E  A4D8               	btfss	status,2,c
  5175  001540  D008               	goto	l96
  5176  001542  0E0D               	movlw	13
  5177  001544  1806               	xorwf	posicionar_cursor@coluna,w,c
  5178  001546  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5179  001548  A4D8               	btfss	status,2,c
  5180  00154A  D003               	goto	l96
  5181  00154C  0ECC               	movlw	204
  5182  00154E  EC33  F012         	call	_enviar_comando_lcd
  5183  001552                     l96:
  5184                           
  5185                           ;newmain.c: 126: if ((linha == 2) && (coluna == 14)) enviar_comando_lcd(0b11001101);
  5186  001552  0E02               	movlw	2
  5187  001554  1804               	xorwf	posicionar_cursor@linha,w,c
  5188  001556  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5189  001558  A4D8               	btfss	status,2,c
  5190  00155A  D008               	goto	l97
  5191  00155C  0E0E               	movlw	14
  5192  00155E  1806               	xorwf	posicionar_cursor@coluna,w,c
  5193  001560  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5194  001562  A4D8               	btfss	status,2,c
  5195  001564  D003               	goto	l97
  5196  001566  0ECD               	movlw	205
  5197  001568  EC33  F012         	call	_enviar_comando_lcd
  5198  00156C                     l97:
  5199                           
  5200                           ;newmain.c: 127: if ((linha == 2) && (coluna == 15)) enviar_comando_lcd(0b11001110);
  5201  00156C  0E02               	movlw	2
  5202  00156E  1804               	xorwf	posicionar_cursor@linha,w,c
  5203  001570  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5204  001572  A4D8               	btfss	status,2,c
  5205  001574  D008               	goto	l98
  5206  001576  0E0F               	movlw	15
  5207  001578  1806               	xorwf	posicionar_cursor@coluna,w,c
  5208  00157A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5209  00157C  A4D8               	btfss	status,2,c
  5210  00157E  D003               	goto	l98
  5211  001580  0ECE               	movlw	206
  5212  001582  EC33  F012         	call	_enviar_comando_lcd
  5213  001586                     l98:
  5214                           
  5215                           ;newmain.c: 128: if ((linha == 2) && (coluna == 16)) enviar_comando_lcd(0b11001111);
  5216  001586  0E02               	movlw	2
  5217  001588  1804               	xorwf	posicionar_cursor@linha,w,c
  5218  00158A  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5219  00158C  A4D8               	btfss	status,2,c
  5220  00158E  0012               	return	
  5221  001590  0E10               	movlw	16
  5222  001592  1806               	xorwf	posicionar_cursor@coluna,w,c
  5223  001594  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5224  001596  A4D8               	btfss	status,2,c
  5225  001598  0012               	return	
  5226  00159A  0ECF               	movlw	207
  5227  00159C  EC33  F012         	call	_enviar_comando_lcd
  5228  0015A0  0012               	return	
  5229  0015A2                     __end_of_posicionar_cursor:
  5230                           	opt stack 0
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           prodh	equ	0xFF4
  5236                           prodl	equ	0xFF3
  5237                           postinc0	equ	0xFEE
  5238                           wreg	equ	0xFE8
  5239                           postinc2	equ	0xFDE
  5240                           postdec2	equ	0xFDD
  5241                           fsr2h	equ	0xFDA
  5242                           fsr2l	equ	0xFD9
  5243                           status	equ	0xFD8
  5244                           
  5245 ;; *************** function _inicializa_pinos *****************
  5246 ;; Defined at:
  5247 ;;		line 149 in file "newmain.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5261 ;;      Params:         0       0       0       0       0       0       0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5264 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_main
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text21
  5275  0024EC                     __ptext21:
  5276                           	opt stack 0
  5277  0024EC                     _inicializa_pinos:
  5278                           	opt stack 30
  5279                           
  5280                           ;newmain.c: 151: TRISA = 0b00000001;
  5281                           
  5282                           ;incstack = 0
  5283  0024EC  0E01               	movlw	1
  5284  0024EE  6E92               	movwf	3986,c	;volatile
  5285                           
  5286                           ;newmain.c: 152: TRISC = 0b01110000;
  5287  0024F0  0E70               	movlw	112
  5288  0024F2  6E94               	movwf	3988,c	;volatile
  5289                           
  5290                           ;newmain.c: 153: TRISD = 0;
  5291  0024F4  0E00               	movlw	0
  5292  0024F6  6E95               	movwf	3989,c	;volatile
  5293                           
  5294                           ;newmain.c: 154: PORTC = 0;
  5295  0024F8  0E00               	movlw	0
  5296  0024FA  6E82               	movwf	3970,c	;volatile
  5297                           
  5298                           ;newmain.c: 155: PORTD = 0;
  5299  0024FC  0E00               	movlw	0
  5300  0024FE  6E83               	movwf	3971,c	;volatile
  5301  002500  0012               	return		;funcret
  5302  002502                     __end_of_inicializa_pinos:
  5303                           	opt stack 0
  5304                           tblptru	equ	0xFF8
  5305                           tblptrh	equ	0xFF7
  5306                           tblptrl	equ	0xFF6
  5307                           tablat	equ	0xFF5
  5308                           prodh	equ	0xFF4
  5309                           prodl	equ	0xFF3
  5310                           postinc0	equ	0xFEE
  5311                           wreg	equ	0xFE8
  5312                           postinc2	equ	0xFDE
  5313                           postdec2	equ	0xFDD
  5314                           fsr2h	equ	0xFDA
  5315                           fsr2l	equ	0xFD9
  5316                           status	equ	0xFD8
  5317                           
  5318 ;; *************** function _inicializa_lcd *****************
  5319 ;; Defined at:
  5320 ;;		line 72 in file "newmain.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5334 ;;      Params:         0       0       0       0       0       0       0       0       0
  5335 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5337 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5338 ;;Total ram usage:        0 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    2
  5341 ;; This function calls:
  5342 ;;		_delay_ms
  5343 ;;		_enviar_comando_lcd
  5344 ;; This function is called by:
  5345 ;;		_main
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text22
  5350  002440                     __ptext22:
  5351                           	opt stack 0
  5352  002440                     _inicializa_lcd:
  5353                           	opt stack 28
  5354                           
  5355                           ;newmain.c: 85: enviar_comando_lcd(0b00111000);
  5356                           
  5357                           ;incstack = 0
  5358  002440  0E38               	movlw	56
  5359  002442  EC33  F012         	call	_enviar_comando_lcd
  5360                           
  5361                           ;newmain.c: 86: enviar_comando_lcd(0b00001100);
  5362  002446  0E0C               	movlw	12
  5363  002448  EC33  F012         	call	_enviar_comando_lcd
  5364                           
  5365                           ;newmain.c: 87: enviar_comando_lcd(0b00000110);
  5366  00244C  0E06               	movlw	6
  5367  00244E  EC33  F012         	call	_enviar_comando_lcd
  5368                           
  5369                           ;newmain.c: 88: enviar_comando_lcd(0b00000001);
  5370  002452  0E01               	movlw	1
  5371  002454  EC33  F012         	call	_enviar_comando_lcd
  5372                           
  5373                           ;newmain.c: 89: delay_ms(5);
  5374  002458  0E00               	movlw	0
  5375  00245A  6E02               	movwf	delay_ms@tempo+1,c
  5376  00245C  0E05               	movlw	5
  5377  00245E  6E01               	movwf	delay_ms@tempo,c
  5378  002460  ECE2  F011         	call	_delay_ms	;wreg free
  5379  002464  0012               	return		;funcret
  5380  002466                     __end_of_inicializa_lcd:
  5381                           	opt stack 0
  5382                           tblptru	equ	0xFF8
  5383                           tblptrh	equ	0xFF7
  5384                           tblptrl	equ	0xFF6
  5385                           tablat	equ	0xFF5
  5386                           prodh	equ	0xFF4
  5387                           prodl	equ	0xFF3
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postinc2	equ	0xFDE
  5391                           postdec2	equ	0xFDD
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function _enviar_comando_lcd *****************
  5397 ;; Defined at:
  5398 ;;		line 47 in file "newmain.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;  valor           1    wreg     unsigned char 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  valor           1    2[COMRAM] unsigned char 
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      void 
  5405 ;; Registers used:
  5406 ;;		wreg, status,2, status,0, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5412 ;;      Params:         0       0       0       0       0       0       0       0       0
  5413 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5415 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5416 ;;Total ram usage:        1 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    1
  5419 ;; This function calls:
  5420 ;;		_delay_ms
  5421 ;; This function is called by:
  5422 ;;		_inicializa_lcd
  5423 ;;		_posicionar_cursor
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text23
  5428  002466                     __ptext23:
  5429                           	opt stack 0
  5430  002466                     _enviar_comando_lcd:
  5431                           	opt stack 28
  5432                           
  5433                           ;incstack = 0
  5434                           ;enviar_comando_lcd@valor stored from wreg
  5435  002466  6E03               	movwf	enviar_comando_lcd@valor,c
  5436                           
  5437                           ;newmain.c: 49: PORTD = valor;
  5438  002468  C003  FF83         	movff	enviar_comando_lcd@valor,3971	;volatile
  5439                           
  5440                           ;newmain.c: 50: PORTCbits.RC0 = 0;
  5441  00246C  9082               	bcf	3970,0,c	;volatile
  5442                           
  5443                           ;newmain.c: 51: PORTCbits.RC1 = 1;
  5444  00246E  8282               	bsf	3970,1,c	;volatile
  5445                           
  5446                           ;newmain.c: 52: delay_ms(1);
  5447  002470  0E00               	movlw	0
  5448  002472  6E02               	movwf	delay_ms@tempo+1,c
  5449  002474  0E01               	movlw	1
  5450  002476  6E01               	movwf	delay_ms@tempo,c
  5451  002478  ECE2  F011         	call	_delay_ms	;wreg free
  5452                           
  5453                           ;newmain.c: 53: PORTCbits.RC1 = 0;
  5454  00247C  9282               	bcf	3970,1,c	;volatile
  5455                           
  5456                           ;newmain.c: 54: delay_ms(1);
  5457  00247E  0E00               	movlw	0
  5458  002480  6E02               	movwf	delay_ms@tempo+1,c
  5459  002482  0E01               	movlw	1
  5460  002484  6E01               	movwf	delay_ms@tempo,c
  5461  002486  ECE2  F011         	call	_delay_ms	;wreg free
  5462  00248A  0012               	return		;funcret
  5463  00248C                     __end_of_enviar_comando_lcd:
  5464                           	opt stack 0
  5465                           tblptru	equ	0xFF8
  5466                           tblptrh	equ	0xFF7
  5467                           tblptrl	equ	0xFF6
  5468                           tablat	equ	0xFF5
  5469                           prodh	equ	0xFF4
  5470                           prodl	equ	0xFF3
  5471                           postinc0	equ	0xFEE
  5472                           wreg	equ	0xFE8
  5473                           postinc2	equ	0xFDE
  5474                           postdec2	equ	0xFDD
  5475                           fsr2h	equ	0xFDA
  5476                           fsr2l	equ	0xFD9
  5477                           status	equ	0xFD8
  5478                           
  5479 ;; *************** function _delay_ms *****************
  5480 ;; Defined at:
  5481 ;;		line 28 in file "newmain.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  tempo           2    0[COMRAM] int 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2, status,0
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5495 ;;      Params:         2       0       0       0       0       0       0       0       0
  5496 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5498 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5499 ;;Total ram usage:        2 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_enviar_comando_lcd
  5505 ;;		_escrever_lcd
  5506 ;;		_inicializa_lcd
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           	psect	text24
  5511  0023C4                     __ptext24:
  5512                           	opt stack 0
  5513  0023C4                     _delay_ms:
  5514                           	opt stack 27
  5515                           
  5516                           ;newmain.c: 30: while (tempo > 0)
  5517                           
  5518                           ;incstack = 0
  5519  0023C4  D00F               	goto	l47
  5520  0023C6                     l48:
  5521                           
  5522                           ;newmain.c: 31: {
  5523                           ;newmain.c: 32: T0CS = 0;
  5524  0023C6  9AD5               	bcf	4053,5,c	;volatile
  5525                           
  5526                           ;newmain.c: 33: PSA = 0;
  5527  0023C8  96D5               	bcf	4053,3,c	;volatile
  5528                           
  5529                           ;newmain.c: 34: T0PS0 = 1;
  5530  0023CA  80D5               	bsf	4053,0,c	;volatile
  5531                           
  5532                           ;newmain.c: 35: T0PS1 = 0;
  5533  0023CC  92D5               	bcf	4053,1,c	;volatile
  5534                           
  5535                           ;newmain.c: 36: T0PS2 = 0;
  5536  0023CE  94D5               	bcf	4053,2,c	;volatile
  5537                           
  5538                           ;newmain.c: 37: TMR0IF = 0;
  5539  0023D0  94F2               	bcf	intcon,2,c	;volatile
  5540                           
  5541                           ;newmain.c: 38: T08BIT = 1;
  5542  0023D2  8CD5               	bsf	4053,6,c	;volatile
  5543                           
  5544                           ;newmain.c: 39: TMR0L = 0;
  5545  0023D4  0E00               	movlw	0
  5546  0023D6  6ED6               	movwf	4054,c	;volatile
  5547                           
  5548                           ;newmain.c: 40: TMR0ON = 1;
  5549  0023D8  8ED5               	bsf	4053,7,c	;volatile
  5550  0023DA  A4F2               	btfss	intcon,2,c	;volatile
  5551  0023DC  D7FE               	goto	l50
  5552                           
  5553                           ;newmain.c: 42: --tempo;
  5554  0023DE  0601               	decf	delay_ms@tempo,f,c
  5555  0023E0  A0D8               	btfss	status,0,c
  5556  0023E2  0602               	decf	delay_ms@tempo+1,f,c
  5557  0023E4                     l47:
  5558  0023E4  BE02               	btfsc	delay_ms@tempo+1,7,c
  5559  0023E6  0012               	return	
  5560  0023E8  5002               	movf	delay_ms@tempo+1,w,c
  5561  0023EA  E1ED               	bnz	l48
  5562  0023EC  0401               	decf	delay_ms@tempo,w,c
  5563  0023EE  A0D8               	btfss	status,0,c
  5564  0023F0  0012               	return	
  5565  0023F2  D7E9               	goto	l48
  5566  0023F4                     __end_of_delay_ms:
  5567                           	opt stack 0
  5568                           tblptru	equ	0xFF8
  5569                           tblptrh	equ	0xFF7
  5570                           tblptrl	equ	0xFF6
  5571                           tablat	equ	0xFF5
  5572                           prodh	equ	0xFF4
  5573                           prodl	equ	0xFF3
  5574                           intcon	equ	0xFF2
  5575                           postinc0	equ	0xFEE
  5576                           wreg	equ	0xFE8
  5577                           postinc2	equ	0xFDE
  5578                           postdec2	equ	0xFDD
  5579                           fsr2h	equ	0xFDA
  5580                           fsr2l	equ	0xFD9
  5581                           status	equ	0xFD8
  5582                           
  5583 ;; *************** function _inicializa_ad *****************
  5584 ;; Defined at:
  5585 ;;		line 132 in file "newmain.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      void 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5599 ;;      Params:         0       0       0       0       0       0       0       0       0
  5600 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5602 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5603 ;;Total ram usage:        0 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		_main
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text25
  5613  002502                     __ptext25:
  5614                           	opt stack 0
  5615  002502                     _inicializa_ad:
  5616                           	opt stack 30
  5617                           
  5618                           ;newmain.c: 134: ADCON0 = 0b00000001;
  5619                           
  5620                           ;incstack = 0
  5621  002502  0E01               	movlw	1
  5622  002504  6EC2               	movwf	4034,c	;volatile
  5623                           
  5624                           ;newmain.c: 135: ADCON1 = 0b00001110;
  5625  002506  0E0E               	movlw	14
  5626  002508  6EC1               	movwf	4033,c	;volatile
  5627                           
  5628                           ;newmain.c: 136: ADCON2 = 0b10010110;
  5629  00250A  0E96               	movlw	150
  5630  00250C  6EC0               	movwf	4032,c	;volatile
  5631  00250E  0012               	return		;funcret
  5632  002510                     __end_of_inicializa_ad:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           postinc0	equ	0xFEE
  5642                           wreg	equ	0xFE8
  5643                           postinc2	equ	0xFDE
  5644                           postdec2	equ	0xFDD
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function _capturar_ad *****************
  5650 ;; Defined at:
  5651 ;;		line 139 in file "newmain.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;		None
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  resultado       2    4[COMRAM] int 
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  2    0[COMRAM] int 
  5658 ;; Registers used:
  5659 ;;		wreg, status,2, status,0
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5665 ;;      Params:         2       0       0       0       0       0       0       0       0
  5666 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5667 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5668 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5669 ;;Total ram usage:        6 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_main
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text26
  5679  00248C                     __ptext26:
  5680                           	opt stack 0
  5681  00248C                     _capturar_ad:
  5682                           	opt stack 30
  5683                           
  5684                           ;newmain.c: 141: int resultado;
  5685                           ;newmain.c: 143: GO_DONE = 1;
  5686                           
  5687                           ;incstack = 0
  5688  00248C  82C2               	bsf	4034,1,c	;volatile
  5689  00248E  B2C2               	btfsc	4034,1,c	;volatile
  5690  002490  D7FE               	goto	l107
  5691                           
  5692                           ;newmain.c: 145: resultado = (ADRESH << 8) | ADRESL;
  5693  002492  50C3               	movf	4035,w,c	;volatile
  5694  002494  CFC4 F003          	movff	4036,??_capturar_ad	;volatile
  5695  002498  6A04               	clrf	(??_capturar_ad+1)& (0+255),c
  5696  00249A  C003  F004         	movff	??_capturar_ad,??_capturar_ad+1
  5697  00249E  6A03               	clrf	??_capturar_ad,c
  5698  0024A0  1003               	iorwf	??_capturar_ad,w,c
  5699  0024A2  6E05               	movwf	capturar_ad@resultado,c
  5700  0024A4  5004               	movf	??_capturar_ad+1,w,c
  5701  0024A6  6E06               	movwf	capturar_ad@resultado+1,c
  5702                           
  5703                           ;newmain.c: 146: return (resultado);
  5704  0024A8  C005  F001         	movff	capturar_ad@resultado,?_capturar_ad
  5705  0024AC  C006  F002         	movff	capturar_ad@resultado+1,?_capturar_ad+1
  5706  0024B0  0012               	return	
  5707  0024B2                     __end_of_capturar_ad:
  5708                           	opt stack 0
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           intcon	equ	0xFF2
  5716                           postinc0	equ	0xFEE
  5717                           wreg	equ	0xFE8
  5718                           postinc2	equ	0xFDE
  5719                           postdec2	equ	0xFDD
  5720                           fsr2h	equ	0xFDA
  5721                           fsr2l	equ	0xFD9
  5722                           status	equ	0xFD8
  5723                           
  5724 ;; *************** function ___ftdiv *****************
  5725 ;; Defined at:
  5726 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  f1              3    8[COMRAM] float 
  5729 ;;  f2              3   11[COMRAM] float 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  f3              3   18[COMRAM] float 
  5732 ;;  sign            1   22[COMRAM] unsigned char 
  5733 ;;  exp             1   21[COMRAM] unsigned char 
  5734 ;;  cntr            1   17[COMRAM] unsigned char 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  3    8[COMRAM] float 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2, status,0, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5744 ;;      Params:         6       0       0       0       0       0       0       0       0
  5745 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5746 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5747 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5748 ;;Total ram usage:       15 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    1
  5751 ;; This function calls:
  5752 ;;		___ftpack
  5753 ;; This function is called by:
  5754 ;;		_main
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text27
  5759  001EF0                     __ptext27:
  5760                           	opt stack 0
  5761  001EF0                     ___ftdiv:
  5762                           	opt stack 29
  5763                           
  5764                           ;incstack = 0
  5765  001EF0  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  5766  001EF4  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5767  001EF6  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5768  001EF8  340A               	rlcf	___ftdiv@f1+1,w,c
  5769  001EFA  360F               	rlcf	??___ftdiv& (0+255),f,c
  5770  001EFC  E301               	bnc	u3731
  5771  001EFE  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5772  001F00                     u3731:
  5773  001F00  500F               	movf	??___ftdiv,w,c
  5774  001F02  6E16               	movwf	___ftdiv@exp,c
  5775  001F04  5016               	movf	___ftdiv@exp,w,c
  5776  001F06  A4D8               	btfss	status,2,c
  5777  001F08  D007               	goto	l511
  5778  001F0A  0E00               	movlw	0
  5779  001F0C  6E09               	movwf	?___ftdiv,c
  5780  001F0E  0E00               	movlw	0
  5781  001F10  6E0A               	movwf	?___ftdiv+1,c
  5782  001F12  0E00               	movlw	0
  5783  001F14  6E0B               	movwf	?___ftdiv+2,c
  5784  001F16  0012               	return	
  5785  001F18                     l511:
  5786  001F18  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  5787  001F1C  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5788  001F1E  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5789  001F20  340D               	rlcf	___ftdiv@f2+1,w,c
  5790  001F22  360F               	rlcf	??___ftdiv& (0+255),f,c
  5791  001F24  E301               	bnc	u3751
  5792  001F26  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5793  001F28                     u3751:
  5794  001F28  500F               	movf	??___ftdiv,w,c
  5795  001F2A  6E17               	movwf	___ftdiv@sign,c
  5796  001F2C  5017               	movf	___ftdiv@sign,w,c
  5797  001F2E  A4D8               	btfss	status,2,c
  5798  001F30  D007               	goto	l513
  5799  001F32  0E00               	movlw	0
  5800  001F34  6E09               	movwf	?___ftdiv,c
  5801  001F36  0E00               	movlw	0
  5802  001F38  6E0A               	movwf	?___ftdiv+1,c
  5803  001F3A  0E00               	movlw	0
  5804  001F3C  6E0B               	movwf	?___ftdiv+2,c
  5805  001F3E  0012               	return	
  5806  001F40                     l513:
  5807  001F40  0E00               	movlw	0
  5808  001F42  6E13               	movwf	___ftdiv@f3,c
  5809  001F44  0E00               	movlw	0
  5810  001F46  6E14               	movwf	___ftdiv@f3+1,c
  5811  001F48  0E00               	movlw	0
  5812  001F4A  6E15               	movwf	___ftdiv@f3+2,c
  5813  001F4C  5017               	movf	___ftdiv@sign,w,c
  5814  001F4E  0F89               	addlw	137
  5815  001F50  5E16               	subwf	___ftdiv@exp,f,c
  5816  001F52  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  5817  001F56  500E               	movf	___ftdiv@f2+2,w,c
  5818  001F58  1A17               	xorwf	___ftdiv@sign,f,c
  5819  001F5A  0E80               	movlw	128
  5820  001F5C  1617               	andwf	___ftdiv@sign,f,c
  5821  001F5E  8E0A               	bsf	___ftdiv@f1+1,7,c
  5822  001F60  0EFF               	movlw	255
  5823  001F62  1609               	andwf	___ftdiv@f1,f,c
  5824  001F64  0EFF               	movlw	255
  5825  001F66  160A               	andwf	___ftdiv@f1+1,f,c
  5826  001F68  0E00               	movlw	0
  5827  001F6A  160B               	andwf	___ftdiv@f1+2,f,c
  5828  001F6C  8E0D               	bsf	___ftdiv@f2+1,7,c
  5829  001F6E  0EFF               	movlw	255
  5830  001F70  160C               	andwf	___ftdiv@f2,f,c
  5831  001F72  0EFF               	movlw	255
  5832  001F74  160D               	andwf	___ftdiv@f2+1,f,c
  5833  001F76  0E00               	movlw	0
  5834  001F78  160E               	andwf	___ftdiv@f2+2,f,c
  5835  001F7A  0E18               	movlw	24
  5836  001F7C  6E12               	movwf	___ftdiv@cntr,c
  5837  001F7E  90D8               	bcf	status,0,c
  5838  001F80  3613               	rlcf	___ftdiv@f3,f,c
  5839  001F82  3614               	rlcf	___ftdiv@f3+1,f,c
  5840  001F84  3615               	rlcf	___ftdiv@f3+2,f,c
  5841  001F86  500C               	movf	___ftdiv@f2,w,c
  5842  001F88  5C09               	subwf	___ftdiv@f1,w,c
  5843  001F8A  500D               	movf	___ftdiv@f2+1,w,c
  5844  001F8C  580A               	subwfb	___ftdiv@f1+1,w,c
  5845  001F8E  500E               	movf	___ftdiv@f2+2,w,c
  5846  001F90  580B               	subwfb	___ftdiv@f1+2,w,c
  5847  001F92  A0D8               	btfss	status,0,c
  5848  001F94  D007               	goto	l515
  5849  001F96  500C               	movf	___ftdiv@f2,w,c
  5850  001F98  5E09               	subwf	___ftdiv@f1,f,c
  5851  001F9A  500D               	movf	___ftdiv@f2+1,w,c
  5852  001F9C  5A0A               	subwfb	___ftdiv@f1+1,f,c
  5853  001F9E  500E               	movf	___ftdiv@f2+2,w,c
  5854  001FA0  5A0B               	subwfb	___ftdiv@f1+2,f,c
  5855  001FA2  8013               	bsf	___ftdiv@f3,0,c
  5856  001FA4                     l515:
  5857  001FA4  90D8               	bcf	status,0,c
  5858  001FA6  3609               	rlcf	___ftdiv@f1,f,c
  5859  001FA8  360A               	rlcf	___ftdiv@f1+1,f,c
  5860  001FAA  360B               	rlcf	___ftdiv@f1+2,f,c
  5861  001FAC  2E12               	decfsz	___ftdiv@cntr,f,c
  5862  001FAE  D7E7               	goto	l514
  5863  001FB0  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  5864  001FB4  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5865  001FB8  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5866  001FBC  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  5867  001FC0  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  5868  001FC4  ECEB  F00F         	call	___ftpack	;wreg free
  5869  001FC8  C001  F009         	movff	?___ftpack,?___ftdiv
  5870  001FCC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  5871  001FD0  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  5872  001FD4  0012               	return	
  5873  001FD6                     __end_of___ftdiv:
  5874                           	opt stack 0
  5875                           tblptru	equ	0xFF8
  5876                           tblptrh	equ	0xFF7
  5877                           tblptrl	equ	0xFF6
  5878                           tablat	equ	0xFF5
  5879                           prodh	equ	0xFF4
  5880                           prodl	equ	0xFF3
  5881                           intcon	equ	0xFF2
  5882                           postinc0	equ	0xFEE
  5883                           wreg	equ	0xFE8
  5884                           postinc2	equ	0xFDE
  5885                           postdec2	equ	0xFDD
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function ___awtoft *****************
  5891 ;; Defined at:
  5892 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  c               2    8[COMRAM] int 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  sign            1   11[COMRAM] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  3    8[COMRAM] float 
  5899 ;; Registers used:
  5900 ;;		wreg, status,2, status,0, cstack
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5906 ;;      Params:         3       0       0       0       0       0       0       0       0
  5907 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5909 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5910 ;;Total ram usage:        4 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    1
  5913 ;; This function calls:
  5914 ;;		___ftpack
  5915 ;; This function is called by:
  5916 ;;		_main
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text28
  5921  00238C                     __ptext28:
  5922                           	opt stack 0
  5923  00238C                     ___awtoft:
  5924                           	opt stack 29
  5925                           
  5926                           ;incstack = 0
  5927  00238C  0E00               	movlw	0
  5928  00238E  6E0C               	movwf	___awtoft@sign,c
  5929  002390  AE0A               	btfss	___awtoft@c+1,7,c
  5930  002392  D006               	goto	l411
  5931  002394  6C09               	negf	___awtoft@c,c
  5932  002396  1E0A               	comf	___awtoft@c+1,f,c
  5933  002398  B0D8               	btfsc	status,0,c
  5934  00239A  2A0A               	incf	___awtoft@c+1,f,c
  5935  00239C  0E01               	movlw	1
  5936  00239E  6E0C               	movwf	___awtoft@sign,c
  5937  0023A0                     l411:
  5938  0023A0  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5939  0023A4  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5940  0023A8  6A03               	clrf	___ftpack@arg+2,c
  5941  0023AA  0E8E               	movlw	142
  5942  0023AC  6E04               	movwf	___ftpack@exp,c
  5943  0023AE  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5944  0023B2  ECEB  F00F         	call	___ftpack	;wreg free
  5945  0023B6  C001  F009         	movff	?___ftpack,?___awtoft
  5946  0023BA  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5947  0023BE  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5948  0023C2  0012               	return	
  5949  0023C4                     __end_of___awtoft:
  5950                           	opt stack 0
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           postinc2	equ	0xFDE
  5961                           postdec2	equ	0xFDD
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function ___ftpack *****************
  5967 ;; Defined at:
  5968 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  arg             3    0[COMRAM] unsigned um
  5971 ;;  exp             1    3[COMRAM] unsigned char 
  5972 ;;  sign            1    4[COMRAM] unsigned char 
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;		None
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  3    0[COMRAM] float 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2, status,0
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5984 ;;      Params:         5       0       0       0       0       0       0       0       0
  5985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5986 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5987 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5988 ;;Total ram usage:        8 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		___awtoft
  5994 ;;		___ftadd
  5995 ;;		___ftdiv
  5996 ;;		___ftmul
  5997 ;;		___lltoft
  5998 ;; This function uses a non-reentrant model
  5999 ;;
  6000                           
  6001                           	psect	text29
  6002  001FD6                     __ptext29:
  6003                           	opt stack 0
  6004  001FD6                     ___ftpack:
  6005                           	opt stack 27
  6006                           
  6007                           ;incstack = 0
  6008  001FD6  5004               	movf	___ftpack@exp,w,c
  6009  001FD8  B4D8               	btfsc	status,2,c
  6010  001FDA  D005               	goto	u1930
  6011  001FDC  5001               	movf	___ftpack@arg,w,c
  6012  001FDE  1002               	iorwf	___ftpack@arg+1,w,c
  6013  001FE0  1003               	iorwf	___ftpack@arg+2,w,c
  6014  001FE2  A4D8               	btfss	status,2,c
  6015  001FE4  D00C               	goto	l447
  6016  001FE6                     u1930:
  6017  001FE6  0E00               	movlw	0
  6018  001FE8  6E01               	movwf	?___ftpack,c
  6019  001FEA  0E00               	movlw	0
  6020  001FEC  6E02               	movwf	?___ftpack+1,c
  6021  001FEE  0E00               	movlw	0
  6022  001FF0  6E03               	movwf	?___ftpack+2,c
  6023  001FF2  0012               	return	
  6024  001FF4  2A04               	incf	___ftpack@exp,f,c
  6025  001FF6  90D8               	bcf	status,0,c
  6026  001FF8  3203               	rrcf	___ftpack@arg+2,f,c
  6027  001FFA  3202               	rrcf	___ftpack@arg+1,f,c
  6028  001FFC  3201               	rrcf	___ftpack@arg,f,c
  6029  001FFE                     l447:
  6030  001FFE  0E00               	movlw	0
  6031  002000  1401               	andwf	___ftpack@arg,w,c
  6032  002002  6E06               	movwf	??___ftpack& (0+255),c
  6033  002004  0E00               	movlw	0
  6034  002006  1402               	andwf	___ftpack@arg+1,w,c
  6035  002008  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6036  00200A  0EFE               	movlw	254
  6037  00200C  1403               	andwf	___ftpack@arg+2,w,c
  6038  00200E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6039  002010  5006               	movf	??___ftpack,w,c
  6040  002012  1007               	iorwf	??___ftpack+1,w,c
  6041  002014  1008               	iorwf	??___ftpack+2,w,c
  6042  002016  B4D8               	btfsc	status,2,c
  6043  002018  D00C               	goto	l450
  6044  00201A  D7EC               	goto	l448
  6045  00201C  2A04               	incf	___ftpack@exp,f,c
  6046  00201E  0E01               	movlw	1
  6047  002020  2601               	addwf	___ftpack@arg,f,c
  6048  002022  0E00               	movlw	0
  6049  002024  2202               	addwfc	___ftpack@arg+1,f,c
  6050  002026  0E00               	movlw	0
  6051  002028  2203               	addwfc	___ftpack@arg+2,f,c
  6052  00202A  90D8               	bcf	status,0,c
  6053  00202C  3203               	rrcf	___ftpack@arg+2,f,c
  6054  00202E  3202               	rrcf	___ftpack@arg+1,f,c
  6055  002030  3201               	rrcf	___ftpack@arg,f,c
  6056  002032                     l450:
  6057  002032  0E00               	movlw	0
  6058  002034  1401               	andwf	___ftpack@arg,w,c
  6059  002036  6E06               	movwf	??___ftpack& (0+255),c
  6060  002038  0E00               	movlw	0
  6061  00203A  1402               	andwf	___ftpack@arg+1,w,c
  6062  00203C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6063  00203E  0EFF               	movlw	255
  6064  002040  1403               	andwf	___ftpack@arg+2,w,c
  6065  002042  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6066  002044  5006               	movf	??___ftpack,w,c
  6067  002046  1007               	iorwf	??___ftpack+1,w,c
  6068  002048  1008               	iorwf	??___ftpack+2,w,c
  6069  00204A  B4D8               	btfsc	status,2,c
  6070  00204C  D006               	goto	l453
  6071  00204E  D7E6               	goto	l451
  6072  002050  0604               	decf	___ftpack@exp,f,c
  6073  002052  90D8               	bcf	status,0,c
  6074  002054  3601               	rlcf	___ftpack@arg,f,c
  6075  002056  3602               	rlcf	___ftpack@arg+1,f,c
  6076  002058  3603               	rlcf	___ftpack@arg+2,f,c
  6077  00205A                     l453:
  6078  00205A  BE02               	btfsc	___ftpack@arg+1,7,c
  6079  00205C  D003               	goto	u1970
  6080  00205E  0E02               	movlw	2
  6081  002060  6004               	cpfslt	___ftpack@exp,c
  6082  002062  D7F6               	goto	l454
  6083  002064                     u1970:
  6084  002064  A004               	btfss	___ftpack@exp,0,c
  6085  002066  9E02               	bcf	___ftpack@arg+1,7,c
  6086  002068  90D8               	bcf	status,0,c
  6087  00206A  3204               	rrcf	___ftpack@exp,f,c
  6088  00206C  5004               	movf	___ftpack@exp,w,c
  6089  00206E  1203               	iorwf	___ftpack@arg+2,f,c
  6090  002070  5005               	movf	___ftpack@sign,w,c
  6091  002072  A4D8               	btfss	status,2,c
  6092  002074  8E03               	bsf	___ftpack@arg+2,7,c
  6093  002076  C001  F001         	movff	___ftpack@arg,?___ftpack
  6094  00207A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6095  00207E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6096  002082  0012               	return	
  6097  002084                     __end_of___ftpack:
  6098                           	opt stack 0
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           prodh	equ	0xFF4
  6104                           prodl	equ	0xFF3
  6105                           intcon	equ	0xFF2
  6106                           postinc0	equ	0xFEE
  6107                           wreg	equ	0xFE8
  6108                           postinc2	equ	0xFDE
  6109                           postdec2	equ	0xFDD
  6110                           fsr2h	equ	0xFDA
  6111                           fsr2l	equ	0xFD9
  6112                           status	equ	0xFD8
  6113                           tblptru	equ	0xFF8
  6114                           tblptrh	equ	0xFF7
  6115                           tblptrl	equ	0xFF6
  6116                           tablat	equ	0xFF5
  6117                           prodh	equ	0xFF4
  6118                           prodl	equ	0xFF3
  6119                           intcon	equ	0xFF2
  6120                           postinc0	equ	0xFEE
  6121                           wreg	equ	0xFE8
  6122                           postinc2	equ	0xFDE
  6123                           postdec2	equ	0xFDD
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128                           	psect	rparam
  6129  0000                     tblptru	equ	0xFF8
  6130                           tblptrh	equ	0xFF7
  6131                           tblptrl	equ	0xFF6
  6132                           tablat	equ	0xFF5
  6133                           prodh	equ	0xFF4
  6134                           prodl	equ	0xFF3
  6135                           intcon	equ	0xFF2
  6136                           postinc0	equ	0xFEE
  6137                           wreg	equ	0xFE8
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           fsr2h	equ	0xFDA
  6141                           fsr2l	equ	0xFD9
  6142                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    118
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     74      91
    BANK0           160     23      23
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[8]), STR_1(CODE[12]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_escrever_lcd
    _escrever_lcd->_delay_ms
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _posicionar_cursor->_enviar_comando_lcd
    _inicializa_lcd->_enviar_comando_lcd
    _enviar_comando_lcd->_delay_ms
    ___ftdiv->___ftpack
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   67282
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                        _capturar_ad
                      _inicializa_ad
                     _inicializa_lcd
                   _inicializa_pinos
                  _posicionar_cursor
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   49198
                                             63 COMRAM    11     6      5
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11755
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     447
                                              3 COMRAM     1     1      0
                       _escrever_lcd
 ---------------------------------------------------------------------------------
 (3) _escrever_lcd                                         1     1      0     425
                                              2 COMRAM     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11557
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4272
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3927
                                             45 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     197
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _posicionar_cursor                                    4     0      4    1985
                                              3 COMRAM     4     0      4
                 _enviar_comando_lcd
 ---------------------------------------------------------------------------------
 (1) _inicializa_pinos                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_lcd                                       0     0      0     828
                           _delay_ms
                 _enviar_comando_lcd
 ---------------------------------------------------------------------------------
 (2) _enviar_comando_lcd                                   1     1      0     425
                                              2 COMRAM     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             2     0      2     403
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _inicializa_ad                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _capturar_ad                                          6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3215
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
   ___ftadd
     ___ftneg (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftneg
   _capturar_ad
   _inicializa_ad
   _inicializa_lcd
     _delay_ms
     _enviar_comando_lcd
       _delay_ms
   _inicializa_pinos
   _posicionar_cursor
     _enviar_comando_lcd
       _delay_ms
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _escrever_lcd
         _delay_ms
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      17       5       14.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4A      5B       1       95.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72      20        0.0%
DATA                 0      0      72       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jul 03 20:20:09 2018

__size_of_enviar_comando_lcd 0026                           l50 23DA                           l70 12CA  
                         l47 23E4                           l71 12E2                           l48 23C6  
                         l80 13BA                           l72 12FA                           l81 13D2  
                         l73 1312                           l90 14B6                           l82 13EA  
                         l74 132A                           l91 14D0                           l83 1402  
                         l75 1342                           l92 14EA                           l84 141A  
                         l76 135A                           l68 129A                           l93 1504  
                         l85 1434                           l77 1372                           l69 12B2  
                         l94 151E                           l86 144E                           l78 138A  
                         l95 1538                           l87 1468                           l79 13A2  
                         l96 1552                           l88 1482                           l97 156C  
                         l89 149C                           l98 1586                           _Rm 004E  
               ___awdiv@sign 000C                           _Rv 0057          ___wmul@multiplicand 0011  
               ___ftadd@exp1 0039                 ___ftadd@exp2 0038                 ___ftadd@sign 0037  
                        l201 0CB6                          l210 0E3C                          l202 0CA8  
                        l107 248E                          l211 0E2E                          l204 0CDA  
                        l213 0E60                          l205 0CDE                          l206 0CF6  
                        l151 16E8                          l207 0E22                          l400 2248  
                        l208 0D48                          l161 1060                          l129 1C12  
                        l154 17B4                          l162 11B0                          l170 08B8  
                        l411 23A0                          l403 2268                          l404 2272  
                        l164 1260                          l180 0A24                          l501 190A  
                        l421 1BBE                          l405 2280                          l157 1084  
                        l173 08B4                          l502 1900                          l422 1BAE  
                        l158 0FB0                          l182 0A4A                          l174 08DA  
                        l511 1F18                          l415 1AF0                          l183 0A8A  
                        l504 192E                          l600 21C6                          l176 0E46  
                        l184 0B52                          l168 0898                          l513 1F40  
                        l505 194A                          l601 21BA                          l417 1B0E  
                        l521 19F8                          l193 0BB8                          l177 092C  
                        l169 08A8                          l450 2032                          l514 1F7E  
                        l506 197A                          l610 22A8                          l418 1B50  
                        l522 1A32                          l451 201C                          l515 1FA4  
                        l611 229C                          l427 1BE2                          l419 1B80  
                        l531 1ABA                          l523 1A5A                          l187 0AFA  
                        l179 09BE                          l604 21FA                          l428 1BD6  
                        l532 1AAE                          l453 205A                          l605 2208  
                        l621 2302                          l525 1A96                          l454 2050  
                        l614 22D0                          l622 22F6                          l526 1A86  
                        l390 2176                          l550 1DC2                          l198 0C9C  
                        l447 1FFE                          l615 22DE                          l519 19CC  
                        l391 2180                          l383 2128                          l543 1D30  
                        l199 0C10                          l448 1FF4                          l536 20B4  
                        l560 2362                          l392 218E                          l384 2138  
                        l537 20E4                          l545 1D58                          l554 24C8  
                        l482 1870                          l386 2156                          l546 1D8A  
                        l387 214E                          l547 1D9A                          l492 18CC  
                        l572 1EC2                          l564 1E28                          l396 222E  
                        l493 18C2                          l573 1EB6                          l397 223A  
                        l549 1DB2                          l478 1846                          l566 1E9E  
                        l487 18D6                          l575 1EDE                          l567 1E8E  
                        l399 2250                          _PSA 007EAB                          _Irf 004B  
                        _Vrf 0054                          _adc 005A                          _Vrv 0051  
               ___awmod@sign 0006                          wreg 000FE8            ?_inicializa_pinos 0001  
               ___ftdiv@cntr 0012                 ___ftdiv@sign 0017                 __CFG_WDT$OFF 000000  
                       l1901 2110                         l2751 0AD4                         l2743 0A8A  
                       l2771 0BBC                         l2795 0CA8                         STR_1 0877  
                       STR_2 0883                         _T0CS 007EAD                         u2001 1804  
                       u2011 1818                         u2100 18A0                         u2040 1838  
                       u2211 1D18                         u2140 18DE                         u2300 215A  
                       u2070 1862                         u2231 1D40                         u2170 1912  
                       u2360 2254                         u2610 1BE8                         u2540 1AC0  
                       u2461 19B0                         u3510 0964                         u2481 19DC  
                       u1930 1FE6                         u2730 1EC8                         u3515 095A  
               printf@tmpval 006F                         u3630 0BF4                         u3550 0A5C  
                       u2671 1E0C                         u2760 21CA                         u3560 0A9C  
                       u1970 2064                         u2690 1E46                         u3731 1F00  
                       u3660 0CC4                         u2790 22AC                         u3670 0CD4  
                       u3590 0AD4                         u3751 1F28                         u2695 1E3E  
         ??_inicializa_pinos 0001                         _main 1BFA                 ___ftpack@arg 0001  
               ___ftpack@exp 0004                         fsr2h 000FDA                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
               ___ftmul@cntr 0022                 ___param_bank 000000                 ___ftmul@sign 0023  
               ___fttol@exp1 0039                 ___fttol@lval 0035                        ?_main 0001  
            __end_of___awdiv 2198              __end_of___ftadd 19A0              __end_of___awmod 228A  
            __end_of___ftdiv 1FD6              __end_of___ftneg 24D6              __end_of___lldiv 221A  
            __end_of___ftmul 1DFC              ___awdiv@divisor 0009              __end_of___llmod 22F0  
            __end_of___ftsub 238C              __end_of___fttol 1EF0                        _T0PS0 007EA8  
                      _T0PS1 007EA9                        _T0PS2 007EAA              ___awdiv@counter 000B  
     __size_of_inicializa_ad 000E                        _TMR0L 000FD6                        _PORTC 000F82  
                      _PORTD 000F83                        _TRISA 000F92                        _TRISC 000F94  
                      _TRISD 000F95                 ___lltoft@exp 0011                ?_escrever_lcd 0001  
              ___awtoft@sign 000C              __end_of_dpowers 0829                        _scale 0E7C  
              ___ftpack@sign 0005                        _putch 2510                        tablat 000FF5  
                      status 000FD8              __initialization 24D6                 __end_of_main 1D08  
       __size_of_capturar_ad 0026                       ??_main 004B                ___fttol@sign1 0034  
              __activetblptr 000002         __size_of__tdiv_to_l_ 0132               ??_escrever_lcd 0003  
                     _ADCON0 000FC2                       _ADCON1 000FC1                       _ADCON2 000FC0  
           ___llmod@dividend 0001                       ?_scale 0024                       _ADRESH 000FC4  
                     _ADRESL 000FC3                       _T08BIT 007EAE             ___awdiv@dividend 0007  
           __end_of___awtoft 23C4                       ?_putch 0001             __end_of___ftpack 2084  
           __end_of___lltoft 234C                       _TMR0IF 007F92                       _TMR0ON 007EAF  
    __size_of_inicializa_lcd 0026                _inicializa_ad 2502             __end_of_delay_ms 23F4  
           __end_of__powers_ 0850                       ___ftge 2084                       ___wmul 241A  
                  ??___awdiv 000B                    ??___ftadd 0034                    ??___awmod 0005  
                  ??___ftdiv 000F                    ??___ftneg 0004                    ??___lldiv 0009  
                  ??___ftmul 001B                    ??___llmod 0009                    ??___ftsub 0040  
                  ??___fttol 002F                       _fround 15A2                       clear_0 24DC  
           ___awdiv@quotient 000D              ___awmod@divisor 0003              ___awmod@counter 0005  
                     _printf 088C        ___ftmul@f3_as_product 001F                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                     putch@x 0004                   __accesstop 0060      __end_of__initialization 24E2  
            __CFG_FOSC$XT_XT 000000                   ___ftadd@f1 002E                   ___ftadd@f2 0031  
             ?_inicializa_ad 0001                   ___ftge@ff1 0001                   ___ftge@ff2 0004  
              ___rparam_used 000001                   ___ftdiv@f1 0009                   ___ftdiv@f2 000C  
                 ___ftdiv@f3 0013                   ___ftneg@f1 0001                   ___awtoft@c 0009  
                 ___ftmul@f1 0015                   ___ftmul@f2 0018                   ___ftsub@f1 003A  
                 ___ftsub@f2 003D                   ___fttol@f1 002B               __pcstackCOMRAM 0001  
                 ___lltoft@c 0009                __end_of_scale 1284                __end_of_putch 251A  
                 __div_to_l_ 1AD2              __div_to_l_@exp1 000C              __div_to_l_@cntr 000B  
                    ??_scale 0027              __div_to_l_@quot 0007                      ??_putch 0004  
              __div_to_l_@f1 0001                __div_to_l_@f2 0004   __end_of_enviar_comando_lcd 248C  
       __end_of_escrever_lcd 241A    __size_of_inicializa_pinos 0016                      ?___ftge 0001  
                    ?___wmul 000F                      ?_fround 0024                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printf 0040                    ?___lltoft 0009  
                    _GO_DONE 007E11                    ?_delay_ms 0001              ??_inicializa_ad 0001  
             _inicializa_lcd 2440            __end_of__npowers_ 0877                      __Hparam 0000  
                    __Lparam 0000              __size_of___ftge 0090                      ___awdiv 2114  
                    ___ftadd 17F4                      ___awmod 221A                      ___ftdiv 1EF0  
                    ___ftneg 24B2                      ___lldiv 2198              __size_of___wmul 0026  
                    ___ftmul 1D08                      ___llmod 228A                      ___ftsub 234C  
                    ___fttol 1DFC                   _fround$776 002A                   _fround$777 0027  
               __psmallconst 0800                      __pcinit 24D6                   ??___awtoft 000C  
                 ??___ftpack 0006              __size_of_fround 0252                      __ramtop 0800  
                 ??___lltoft 000D                      __ptext0 1BFA                      __ptext1 088C  
                    __ptext2 0E7C                      __ptext3 2510                      __ptext4 23F4  
                    __ptext5 15A2                      __ptext6 241A                      __ptext7 1D08  
                    __ptext8 221A                      __ptext9 2114              __size_of_printf 05F0  
                ?__div_to_l_ 0001                      _dpowers 0801             ___awmod@dividend 0001  
                 ??_delay_ms 0003      enviar_comando_lcd@valor 0003       __end_of_inicializa_lcd 2466  
       end_of_initialization 24E2                __Lmediumconst 0000              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                ??_capturar_ad 0003                      printf@c 0076  
                    printf@f 0040                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004  
                 _printf$779 0060                ??__tdiv_to_l_ 0007                    _PORTCbits 000F82  
            ?_inicializa_lcd 0001        __size_of_escrever_lcd 0026                  ___ftdiv@exp 0016  
        __size_of__div_to_l_ 0128         capturar_ad@resultado 0005                  ___ftmul@exp 001E  
           _inicializa_pinos 24EC               __end_of___ftge 2114               __end_of___wmul 2440  
              delay_ms@tempo 0001          __end_of_capturar_ad 24B2               __end_of_fround 17F4  
             __end_of_printf 0E7C          start_initialization 24D6                 _escrever_lcd 23F4  
        __end_of__tdiv_to_l_ 1AD2              ___llmod@divisor 0005              ___llmod@counter 0009  
          _posicionar_cursor 1284                     ??___ftge 0007                     ??___wmul 0013  
         ?_posicionar_cursor 0004                     ??_fround 0027            escrever_lcd@valor 0003  
                   ??_printf 0045           _enviar_comando_lcd 2466                   fround@prec 002D  
          __size_of___awtoft 0038            __size_of___ftpack 00AE          ??_posicionar_cursor 0008  
          __size_of___lltoft 005C                  __pbssCOMRAM 004B                __pcstackBANK0 0060  
    posicionar_cursor@coluna 0006          ?_enviar_comando_lcd 0001            __size_of_delay_ms 0030  
  __end_of_posicionar_cursor 15A2                  _capturar_ad 248C         ??_enviar_comando_lcd 0003  
                   ?___awdiv 0007                     ?___ftadd 002E                     ?___awmod 0001  
                   ?___ftdiv 0009                     ?___ftneg 0001                     ?___lldiv 0001  
                   ?___ftmul 0015                     ?___llmod 0001                     ?___ftsub 003A  
                  __npowers_ 0850                     ?___fttol 002B                  __tdiv_to_l_ 19A0  
               ??__div_to_l_ 0007                  __smallconst 0800                    _scale$778 0027  
             __size_of_scale 0408               __size_of_putch 000A               ___wmul@product 0013  
      __end_of_inicializa_ad 2510           __end_of__div_to_l_ 1BFA            ___wmul@multiplier 000F  
                 printf@flag 0065                   printf@fval 0073                   printf@prec 0067  
           ??_inicializa_lcd 0004     __end_of_inicializa_pinos 2502   __size_of_posicionar_cursor 031E  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___awdiv 0084  
           __size_of___ftadd 01AC             __size_of___awmod 0070             __size_of___ftdiv 00E6  
           __size_of___ftneg 0024             __size_of___lldiv 0082             __size_of___ftmul 00F4  
           __size_of___llmod 0066             __size_of___ftsub 0040             __size_of___fttol 00F4  
                   ___awtoft 238C                     ___ftpack 1FD6                     ___lltoft 22F0  
     posicionar_cursor@linha 0004                     _delay_ms 23C4                     __ptext10 19A0  
                   __ptext11 1AD2                     __ptext20 1284                     __ptext12 22F0  
                   __ptext21 24EC                     __ptext13 228A                     __ptext22 2440  
                   __ptext14 2198                     __ptext23 2466                     __ptext15 1DFC  
                   __ptext24 23C4                     __ptext16 234C                     __ptext25 2502  
                   __ptext17 17F4                     __ptext26 248C                     __ptext18 24B2  
                   __ptext27 1EF0                     __ptext19 2084                     __ptext28 238C  
                   __ptext29 1FD6                     __powers_ 0829                __size_of_main 010E  
                  printf@exp 006D                    printf@val 0069                     scale@scl 002A  
           __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E             __tdiv_to_l_@quot 000A  
           ___lldiv@dividend 0001                 ?_capturar_ad 0001                     printf@ap 0063  
               ?__tdiv_to_l_ 0001             ___lldiv@quotient 0009  
