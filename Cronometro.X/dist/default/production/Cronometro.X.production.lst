

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 28 21:24:13 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.45
    19                           ; Generated 16/11/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	nvCOMRAM
    54  00000B                     __pnvCOMRAM:
    55                           	opt stack 0
    56  00000B                     _dezena_s:
    57                           	opt stack 0
    58  00000B                     	ds	2
    59  00000D                     _unidade_s:
    60                           	opt stack 0
    61  00000D                     	ds	2
    62  00000F                     _dezena_c:
    63                           	opt stack 0
    64  00000F                     	ds	2
    65  000011                     _unidade_c:
    66                           	opt stack 0
    67  000011                     	ds	2
    68  0000                     _TRISC	set	3988
    69  0000                     _TRISD	set	3989
    70  0000                     _PORTD	set	3971
    71  0000                     _RC0	set	31760
    72  0000                     _RC6	set	31766
    73  0000                     _RC5	set	31765
    74  0000                     _RC4	set	31764
    75  0000                     _RC2	set	31762
    76  0000                     _RC1	set	31761
    77                           
    78                           ; #config settings
    79                           
    80                           	psect	cinit
    81  007B9E                     __pcinit:
    82                           	opt stack 0
    83  007B9E                     start_initialization:
    84                           	opt stack 0
    85  007B9E                     __initialization:
    86                           	opt stack 0
    87                           
    88                           ; Clear objects allocated to COMRAM (6 bytes)
    89  007B9E  6A18               	clrf	(__pbssCOMRAM+5)& (0+255),c
    90  007BA0  6A17               	clrf	(__pbssCOMRAM+4)& (0+255),c
    91  007BA2  6A16               	clrf	(__pbssCOMRAM+3)& (0+255),c
    92  007BA4  6A15               	clrf	(__pbssCOMRAM+2)& (0+255),c
    93  007BA6  6A14               	clrf	(__pbssCOMRAM+1)& (0+255),c
    94  007BA8  6A13               	clrf	__pbssCOMRAM& (0+255),c
    95  007BAA                     end_of_initialization:
    96                           	opt stack 0
    97  007BAA                     __end_of__initialization:
    98                           	opt stack 0
    99  007BAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   100  007BAC  6EF8               	movwf	tblptru,c
   101  007BAE  0100               	movlb	0
   102  007BB0  EF11  F03E         	goto	_main	;jump to C main() function
   103                           tblptru	equ	0xFF8
   104                           
   105                           	psect	bssCOMRAM
   106  000013                     __pbssCOMRAM:
   107                           	opt stack 0
   108  000013                     _cnt_s:
   109                           	opt stack 0
   110  000013                     	ds	2
   111  000015                     _cnt_10ms:
   112                           	opt stack 0
   113  000015                     	ds	2
   114  000017                     _cnt_1ms:
   115                           	opt stack 0
   116  000017                     	ds	2
   117                           tblptru	equ	0xFF8
   118                           
   119                           	psect	cstackCOMRAM
   120  000001                     __pcstackCOMRAM:
   121                           	opt stack 0
   122  000001                     ?___awdiv:
   123                           	opt stack 0
   124  000001                     ?___awmod:
   125                           	opt stack 0
   126  000001                     delay_ms@x:
   127                           	opt stack 0
   128  000001                     ___awdiv@dividend:
   129                           	opt stack 0
   130  000001                     ___awmod@dividend:
   131                           	opt stack 0
   132                           
   133                           ; 2 bytes @ 0x0
   134  000001                     	ds	2
   135  000003                     delay_ms@y:
   136                           	opt stack 0
   137  000003                     ___awdiv@divisor:
   138                           	opt stack 0
   139  000003                     ___awmod@divisor:
   140                           	opt stack 0
   141                           
   142                           ; 2 bytes @ 0x2
   143  000003                     	ds	2
   144  000005                     ___awdiv@counter:
   145                           	opt stack 0
   146  000005                     ___awmod@counter:
   147                           	opt stack 0
   148                           
   149                           ; 1 bytes @ 0x4
   150  000005                     	ds	1
   151  000006                     ___awdiv@sign:
   152                           	opt stack 0
   153  000006                     ___awmod@sign:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0x5
   157  000006                     	ds	1
   158  000007                     ___awdiv@quotient:
   159                           	opt stack 0
   160                           
   161                           ; 2 bytes @ 0x6
   162  000007                     	ds	2
   163  000009                     ??_mostrar:
   164                           
   165                           ; 1 bytes @ 0x8
   166  000009                     	ds	2
   167  00000B                     tblptru	equ	0xFF8
   168                           
   169                           ; 1 bytes @ 0xA
   170 ;;
   171 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   172 ;;
   173 ;; *************** function _main *****************
   174 ;; Defined at:
   175 ;;		line 163 in file "Cronometro.c"
   176 ;; Parameters:    Size  Location     Type
   177 ;;		None
   178 ;; Auto vars:     Size  Location     Type
   179 ;;		None
   180 ;; Return value:  Size  Location     Type
   181 ;;                  1    wreg      void 
   182 ;; Registers used:
   183 ;;		wreg, status,2, status,0, cstack
   184 ;; Tracked objects:
   185 ;;		On entry : 0/0
   186 ;;		On exit  : 0/0
   187 ;;		Unchanged: 0/0
   188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   189 ;;      Params:         0       0       0       0       0       0       0       0       0
   190 ;;      Locals:         0       0       0       0       0       0       0       0       0
   191 ;;      Temps:          0       0       0       0       0       0       0       0       0
   192 ;;      Totals:         0       0       0       0       0       0       0       0       0
   193 ;;Total ram usage:        0 bytes
   194 ;; Hardware stack levels required when called:    2
   195 ;; This function calls:
   196 ;;		_delay_ms
   197 ;;		_incrementa
   198 ;;		_mostrar
   199 ;; This function is called by:
   200 ;;		Startup code after reset
   201 ;; This function uses a non-reentrant model
   202 ;;
   203                           
   204                           	psect	text0
   205  007C22                     __ptext0:
   206                           	opt stack 0
   207  007C22                     _main:
   208                           	opt stack 29
   209                           
   210                           ;Cronometro.c: 164: TRISD=0b00000000;
   211                           
   212                           ;incstack = 0
   213  007C22  0E00               	movlw	0
   214  007C24  6E95               	movwf	3989,c	;volatile
   215                           
   216                           ;Cronometro.c: 165: TRISC=0b00000001;
   217  007C26  0E01               	movlw	1
   218  007C28  6E94               	movwf	3988,c	;volatile
   219  007C2A                     
   220                           ;Cronometro.c: 168: mostrar();
   221  007C2A  ECAA  F03E         	call	_mostrar	;wreg free
   222                           
   223                           ;Cronometro.c: 169: if (RC0==1){
   224  007C2E  A082               	btfss	3970,0,c	;volatile
   225  007C30  D7FC               	goto	l113
   226                           
   227                           ;Cronometro.c: 170: cnt_1ms++;
   228  007C32  4A17               	infsnz	_cnt_1ms,f,c
   229  007C34  2A18               	incf	_cnt_1ms+1,f,c
   230                           
   231                           ;Cronometro.c: 171: if(cnt_1ms>=10){
   232  007C36  BE18               	btfsc	_cnt_1ms+1,7,c
   233  007C38  D00C               	goto	l115
   234  007C3A  5018               	movf	_cnt_1ms+1,w,c
   235  007C3C  E104               	bnz	u380
   236  007C3E  0E0A               	movlw	10
   237  007C40  5C17               	subwf	_cnt_1ms,w,c
   238  007C42  A0D8               	btfss	status,0,c
   239  007C44  D006               	goto	l115
   240  007C46                     u380:
   241                           
   242                           ;Cronometro.c: 172: incrementa();
   243  007C46  ECF4  F03D         	call	_incrementa	;wreg free
   244                           
   245                           ;Cronometro.c: 173: cnt_1ms=0;
   246  007C4A  0E00               	movlw	0
   247  007C4C  6E18               	movwf	_cnt_1ms+1,c
   248  007C4E  0E00               	movlw	0
   249  007C50  6E17               	movwf	_cnt_1ms,c
   250  007C52                     l115:
   251                           
   252                           ;Cronometro.c: 174: }
   253                           ;Cronometro.c: 175: delay_ms(1);
   254  007C52  0E00               	movlw	0
   255  007C54  6E02               	movwf	delay_ms@x+1,c
   256  007C56  0E01               	movlw	1
   257  007C58  6E01               	movwf	delay_ms@x,c
   258  007C5A  ECDA  F03D         	call	_delay_ms	;wreg free
   259  007C5E  D7E5               	goto	l113
   260  007C60                     __end_of_main:
   261                           	opt stack 0
   262                           tblptru	equ	0xFF8
   263                           status	equ	0xFD8
   264                           
   265 ;; *************** function _mostrar *****************
   266 ;; Defined at:
   267 ;;		line 37 in file "Cronometro.c"
   268 ;; Parameters:    Size  Location     Type
   269 ;;		None
   270 ;; Auto vars:     Size  Location     Type
   271 ;;		None
   272 ;; Return value:  Size  Location     Type
   273 ;;                  1    wreg      void 
   274 ;; Registers used:
   275 ;;		wreg, status,2, status,0, cstack
   276 ;; Tracked objects:
   277 ;;		On entry : 0/0
   278 ;;		On exit  : 0/0
   279 ;;		Unchanged: 0/0
   280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   281 ;;      Params:         0       0       0       0       0       0       0       0       0
   282 ;;      Locals:         0       0       0       0       0       0       0       0       0
   283 ;;      Temps:          2       0       0       0       0       0       0       0       0
   284 ;;      Totals:         2       0       0       0       0       0       0       0       0
   285 ;;Total ram usage:        2 bytes
   286 ;; Hardware stack levels used:    1
   287 ;; Hardware stack levels required when called:    1
   288 ;; This function calls:
   289 ;;		___awdiv
   290 ;;		___awmod
   291 ;;		_delay_ms
   292 ;; This function is called by:
   293 ;;		_main
   294 ;; This function uses a non-reentrant model
   295 ;;
   296                           
   297                           	psect	text1
   298  007D54                     __ptext1:
   299                           	opt stack 0
   300  007D54                     _mostrar:
   301                           	opt stack 29
   302                           
   303                           ;Cronometro.c: 38: dezena_s=cnt_s/10;
   304                           
   305                           ;incstack = 0
   306  007D54  C013  F001         	movff	_cnt_s,___awdiv@dividend
   307  007D58  C014  F002         	movff	_cnt_s+1,___awdiv@dividend+1
   308  007D5C  0E00               	movlw	0
   309  007D5E  6E04               	movwf	___awdiv@divisor+1,c
   310  007D60  0E0A               	movlw	10
   311  007D62  6E03               	movwf	___awdiv@divisor,c
   312  007D64  EC68  F03E         	call	___awdiv	;wreg free
   313  007D68  C001  F00B         	movff	?___awdiv,_dezena_s
   314  007D6C  C002  F00C         	movff	?___awdiv+1,_dezena_s+1
   315                           
   316                           ;Cronometro.c: 39: unidade_s=cnt_s%10;
   317  007D70  C013  F001         	movff	_cnt_s,___awmod@dividend
   318  007D74  C014  F002         	movff	_cnt_s+1,___awmod@dividend+1
   319  007D78  0E00               	movlw	0
   320  007D7A  6E04               	movwf	___awmod@divisor+1,c
   321  007D7C  0E0A               	movlw	10
   322  007D7E  6E03               	movwf	___awmod@divisor,c
   323  007D80  EC30  F03E         	call	___awmod	;wreg free
   324  007D84  C001  F00D         	movff	?___awmod,_unidade_s
   325  007D88  C002  F00E         	movff	?___awmod+1,_unidade_s+1
   326                           
   327                           ;Cronometro.c: 40: dezena_c=cnt_10ms/10;
   328  007D8C  C015  F001         	movff	_cnt_10ms,___awdiv@dividend
   329  007D90  C016  F002         	movff	_cnt_10ms+1,___awdiv@dividend+1
   330  007D94  0E00               	movlw	0
   331  007D96  6E04               	movwf	___awdiv@divisor+1,c
   332  007D98  0E0A               	movlw	10
   333  007D9A  6E03               	movwf	___awdiv@divisor,c
   334  007D9C  EC68  F03E         	call	___awdiv	;wreg free
   335  007DA0  C001  F00F         	movff	?___awdiv,_dezena_c
   336  007DA4  C002  F010         	movff	?___awdiv+1,_dezena_c+1
   337                           
   338                           ;Cronometro.c: 41: unidade_c=cnt_10ms%10;
   339  007DA8  C015  F001         	movff	_cnt_10ms,___awmod@dividend
   340  007DAC  C016  F002         	movff	_cnt_10ms+1,___awmod@dividend+1
   341  007DB0  0E00               	movlw	0
   342  007DB2  6E04               	movwf	___awmod@divisor+1,c
   343  007DB4  0E0A               	movlw	10
   344  007DB6  6E03               	movwf	___awmod@divisor,c
   345  007DB8  EC30  F03E         	call	___awmod	;wreg free
   346  007DBC  C001  F011         	movff	?___awmod,_unidade_c
   347  007DC0  C002  F012         	movff	?___awmod+1,_unidade_c+1
   348                           
   349                           ;Cronometro.c: 44: switch (dezena_s){
   350  007DC4  D015               	goto	l60
   351  007DC6  0E3F               	movlw	63
   352  007DC8  D011               	goto	L9
   353  007DCA  0E06               	movlw	6
   354  007DCC  D00F               	goto	L9
   355  007DCE  0E5B               	movlw	91
   356  007DD0  D00D               	goto	L9
   357  007DD2  0E4F               	movlw	79
   358  007DD4  D00B               	goto	L9
   359  007DD6  0E66               	movlw	102
   360  007DD8  D009               	goto	L9
   361  007DDA  0E6D               	movlw	109
   362  007DDC  D007               	goto	L9
   363  007DDE  0E7D               	movlw	125
   364  007DE0  D005               	goto	L9
   365  007DE2  0E07               	movlw	7
   366  007DE4  D003               	goto	L9
   367  007DE6  0E7F               	movlw	127
   368  007DE8  D001               	goto	L9
   369  007DEA  0E6F               	movlw	111
   370  007DEC                     L9:
   371  007DEC  6E83               	movwf	3971,c	;volatile
   372                           
   373                           ;Cronometro.c: 65: }
   374                           
   375                           ;Cronometro.c: 64: break;
   376  007DEE  D027               	goto	l62
   377  007DF0                     l60:
   378  007DF0  C00B  F009         	movff	_dezena_s,??_mostrar
   379  007DF4  C00C  F00A         	movff	_dezena_s+1,??_mostrar+1
   380                           
   381                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   382                           ; Switch size 1, requested type "space"
   383                           ; Number of cases is 1, Range of values is 0 to 0
   384                           ; switch strategies available:
   385                           ; Name         Instructions Cycles
   386                           ; simple_byte            4     3 (average)
   387                           ;	Chosen strategy is simple_byte
   388  007DF8  500A               	movf	??_mostrar+1,w,c
   389  007DFA  0A00               	xorlw	0	; case 0
   390  007DFC  A4D8               	btfss	status,2,c
   391  007DFE  D01F               	goto	l62
   392                           
   393                           ; Switch size 1, requested type "space"
   394                           ; Number of cases is 10, Range of values is 0 to 9
   395                           ; switch strategies available:
   396                           ; Name         Instructions Cycles
   397                           ; simple_byte           31    16 (average)
   398                           ;	Chosen strategy is simple_byte
   399  007E00  5009               	movf	??_mostrar,w,c
   400  007E02  0A00               	xorlw	0	; case 0
   401  007E04  B4D8               	btfsc	status,2,c
   402  007E06  D7DF               	goto	l61
   403  007E08  0A01               	xorlw	1	; case 1
   404  007E0A  B4D8               	btfsc	status,2,c
   405  007E0C  D7DE               	goto	l63
   406  007E0E  0A03               	xorlw	3	; case 2
   407  007E10  B4D8               	btfsc	status,2,c
   408  007E12  D7DD               	goto	l64
   409  007E14  0A01               	xorlw	1	; case 3
   410  007E16  B4D8               	btfsc	status,2,c
   411  007E18  D7DC               	goto	l65
   412  007E1A  0A07               	xorlw	7	; case 4
   413  007E1C  B4D8               	btfsc	status,2,c
   414  007E1E  D7DB               	goto	l66
   415  007E20  0A01               	xorlw	1	; case 5
   416  007E22  B4D8               	btfsc	status,2,c
   417  007E24  D7DA               	goto	l67
   418  007E26  0A03               	xorlw	3	; case 6
   419  007E28  B4D8               	btfsc	status,2,c
   420  007E2A  D7D9               	goto	l68
   421  007E2C  0A01               	xorlw	1	; case 7
   422  007E2E  B4D8               	btfsc	status,2,c
   423  007E30  D7D8               	goto	l69
   424  007E32  0A0F               	xorlw	15	; case 8
   425  007E34  B4D8               	btfsc	status,2,c
   426  007E36  D7D7               	goto	l70
   427  007E38  0A01               	xorlw	1	; case 9
   428  007E3A  B4D8               	btfsc	status,2,c
   429  007E3C  D7D6               	goto	l71
   430  007E3E                     l62:
   431                           
   432                           ;Cronometro.c: 66: RC1=1;
   433  007E3E  8282               	bsf	3970,1,c	;volatile
   434                           
   435                           ;Cronometro.c: 67: RC2=0;
   436  007E40  9482               	bcf	3970,2,c	;volatile
   437                           
   438                           ;Cronometro.c: 68: RC4=0;
   439  007E42  9882               	bcf	3970,4,c	;volatile
   440                           
   441                           ;Cronometro.c: 69: RC5=0;
   442  007E44  9A82               	bcf	3970,5,c	;volatile
   443                           
   444                           ;Cronometro.c: 70: RC6=0;
   445  007E46  9C82               	bcf	3970,6,c	;volatile
   446                           
   447                           ;Cronometro.c: 71: delay_ms(1);
   448  007E48  0E00               	movlw	0
   449  007E4A  6E02               	movwf	delay_ms@x+1,c
   450  007E4C  0E01               	movlw	1
   451  007E4E  6E01               	movwf	delay_ms@x,c
   452  007E50  ECDA  F03D         	call	_delay_ms	;wreg free
   453                           
   454                           ;Cronometro.c: 74: switch (unidade_s){
   455  007E54  D015               	goto	l72
   456  007E56  0E3F               	movlw	63
   457  007E58  D011               	goto	L18
   458  007E5A  0E06               	movlw	6
   459  007E5C  D00F               	goto	L18
   460  007E5E  0E5B               	movlw	91
   461  007E60  D00D               	goto	L18
   462  007E62  0E4F               	movlw	79
   463  007E64  D00B               	goto	L18
   464  007E66  0E66               	movlw	102
   465  007E68  D009               	goto	L18
   466  007E6A  0E6D               	movlw	109
   467  007E6C  D007               	goto	L18
   468  007E6E  0E7D               	movlw	125
   469  007E70  D005               	goto	L18
   470  007E72  0E07               	movlw	7
   471  007E74  D003               	goto	L18
   472  007E76  0E7F               	movlw	127
   473  007E78  D001               	goto	L18
   474  007E7A  0E6F               	movlw	111
   475  007E7C                     L18:
   476  007E7C  6E83               	movwf	3971,c	;volatile
   477                           
   478                           ;Cronometro.c: 95: }
   479                           
   480                           ;Cronometro.c: 94: break;
   481  007E7E  D027               	goto	l74
   482  007E80                     l72:
   483  007E80  C00D  F009         	movff	_unidade_s,??_mostrar
   484  007E84  C00E  F00A         	movff	_unidade_s+1,??_mostrar+1
   485                           
   486                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   487                           ; Switch size 1, requested type "space"
   488                           ; Number of cases is 1, Range of values is 0 to 0
   489                           ; switch strategies available:
   490                           ; Name         Instructions Cycles
   491                           ; simple_byte            4     3 (average)
   492                           ;	Chosen strategy is simple_byte
   493  007E88  500A               	movf	??_mostrar+1,w,c
   494  007E8A  0A00               	xorlw	0	; case 0
   495  007E8C  A4D8               	btfss	status,2,c
   496  007E8E  D01F               	goto	l74
   497                           
   498                           ; Switch size 1, requested type "space"
   499                           ; Number of cases is 10, Range of values is 0 to 9
   500                           ; switch strategies available:
   501                           ; Name         Instructions Cycles
   502                           ; simple_byte           31    16 (average)
   503                           ;	Chosen strategy is simple_byte
   504  007E90  5009               	movf	??_mostrar,w,c
   505  007E92  0A00               	xorlw	0	; case 0
   506  007E94  B4D8               	btfsc	status,2,c
   507  007E96  D7DF               	goto	l73
   508  007E98  0A01               	xorlw	1	; case 1
   509  007E9A  B4D8               	btfsc	status,2,c
   510  007E9C  D7DE               	goto	l75
   511  007E9E  0A03               	xorlw	3	; case 2
   512  007EA0  B4D8               	btfsc	status,2,c
   513  007EA2  D7DD               	goto	l76
   514  007EA4  0A01               	xorlw	1	; case 3
   515  007EA6  B4D8               	btfsc	status,2,c
   516  007EA8  D7DC               	goto	l77
   517  007EAA  0A07               	xorlw	7	; case 4
   518  007EAC  B4D8               	btfsc	status,2,c
   519  007EAE  D7DB               	goto	l78
   520  007EB0  0A01               	xorlw	1	; case 5
   521  007EB2  B4D8               	btfsc	status,2,c
   522  007EB4  D7DA               	goto	l79
   523  007EB6  0A03               	xorlw	3	; case 6
   524  007EB8  B4D8               	btfsc	status,2,c
   525  007EBA  D7D9               	goto	l80
   526  007EBC  0A01               	xorlw	1	; case 7
   527  007EBE  B4D8               	btfsc	status,2,c
   528  007EC0  D7D8               	goto	l81
   529  007EC2  0A0F               	xorlw	15	; case 8
   530  007EC4  B4D8               	btfsc	status,2,c
   531  007EC6  D7D7               	goto	l82
   532  007EC8  0A01               	xorlw	1	; case 9
   533  007ECA  B4D8               	btfsc	status,2,c
   534  007ECC  D7D6               	goto	l83
   535  007ECE                     l74:
   536                           
   537                           ;Cronometro.c: 97: RC1=0;
   538  007ECE  9282               	bcf	3970,1,c	;volatile
   539                           
   540                           ;Cronometro.c: 98: RC2=1;
   541  007ED0  8482               	bsf	3970,2,c	;volatile
   542                           
   543                           ;Cronometro.c: 99: RC4=0;
   544  007ED2  9882               	bcf	3970,4,c	;volatile
   545                           
   546                           ;Cronometro.c: 100: RC5=0;
   547  007ED4  9A82               	bcf	3970,5,c	;volatile
   548                           
   549                           ;Cronometro.c: 101: delay_ms(1);
   550  007ED6  0E00               	movlw	0
   551  007ED8  6E02               	movwf	delay_ms@x+1,c
   552  007EDA  0E01               	movlw	1
   553  007EDC  6E01               	movwf	delay_ms@x,c
   554  007EDE  ECDA  F03D         	call	_delay_ms	;wreg free
   555                           
   556                           ;Cronometro.c: 104: switch (dezena_c){
   557  007EE2  D015               	goto	l84
   558  007EE4  0E3F               	movlw	63
   559  007EE6  D011               	goto	L27
   560  007EE8  0E06               	movlw	6
   561  007EEA  D00F               	goto	L27
   562  007EEC  0E5B               	movlw	91
   563  007EEE  D00D               	goto	L27
   564  007EF0  0E4F               	movlw	79
   565  007EF2  D00B               	goto	L27
   566  007EF4  0E66               	movlw	102
   567  007EF6  D009               	goto	L27
   568  007EF8  0E6D               	movlw	109
   569  007EFA  D007               	goto	L27
   570  007EFC  0E7D               	movlw	125
   571  007EFE  D005               	goto	L27
   572  007F00  0E07               	movlw	7
   573  007F02  D003               	goto	L27
   574  007F04  0E7F               	movlw	127
   575  007F06  D001               	goto	L27
   576  007F08  0E6F               	movlw	111
   577  007F0A                     L27:
   578  007F0A  6E83               	movwf	3971,c	;volatile
   579                           
   580                           ;Cronometro.c: 125: }
   581                           
   582                           ;Cronometro.c: 124: break;
   583  007F0C  D027               	goto	l86
   584  007F0E                     l84:
   585  007F0E  C00F  F009         	movff	_dezena_c,??_mostrar
   586  007F12  C010  F00A         	movff	_dezena_c+1,??_mostrar+1
   587                           
   588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   589                           ; Switch size 1, requested type "space"
   590                           ; Number of cases is 1, Range of values is 0 to 0
   591                           ; switch strategies available:
   592                           ; Name         Instructions Cycles
   593                           ; simple_byte            4     3 (average)
   594                           ;	Chosen strategy is simple_byte
   595  007F16  500A               	movf	??_mostrar+1,w,c
   596  007F18  0A00               	xorlw	0	; case 0
   597  007F1A  A4D8               	btfss	status,2,c
   598  007F1C  D01F               	goto	l86
   599                           
   600                           ; Switch size 1, requested type "space"
   601                           ; Number of cases is 10, Range of values is 0 to 9
   602                           ; switch strategies available:
   603                           ; Name         Instructions Cycles
   604                           ; simple_byte           31    16 (average)
   605                           ;	Chosen strategy is simple_byte
   606  007F1E  5009               	movf	??_mostrar,w,c
   607  007F20  0A00               	xorlw	0	; case 0
   608  007F22  B4D8               	btfsc	status,2,c
   609  007F24  D7DF               	goto	l85
   610  007F26  0A01               	xorlw	1	; case 1
   611  007F28  B4D8               	btfsc	status,2,c
   612  007F2A  D7DE               	goto	l87
   613  007F2C  0A03               	xorlw	3	; case 2
   614  007F2E  B4D8               	btfsc	status,2,c
   615  007F30  D7DD               	goto	l88
   616  007F32  0A01               	xorlw	1	; case 3
   617  007F34  B4D8               	btfsc	status,2,c
   618  007F36  D7DC               	goto	l89
   619  007F38  0A07               	xorlw	7	; case 4
   620  007F3A  B4D8               	btfsc	status,2,c
   621  007F3C  D7DB               	goto	l90
   622  007F3E  0A01               	xorlw	1	; case 5
   623  007F40  B4D8               	btfsc	status,2,c
   624  007F42  D7DA               	goto	l91
   625  007F44  0A03               	xorlw	3	; case 6
   626  007F46  B4D8               	btfsc	status,2,c
   627  007F48  D7D9               	goto	l92
   628  007F4A  0A01               	xorlw	1	; case 7
   629  007F4C  B4D8               	btfsc	status,2,c
   630  007F4E  D7D8               	goto	l93
   631  007F50  0A0F               	xorlw	15	; case 8
   632  007F52  B4D8               	btfsc	status,2,c
   633  007F54  D7D7               	goto	l94
   634  007F56  0A01               	xorlw	1	; case 9
   635  007F58  B4D8               	btfsc	status,2,c
   636  007F5A  D7D6               	goto	l95
   637  007F5C                     l86:
   638                           
   639                           ;Cronometro.c: 126: RC1=0;
   640  007F5C  9282               	bcf	3970,1,c	;volatile
   641                           
   642                           ;Cronometro.c: 127: RC2=0;
   643  007F5E  9482               	bcf	3970,2,c	;volatile
   644                           
   645                           ;Cronometro.c: 128: RC4=1;
   646  007F60  8882               	bsf	3970,4,c	;volatile
   647                           
   648                           ;Cronometro.c: 129: RC5=0;
   649  007F62  9A82               	bcf	3970,5,c	;volatile
   650                           
   651                           ;Cronometro.c: 130: delay_ms(1);
   652  007F64  0E00               	movlw	0
   653  007F66  6E02               	movwf	delay_ms@x+1,c
   654  007F68  0E01               	movlw	1
   655  007F6A  6E01               	movwf	delay_ms@x,c
   656  007F6C  ECDA  F03D         	call	_delay_ms	;wreg free
   657                           
   658                           ;Cronometro.c: 132: switch (dezena_s){
   659  007F70  D015               	goto	l96
   660  007F72  0E3F               	movlw	63
   661  007F74  D011               	goto	L36
   662  007F76  0E06               	movlw	6
   663  007F78  D00F               	goto	L36
   664  007F7A  0E5B               	movlw	91
   665  007F7C  D00D               	goto	L36
   666  007F7E  0E4F               	movlw	79
   667  007F80  D00B               	goto	L36
   668  007F82  0E66               	movlw	102
   669  007F84  D009               	goto	L36
   670  007F86  0E6D               	movlw	109
   671  007F88  D007               	goto	L36
   672  007F8A  0E7D               	movlw	125
   673  007F8C  D005               	goto	L36
   674  007F8E  0E07               	movlw	7
   675  007F90  D003               	goto	L36
   676  007F92  0E7F               	movlw	127
   677  007F94  D001               	goto	L36
   678  007F96  0E6F               	movlw	111
   679  007F98                     L36:
   680  007F98  6E83               	movwf	3971,c	;volatile
   681                           
   682                           ;Cronometro.c: 153: }
   683                           
   684                           ;Cronometro.c: 152: break;
   685  007F9A  D027               	goto	l98
   686  007F9C                     l96:
   687  007F9C  C00B  F009         	movff	_dezena_s,??_mostrar
   688  007FA0  C00C  F00A         	movff	_dezena_s+1,??_mostrar+1
   689                           
   690                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   691                           ; Switch size 1, requested type "space"
   692                           ; Number of cases is 1, Range of values is 0 to 0
   693                           ; switch strategies available:
   694                           ; Name         Instructions Cycles
   695                           ; simple_byte            4     3 (average)
   696                           ;	Chosen strategy is simple_byte
   697  007FA4  500A               	movf	??_mostrar+1,w,c
   698  007FA6  0A00               	xorlw	0	; case 0
   699  007FA8  A4D8               	btfss	status,2,c
   700  007FAA  D01F               	goto	l98
   701                           
   702                           ; Switch size 1, requested type "space"
   703                           ; Number of cases is 10, Range of values is 0 to 9
   704                           ; switch strategies available:
   705                           ; Name         Instructions Cycles
   706                           ; simple_byte           31    16 (average)
   707                           ;	Chosen strategy is simple_byte
   708  007FAC  5009               	movf	??_mostrar,w,c
   709  007FAE  0A00               	xorlw	0	; case 0
   710  007FB0  B4D8               	btfsc	status,2,c
   711  007FB2  D7DF               	goto	l97
   712  007FB4  0A01               	xorlw	1	; case 1
   713  007FB6  B4D8               	btfsc	status,2,c
   714  007FB8  D7DE               	goto	l99
   715  007FBA  0A03               	xorlw	3	; case 2
   716  007FBC  B4D8               	btfsc	status,2,c
   717  007FBE  D7DD               	goto	l100
   718  007FC0  0A01               	xorlw	1	; case 3
   719  007FC2  B4D8               	btfsc	status,2,c
   720  007FC4  D7DC               	goto	l101
   721  007FC6  0A07               	xorlw	7	; case 4
   722  007FC8  B4D8               	btfsc	status,2,c
   723  007FCA  D7DB               	goto	l102
   724  007FCC  0A01               	xorlw	1	; case 5
   725  007FCE  B4D8               	btfsc	status,2,c
   726  007FD0  D7DA               	goto	l103
   727  007FD2  0A03               	xorlw	3	; case 6
   728  007FD4  B4D8               	btfsc	status,2,c
   729  007FD6  D7D9               	goto	l104
   730  007FD8  0A01               	xorlw	1	; case 7
   731  007FDA  B4D8               	btfsc	status,2,c
   732  007FDC  D7D8               	goto	l105
   733  007FDE  0A0F               	xorlw	15	; case 8
   734  007FE0  B4D8               	btfsc	status,2,c
   735  007FE2  D7D7               	goto	l106
   736  007FE4  0A01               	xorlw	1	; case 9
   737  007FE6  B4D8               	btfsc	status,2,c
   738  007FE8  D7D6               	goto	l107
   739  007FEA                     l98:
   740                           
   741                           ;Cronometro.c: 154: RC1=0;
   742  007FEA  9282               	bcf	3970,1,c	;volatile
   743                           
   744                           ;Cronometro.c: 155: RC2=0;
   745  007FEC  9482               	bcf	3970,2,c	;volatile
   746                           
   747                           ;Cronometro.c: 156: RC4=0;
   748  007FEE  9882               	bcf	3970,4,c	;volatile
   749                           
   750                           ;Cronometro.c: 157: RC5=1;
   751  007FF0  8A82               	bsf	3970,5,c	;volatile
   752                           
   753                           ;Cronometro.c: 158: delay_ms(1);
   754  007FF2  0E00               	movlw	0
   755  007FF4  6E02               	movwf	delay_ms@x+1,c
   756  007FF6  0E01               	movlw	1
   757  007FF8  6E01               	movwf	delay_ms@x,c
   758  007FFA  ECDA  F03D         	call	_delay_ms	;wreg free
   759  007FFE  0012               	return		;funcret
   760  008000                     __end_of_mostrar:
   761                           	opt stack 0
   762                           tblptru	equ	0xFF8
   763                           status	equ	0xFD8
   764                           
   765 ;; *************** function _delay_ms *****************
   766 ;; Defined at:
   767 ;;		line 15 in file "Cronometro.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  x               2    0[COMRAM] int 
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  y               2    2[COMRAM] int 
   772 ;; Return value:  Size  Location     Type
   773 ;;                  1    wreg      void 
   774 ;; Registers used:
   775 ;;		wreg, status,2, status,0
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   781 ;;      Params:         2       0       0       0       0       0       0       0       0
   782 ;;      Locals:         2       0       0       0       0       0       0       0       0
   783 ;;      Temps:          0       0       0       0       0       0       0       0       0
   784 ;;      Totals:         4       0       0       0       0       0       0       0       0
   785 ;;Total ram usage:        4 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; This function calls:
   788 ;;		Nothing
   789 ;; This function is called by:
   790 ;;		_mostrar
   791 ;;		_main
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text2
   796  007BB4                     __ptext2:
   797                           	opt stack 0
   798  007BB4                     _delay_ms:
   799                           	opt stack 29
   800                           
   801                           ;Cronometro.c: 16: while(x>0){
   802                           
   803                           ;incstack = 0
   804  007BB4  D011               	goto	l41
   805  007BB6                     l1012:
   806                           
   807                           ;Cronometro.c: 17: for (int y=0; y<1; y++){
   808  007BB6  0E00               	movlw	0
   809  007BB8  6E04               	movwf	delay_ms@y+1,c
   810  007BBA  0E00               	movlw	0
   811  007BBC  6E03               	movwf	delay_ms@y,c
   812  007BBE                     l1014:
   813  007BBE  BE04               	btfsc	delay_ms@y+1,7,c
   814  007BC0  D005               	goto	l43
   815  007BC2  5004               	movf	delay_ms@y+1,w,c
   816  007BC4  E106               	bnz	l1022
   817  007BC6  0403               	decf	delay_ms@y,w,c
   818  007BC8  B0D8               	btfsc	status,0,c
   819  007BCA  D003               	goto	u230
   820  007BCC                     l43:
   821  007BCC  4A03               	infsnz	delay_ms@y,f,c
   822  007BCE  2A04               	incf	delay_ms@y+1,f,c
   823  007BD0  D7F6               	goto	l1014
   824  007BD2                     u230:
   825  007BD2                     l1022:
   826                           
   827                           ;Cronometro.c: 18: }
   828                           ;Cronometro.c: 19: x--;
   829  007BD2  0601               	decf	delay_ms@x,f,c
   830  007BD4  A0D8               	btfss	status,0,c
   831  007BD6  0602               	decf	delay_ms@x+1,f,c
   832  007BD8                     l41:
   833  007BD8  BE02               	btfsc	delay_ms@x+1,7,c
   834  007BDA  0012               	return	
   835  007BDC  5002               	movf	delay_ms@x+1,w,c
   836  007BDE  E1EB               	bnz	l1012
   837  007BE0  0401               	decf	delay_ms@x,w,c
   838  007BE2  A0D8               	btfss	status,0,c
   839  007BE4  0012               	return	
   840  007BE6  D7E7               	goto	l42
   841  007BE8                     __end_of_delay_ms:
   842                           	opt stack 0
   843                           tblptru	equ	0xFF8
   844                           status	equ	0xFD8
   845                           
   846 ;; *************** function ___awmod *****************
   847 ;; Defined at:
   848 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;  dividend        2    0[COMRAM] int 
   851 ;;  divisor         2    2[COMRAM] int 
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  sign            1    5[COMRAM] unsigned char 
   854 ;;  counter         1    4[COMRAM] unsigned char 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  2    0[COMRAM] int 
   857 ;; Registers used:
   858 ;;		wreg, status,2, status,0
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   864 ;;      Params:         4       0       0       0       0       0       0       0       0
   865 ;;      Locals:         2       0       0       0       0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0       0       0
   867 ;;      Totals:         6       0       0       0       0       0       0       0       0
   868 ;;Total ram usage:        6 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; This function calls:
   871 ;;		Nothing
   872 ;; This function is called by:
   873 ;;		_mostrar
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text3
   878  007C60                     __ptext3:
   879                           	opt stack 0
   880  007C60                     ___awmod:
   881                           	opt stack 29
   882                           
   883                           ;incstack = 0
   884  007C60  0E00               	movlw	0
   885  007C62  6E06               	movwf	___awmod@sign,c
   886  007C64  AE02               	btfss	___awmod@dividend+1,7,c
   887  007C66  D006               	goto	l299
   888  007C68  6C01               	negf	___awmod@dividend,c
   889  007C6A  1E02               	comf	___awmod@dividend+1,f,c
   890  007C6C  B0D8               	btfsc	status,0,c
   891  007C6E  2A02               	incf	___awmod@dividend+1,f,c
   892  007C70  0E01               	movlw	1
   893  007C72  6E06               	movwf	___awmod@sign,c
   894  007C74                     l299:
   895  007C74  AE04               	btfss	___awmod@divisor+1,7,c
   896  007C76  D004               	goto	l300
   897  007C78  6C03               	negf	___awmod@divisor,c
   898  007C7A  1E04               	comf	___awmod@divisor+1,f,c
   899  007C7C  B0D8               	btfsc	status,0,c
   900  007C7E  2A04               	incf	___awmod@divisor+1,f,c
   901  007C80                     l300:
   902  007C80  5003               	movf	___awmod@divisor,w,c
   903  007C82  1004               	iorwf	___awmod@divisor+1,w,c
   904  007C84  B4D8               	btfsc	status,2,c
   905  007C86  D018               	goto	l307
   906  007C88  0E01               	movlw	1
   907  007C8A  6E05               	movwf	___awmod@counter,c
   908  007C8C  D004               	goto	l302
   909  007C8E  90D8               	bcf	status,0,c
   910  007C90  3603               	rlcf	___awmod@divisor,f,c
   911  007C92  3604               	rlcf	___awmod@divisor+1,f,c
   912  007C94  2A05               	incf	___awmod@counter,f,c
   913  007C96                     l302:
   914  007C96  AE04               	btfss	___awmod@divisor+1,7,c
   915  007C98  D7FA               	goto	l303
   916  007C9A                     u340:
   917  007C9A  5003               	movf	___awmod@divisor,w,c
   918  007C9C  5C01               	subwf	___awmod@dividend,w,c
   919  007C9E  5004               	movf	___awmod@divisor+1,w,c
   920  007CA0  5802               	subwfb	___awmod@dividend+1,w,c
   921  007CA2  A0D8               	btfss	status,0,c
   922  007CA4  D004               	goto	l306
   923  007CA6  5003               	movf	___awmod@divisor,w,c
   924  007CA8  5E01               	subwf	___awmod@dividend,f,c
   925  007CAA  5004               	movf	___awmod@divisor+1,w,c
   926  007CAC  5A02               	subwfb	___awmod@dividend+1,f,c
   927  007CAE                     l306:
   928  007CAE  90D8               	bcf	status,0,c
   929  007CB0  3204               	rrcf	___awmod@divisor+1,f,c
   930  007CB2  3203               	rrcf	___awmod@divisor,f,c
   931  007CB4  2E05               	decfsz	___awmod@counter,f,c
   932  007CB6  D7F1               	goto	u340
   933  007CB8                     l307:
   934  007CB8  5006               	movf	___awmod@sign,w,c
   935  007CBA  B4D8               	btfsc	status,2,c
   936  007CBC  D004               	goto	l308
   937  007CBE  6C01               	negf	___awmod@dividend,c
   938  007CC0  1E02               	comf	___awmod@dividend+1,f,c
   939  007CC2  B0D8               	btfsc	status,0,c
   940  007CC4  2A02               	incf	___awmod@dividend+1,f,c
   941  007CC6                     l308:
   942  007CC6  C001  F001         	movff	___awmod@dividend,?___awmod
   943  007CCA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   944  007CCE  0012               	return	
   945  007CD0                     __end_of___awmod:
   946                           	opt stack 0
   947                           tblptru	equ	0xFF8
   948                           status	equ	0xFD8
   949                           
   950 ;; *************** function ___awdiv *****************
   951 ;; Defined at:
   952 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  dividend        2    0[COMRAM] int 
   955 ;;  divisor         2    2[COMRAM] int 
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  quotient        2    6[COMRAM] int 
   958 ;;  sign            1    5[COMRAM] unsigned char 
   959 ;;  counter         1    4[COMRAM] unsigned char 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  2    0[COMRAM] int 
   962 ;; Registers used:
   963 ;;		wreg, status,2, status,0
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   969 ;;      Params:         4       0       0       0       0       0       0       0       0
   970 ;;      Locals:         4       0       0       0       0       0       0       0       0
   971 ;;      Temps:          0       0       0       0       0       0       0       0       0
   972 ;;      Totals:         8       0       0       0       0       0       0       0       0
   973 ;;Total ram usage:        8 bytes
   974 ;; Hardware stack levels used:    1
   975 ;; This function calls:
   976 ;;		Nothing
   977 ;; This function is called by:
   978 ;;		_mostrar
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text4
   983  007CD0                     __ptext4:
   984                           	opt stack 0
   985  007CD0                     ___awdiv:
   986                           	opt stack 29
   987                           
   988                           ;incstack = 0
   989  007CD0  0E00               	movlw	0
   990  007CD2  6E06               	movwf	___awdiv@sign,c
   991  007CD4  AE04               	btfss	___awdiv@divisor+1,7,c
   992  007CD6  D006               	goto	l286
   993  007CD8  6C03               	negf	___awdiv@divisor,c
   994  007CDA  1E04               	comf	___awdiv@divisor+1,f,c
   995  007CDC  B0D8               	btfsc	status,0,c
   996  007CDE  2A04               	incf	___awdiv@divisor+1,f,c
   997  007CE0  0E01               	movlw	1
   998  007CE2  6E06               	movwf	___awdiv@sign,c
   999  007CE4                     l286:
  1000  007CE4  AE02               	btfss	___awdiv@dividend+1,7,c
  1001  007CE6  D006               	goto	l287
  1002  007CE8  6C01               	negf	___awdiv@dividend,c
  1003  007CEA  1E02               	comf	___awdiv@dividend+1,f,c
  1004  007CEC  B0D8               	btfsc	status,0,c
  1005  007CEE  2A02               	incf	___awdiv@dividend+1,f,c
  1006  007CF0  0E01               	movlw	1
  1007  007CF2  1A06               	xorwf	___awdiv@sign,f,c
  1008  007CF4                     l287:
  1009  007CF4  0E00               	movlw	0
  1010  007CF6  6E08               	movwf	___awdiv@quotient+1,c
  1011  007CF8  0E00               	movlw	0
  1012  007CFA  6E07               	movwf	___awdiv@quotient,c
  1013  007CFC  5003               	movf	___awdiv@divisor,w,c
  1014  007CFE  1004               	iorwf	___awdiv@divisor+1,w,c
  1015  007D00  B4D8               	btfsc	status,2,c
  1016  007D02  D01C               	goto	l294
  1017  007D04  0E01               	movlw	1
  1018  007D06  6E05               	movwf	___awdiv@counter,c
  1019  007D08  D004               	goto	l289
  1020  007D0A  90D8               	bcf	status,0,c
  1021  007D0C  3603               	rlcf	___awdiv@divisor,f,c
  1022  007D0E  3604               	rlcf	___awdiv@divisor+1,f,c
  1023  007D10  2A05               	incf	___awdiv@counter,f,c
  1024  007D12                     l289:
  1025  007D12  AE04               	btfss	___awdiv@divisor+1,7,c
  1026  007D14  D7FA               	goto	l290
  1027  007D16                     u280:
  1028  007D16  90D8               	bcf	status,0,c
  1029  007D18  3607               	rlcf	___awdiv@quotient,f,c
  1030  007D1A  3608               	rlcf	___awdiv@quotient+1,f,c
  1031  007D1C  5003               	movf	___awdiv@divisor,w,c
  1032  007D1E  5C01               	subwf	___awdiv@dividend,w,c
  1033  007D20  5004               	movf	___awdiv@divisor+1,w,c
  1034  007D22  5802               	subwfb	___awdiv@dividend+1,w,c
  1035  007D24  A0D8               	btfss	status,0,c
  1036  007D26  D005               	goto	l293
  1037  007D28  5003               	movf	___awdiv@divisor,w,c
  1038  007D2A  5E01               	subwf	___awdiv@dividend,f,c
  1039  007D2C  5004               	movf	___awdiv@divisor+1,w,c
  1040  007D2E  5A02               	subwfb	___awdiv@dividend+1,f,c
  1041  007D30  8007               	bsf	___awdiv@quotient,0,c
  1042  007D32                     l293:
  1043  007D32  90D8               	bcf	status,0,c
  1044  007D34  3204               	rrcf	___awdiv@divisor+1,f,c
  1045  007D36  3203               	rrcf	___awdiv@divisor,f,c
  1046  007D38  2E05               	decfsz	___awdiv@counter,f,c
  1047  007D3A  D7ED               	goto	u280
  1048  007D3C                     l294:
  1049  007D3C  5006               	movf	___awdiv@sign,w,c
  1050  007D3E  B4D8               	btfsc	status,2,c
  1051  007D40  D004               	goto	l295
  1052  007D42  6C07               	negf	___awdiv@quotient,c
  1053  007D44  1E08               	comf	___awdiv@quotient+1,f,c
  1054  007D46  B0D8               	btfsc	status,0,c
  1055  007D48  2A08               	incf	___awdiv@quotient+1,f,c
  1056  007D4A                     l295:
  1057  007D4A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1058  007D4E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1059  007D52  0012               	return	
  1060  007D54                     __end_of___awdiv:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _incrementa *****************
  1066 ;; Defined at:
  1067 ;;		line 26 in file "Cronometro.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, status,2, status,0
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0
  1082 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1084 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1085 ;;Total ram usage:        0 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; This function calls:
  1088 ;;		Nothing
  1089 ;; This function is called by:
  1090 ;;		_main
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text5
  1095  007BE8                     __ptext5:
  1096                           	opt stack 0
  1097  007BE8                     _incrementa:
  1098                           	opt stack 30
  1099                           
  1100                           ;Cronometro.c: 27: cnt_10ms++;
  1101                           
  1102                           ;incstack = 0
  1103  007BE8  4A15               	infsnz	_cnt_10ms,f,c
  1104  007BEA  2A16               	incf	_cnt_10ms+1,f,c
  1105                           
  1106                           ;Cronometro.c: 28: if(cnt_10ms>99){
  1107  007BEC  BE16               	btfsc	_cnt_10ms+1,7,c
  1108  007BEE  D00C               	goto	l55
  1109  007BF0  5016               	movf	_cnt_10ms+1,w,c
  1110  007BF2  E104               	bnz	u160
  1111  007BF4  0E64               	movlw	100
  1112  007BF6  5C15               	subwf	_cnt_10ms,w,c
  1113  007BF8  A0D8               	btfss	status,0,c
  1114  007BFA  D006               	goto	l55
  1115  007BFC                     u160:
  1116                           
  1117                           ;Cronometro.c: 29: cnt_10ms=0;
  1118  007BFC  0E00               	movlw	0
  1119  007BFE  6E16               	movwf	_cnt_10ms+1,c
  1120  007C00  0E00               	movlw	0
  1121  007C02  6E15               	movwf	_cnt_10ms,c
  1122                           
  1123                           ;Cronometro.c: 30: cnt_s++;
  1124  007C04  4A13               	infsnz	_cnt_s,f,c
  1125  007C06  2A14               	incf	_cnt_s+1,f,c
  1126  007C08                     l55:
  1127                           
  1128                           ;Cronometro.c: 31: }
  1129                           ;Cronometro.c: 32: if (cnt_s>99){
  1130  007C08  BE14               	btfsc	_cnt_s+1,7,c
  1131  007C0A  0012               	return	
  1132  007C0C  5014               	movf	_cnt_s+1,w,c
  1133  007C0E  E104               	bnz	u170
  1134  007C10  0E64               	movlw	100
  1135  007C12  5C13               	subwf	_cnt_s,w,c
  1136  007C14  A0D8               	btfss	status,0,c
  1137  007C16  0012               	return	
  1138  007C18                     u170:
  1139                           
  1140                           ;Cronometro.c: 33: cnt_s=0;
  1141  007C18  0E00               	movlw	0
  1142  007C1A  6E14               	movwf	_cnt_s+1,c
  1143  007C1C  0E00               	movlw	0
  1144  007C1E  6E13               	movwf	_cnt_s,c
  1145  007C20  0012               	return	
  1146  007C22                     __end_of_incrementa:
  1147                           	opt stack 0
  1148  0000                     tblptru	equ	0xFF8
  1149                           status	equ	0xFD8
  1150                           tblptru	equ	0xFF8
  1151                           status	equ	0xFD8
  1152                           
  1153                           	psect	rparam
  1154  0000                     tblptru	equ	0xFF8
  1155                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_mostrar
    _mostrar->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2102
                           _delay_ms
                         _incrementa
                            _mostrar
 ---------------------------------------------------------------------------------
 (1) _mostrar                                              2     2      0    1653
                                              8 COMRAM     2     2      0
                            ___awdiv
                            ___awmod
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             4     2      2     449
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _incrementa                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _incrementa
   _mostrar
     ___awdiv
     ___awmod
     _delay_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      18       1       25.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      20        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 28 21:24:13 2018

                     l41 7BD8                       l42 7BB6                       l43 7BCC  
                     l60 7DF0                       l61 7DC6                       l70 7DE6  
                     l62 7E3E                       l55 7C08                       l71 7DEA  
                     l63 7DCA                       l72 7E80                       l80 7E6E  
                     l64 7DCE                       l81 7E72                       l73 7E56  
                     l65 7DD2                       l90 7EF4                       l82 7E76  
                     l74 7ECE                       l66 7DD6                       l91 7EF8  
                     l83 7E7A                       l75 7E5A                       l67 7DDA  
                     l84 7F0E                       l92 7EFC                       l76 7E5E  
                     l68 7DDE                       l93 7F00                       l85 7EE4  
                     l77 7E62                       l69 7DE2                       l94 7F04  
                     l86 7F5C                       l78 7E66                       l95 7F08  
                     l87 7EE8                       l79 7E6A                       l96 7F9C  
                     l88 7EEC                       l97 7F72                       l89 7EF0  
                     l98 7FEA                       l99 7F76             ___awdiv@sign 0006  
                    l100 7F7A                      l101 7F7E                      l102 7F82  
                    l103 7F86                      l104 7F8A                      l105 7F8E  
                    l113 7C2A                      l106 7F92                      l107 7F96  
                    l115 7C52                      l300 7C80                      l302 7C96  
                    l303 7C8E                      l306 7CAE                      l307 7CB8  
                    l308 7CC6                      l290 7D0A                      l293 7D32  
                    l294 7D3C                      l286 7CE4                      l295 7D4A  
                    l287 7CF4                      l289 7D12                      l299 7C74  
                    _RC0 007C10                      _RC1 007C11                      _RC2 007C12  
                    _RC4 007C14                      _RC5 007C15                      _RC6 007C16  
                    u230 7BD2                      u160 7BFC                      u170 7C18  
                    u340 7C9A                      u280 7D16                      u380 7C46  
           ___awmod@sign 0006                     l1012 7BB6                     l1022 7BD2  
                   l1014 7BBE                     _main 7C22                     start 0000  
           ___param_bank 000000                    ?_main 0001          __end_of___awdiv 7D54  
        __end_of___awmod 7CD0          ___awdiv@divisor 0003          ___awdiv@counter 0005  
                  _PORTD 000F83                    _TRISC 000F94                    _TRISD 000F95  
                  _cnt_s 0013          __end_of_mostrar 8000                    status 000FD8  
        __initialization 7B9E             __end_of_main 7C60                   ??_main 000B  
          __activetblptr 000002         ___awdiv@dividend 0001         __end_of_delay_ms 7BE8  
              ??___awdiv 0005                ??___awmod 0005         ___awdiv@quotient 0007  
        ___awmod@divisor 0003          ___awmod@counter 0005                   tblptru 000FF8  
              ??_mostrar 0009               __accesstop 0060  __end_of__initialization 7BAA  
          ___rparam_used 000001           __pcstackCOMRAM 0001               __pnvCOMRAM 000B  
              ?_delay_ms 0001                  __Hparam 0000                  __Lparam 0000  
             _incrementa 7BE8                  ___awdiv 7CD0                  ___awmod 7C60  
                __pcinit 7B9E                  __ramtop 0800                  _cnt_1ms 0017  
                __ptext0 7C22                  __ptext1 7D54                  __ptext2 7BB4  
                __ptext3 7C60                  __ptext4 7CD0                  __ptext5 7BE8  
       ___awmod@dividend 0001               ??_delay_ms 0003                  _mostrar 7D54  
   end_of_initialization 7BAA            __Lmediumconst 0000              ?_incrementa 0001  
    start_initialization 7B9E              __pbssCOMRAM 0013      __size_of_incrementa 003A  
      __size_of_delay_ms 0034                 ?___awdiv 0001                 ?___awmod 0001  
               ?_mostrar 0001                delay_ms@x 0001                delay_ms@y 0003  
              _unidade_c 0011                _unidade_s 000D                 __Hrparam 0000  
               __Lrparam 0000             ??_incrementa 0001         __size_of___awdiv 0084  
       __size_of___awmod 0070                 _cnt_10ms 0015                 _delay_ms 7BB4  
               _dezena_c 000F                 _dezena_s 000B         __size_of_mostrar 02AC  
     __end_of_incrementa 7C22            __size_of_main 003E  
