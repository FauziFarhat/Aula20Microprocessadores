

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 02 21:54:46 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt stack 0
    81  000800  00                 	db	0
    82  000801                     _dpowers:
    83                           	opt stack 0
    84  000801  0001               	dw	1
    85  000803  0000               	dw	0
    86  000805  000A               	dw	10
    87  000807  0000               	dw	0
    88  000809  0064               	dw	100
    89  00080B  0000               	dw	0
    90  00080D  03E8               	dw	1000
    91  00080F  0000               	dw	0
    92  000811  2710               	dw	10000
    93  000813  0000               	dw	0
    94  000815  86A0               	dw	34464
    95  000817  0001               	dw	1
    96  000819  4240               	dw	16960
    97  00081B  000F               	dw	15
    98  00081D  9680               	dw	38528
    99  00081F  0098               	dw	152
   100  000821  E100               	dw	57600
   101  000823  05F5               	dw	1525
   102  000825  CA00               	dw	51712
   103  000827  3B9A               	dw	15258
   104  000829                     __end_of_dpowers:
   105                           	opt stack 0
   106  000829                     __powers_:
   107                           	opt stack 0
   108  000829  00                 	db	0
   109  00082A  80                 	db	128
   110  00082B  3F                 	db	63
   111  00082C  00                 	db	0
   112  00082D  20                 	db	32
   113  00082E  41                 	db	65
   114  00082F  00                 	db	0
   115  000830  C8                 	db	200
   116  000831  42                 	db	66
   117  000832  00                 	db	0
   118  000833  7A                 	db	122
   119  000834  44                 	db	68
   120  000835  40                 	db	64
   121  000836  1C                 	db	28
   122  000837  46                 	db	70
   123  000838  50                 	db	80
   124  000839  C3                 	db	195
   125  00083A  47                 	db	71
   126  00083B  24                 	db	36
   127  00083C  74                 	db	116
   128  00083D  49                 	db	73
   129  00083E  97                 	db	151
   130  00083F  18                 	db	24
   131  000840  4B                 	db	75
   132  000841  BC                 	db	188
   133  000842  BE                 	db	190
   134  000843  4C                 	db	76
   135  000844  6B                 	db	107
   136  000845  6E                 	db	110
   137  000846  4E                 	db	78
   138  000847  03                 	db	3
   139  000848  15                 	db	21
   140  000849  50                 	db	80
   141  00084A  79                 	db	121
   142  00084B  AD                 	db	173
   143  00084C  60                 	db	96
   144  00084D  F3                 	db	243
   145  00084E  49                 	db	73
   146  00084F  71                 	db	113
   147  000850                     __end_of__powers_:
   148                           	opt stack 0
   149  000850                     __npowers_:
   150                           	opt stack 0
   151  000850  00                 	db	0
   152  000851  80                 	db	128
   153  000852  3F                 	db	63
   154  000853  CD                 	db	205
   155  000854  CC                 	db	204
   156  000855  3D                 	db	61
   157  000856  D7                 	db	215
   158  000857  23                 	db	35
   159  000858  3C                 	db	60
   160  000859  12                 	db	18
   161  00085A  83                 	db	131
   162  00085B  3A                 	db	58
   163  00085C  B7                 	db	183
   164  00085D  D1                 	db	209
   165  00085E  38                 	db	56
   166  00085F  C6                 	db	198
   167  000860  27                 	db	39
   168  000861  37                 	db	55
   169  000862  38                 	db	56
   170  000863  86                 	db	134
   171  000864  35                 	db	53
   172  000865  C0                 	db	192
   173  000866  D6                 	db	214
   174  000867  33                 	db	51
   175  000868  CC                 	db	204
   176  000869  2B                 	db	43
   177  00086A  32                 	db	50
   178  00086B  70                 	db	112
   179  00086C  89                 	db	137
   180  00086D  30                 	db	48
   181  00086E  E7                 	db	231
   182  00086F  DB                 	db	219
   183  000870  2E                 	db	46
   184  000871  E5                 	db	229
   185  000872  3C                 	db	60
   186  000873  1E                 	db	30
   187  000874  42                 	db	66
   188  000875  A2                 	db	162
   189  000876  0D                 	db	13
   190  000877                     __end_of__npowers_:
   191                           	opt stack 0
   192  0000                     _PORTC	set	3970
   193  0000                     _TRISA	set	3986
   194  0000                     _TRISD	set	3989
   195  0000                     _TRISC	set	3988
   196  0000                     _ADRESL	set	4035
   197  0000                     _ADRESH	set	4036
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON0	set	4034
   201  0000                     _PORTCbits	set	3970
   202  0000                     _PORTD	set	3971
   203  0000                     _TMR0L	set	4054
   204  0000                     _RC2	set	31762
   205  0000                     _GO_DONE	set	32273
   206  0000                     _TMR0ON	set	32431
   207  0000                     _T08BIT	set	32430
   208  0000                     _TMR0IF	set	32658
   209  0000                     _T0PS2	set	32426
   210  0000                     _T0PS1	set	32425
   211  0000                     _T0PS0	set	32424
   212  0000                     _PSA	set	32427
   213  0000                     _T0CS	set	32429
   214  000877                     STR_1:
   215  000877  54                 	db	84	;'T'
   216  000878  45                 	db	69	;'E'
   217  000879  4D                 	db	77	;'M'
   218  00087A  50                 	db	80	;'P'
   219  00087B  45                 	db	69	;'E'
   220  00087C  52                 	db	82	;'R'
   221  00087D  41                 	db	65	;'A'
   222  00087E  54                 	db	84	;'T'
   223  00087F  55                 	db	85	;'U'
   224  000880  52                 	db	82	;'R'
   225  000881  41                 	db	65	;'A'
   226  000882  00                 	db	0
   227  000883                     STR_2:
   228  000883  25                 	db	37
   229  000884  33                 	db	51	;'3'
   230  000885  2E                 	db	46
   231  000886  30                 	db	48	;'0'
   232  000887  66                 	db	102	;'f'
   233  000888  20                 	db	32
   234  000889  6F                 	db	111	;'o'
   235  00088A  43                 	db	67	;'C'
   236  00088B  00                 	db	0
   237                           
   238                           ; #config settings
   239  00088C  00                 	db	0	; dummy byte at the end
   240  0000                     
   241                           	psect	cinit
   242  00275A                     __pcinit:
   243                           	opt stack 0
   244  00275A                     start_initialization:
   245                           	opt stack 0
   246  00275A                     __initialization:
   247                           	opt stack 0
   248  00275A                     end_of_initialization:
   249                           	opt stack 0
   250  00275A                     __end_of__initialization:
   251                           	opt stack 0
   252  00275A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   253  00275C  6EF8               	movwf	tblptru,c
   254  00275E  0100               	movlb	0
   255  002760  EF2B  F00F         	goto	_main	;jump to C main() function
   256                           tblptru	equ	0xFF8
   257                           
   258                           	psect	cstackBANK0
   259  000060                     __pcstackBANK0:
   260                           	opt stack 0
   261  000060                     _printf$784:
   262                           	opt stack 0
   263                           
   264                           ; 3 bytes @ 0x0
   265  000060                     	ds	3
   266  000063                     printf@ap:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x3
   270  000063                     	ds	2
   271  000065                     printf@val:
   272                           	opt stack 0
   273                           
   274                           ; 4 bytes @ 0x5
   275  000065                     	ds	4
   276  000069                     printf@flag:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x9
   280  000069                     	ds	2
   281  00006B                     printf@width:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0xB
   285  00006B                     	ds	2
   286  00006D                     printf@tmpval:
   287                           	opt stack 0
   288                           
   289                           ; 4 bytes @ 0xD
   290  00006D                     	ds	4
   291  000071                     printf@exp:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x11
   295  000071                     	ds	2
   296  000073                     printf@fval:
   297                           	opt stack 0
   298                           
   299                           ; 3 bytes @ 0x13
   300  000073                     	ds	3
   301  000076                     printf@prec:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x16
   305  000076                     	ds	2
   306  000078                     printf@c:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x18
   310  000078                     	ds	1
   311                           tblptru	equ	0xFF8
   312                           
   313                           	psect	cstackCOMRAM
   314  000001                     __pcstackCOMRAM:
   315                           	opt stack 0
   316  000001                     ??_isdigit:
   317  000001                     ?_capturar_ad:
   318                           	opt stack 0
   319  000001                     ?___awmod:
   320                           	opt stack 0
   321  000001                     ?___ftpack:
   322                           	opt stack 0
   323  000001                     ?___ftneg:
   324                           	opt stack 0
   325  000001                     ?__tdiv_to_l_:
   326                           	opt stack 0
   327  000001                     ?__div_to_l_:
   328                           	opt stack 0
   329  000001                     ?___lldiv:
   330                           	opt stack 0
   331  000001                     ?___llmod:
   332                           	opt stack 0
   333  000001                     delay_ms@tempo:
   334                           	opt stack 0
   335  000001                     ___awmod@dividend:
   336                           	opt stack 0
   337  000001                     __div_to_l_@f1:
   338                           	opt stack 0
   339  000001                     ___ftpack@arg:
   340                           	opt stack 0
   341  000001                     __tdiv_to_l_@f1:
   342                           	opt stack 0
   343  000001                     ___ftge@ff1:
   344                           	opt stack 0
   345  000001                     ___ftneg@f1:
   346                           	opt stack 0
   347  000001                     ___lldiv@dividend:
   348                           	opt stack 0
   349  000001                     ___llmod@dividend:
   350                           	opt stack 0
   351                           
   352                           ; 4 bytes @ 0x0
   353  000001                     	ds	1
   354  000002                     _isdigit$436:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x1
   358  000002                     	ds	1
   359  000003                     ??_capturar_ad:
   360  000003                     enviar_comando_lcd@valor:
   361                           	opt stack 0
   362  000003                     escrever_lcd@valor:
   363                           	opt stack 0
   364  000003                     isdigit@c:
   365                           	opt stack 0
   366  000003                     ___awmod@divisor:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x2
   370  000003                     	ds	1
   371  000004                     putch@x:
   372                           	opt stack 0
   373  000004                     ___ftpack@exp:
   374                           	opt stack 0
   375  000004                     posicionar_cursor@linha:
   376                           	opt stack 0
   377  000004                     __div_to_l_@f2:
   378                           	opt stack 0
   379  000004                     __tdiv_to_l_@f2:
   380                           	opt stack 0
   381  000004                     ___ftge@ff2:
   382                           	opt stack 0
   383                           
   384                           ; 3 bytes @ 0x3
   385  000004                     	ds	1
   386  000005                     ___awmod@counter:
   387                           	opt stack 0
   388  000005                     ___ftpack@sign:
   389                           	opt stack 0
   390  000005                     capturar_ad@resultado:
   391                           	opt stack 0
   392  000005                     ___lldiv@divisor:
   393                           	opt stack 0
   394  000005                     ___llmod@divisor:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x4
   398  000005                     	ds	1
   399  000006                     ??___ftpack:
   400  000006                     ___awmod@sign:
   401                           	opt stack 0
   402  000006                     posicionar_cursor@coluna:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x5
   406  000006                     	ds	1
   407  000007                     ??__tdiv_to_l_:
   408  000007                     ??___ftge:
   409  000007                     ?___awdiv:
   410                           	opt stack 0
   411  000007                     ___awdiv@dividend:
   412                           	opt stack 0
   413  000007                     __div_to_l_@quot:
   414                           	opt stack 0
   415                           
   416                           ; 4 bytes @ 0x6
   417  000007                     	ds	1
   418  000008                     
   419                           ; 1 bytes @ 0x7
   420  000008                     	ds	1
   421  000009                     ?___ftdiv:
   422                           	opt stack 0
   423  000009                     ?___awtoft:
   424                           	opt stack 0
   425  000009                     ?___lltoft:
   426                           	opt stack 0
   427  000009                     ___llmod@counter:
   428                           	opt stack 0
   429  000009                     ___awdiv@divisor:
   430                           	opt stack 0
   431  000009                     ___awtoft@c:
   432                           	opt stack 0
   433  000009                     ___ftdiv@f1:
   434                           	opt stack 0
   435  000009                     ___lldiv@quotient:
   436                           	opt stack 0
   437  000009                     ___lltoft@c:
   438                           	opt stack 0
   439                           
   440                           ; 4 bytes @ 0x8
   441  000009                     	ds	1
   442  00000A                     __tdiv_to_l_@quot:
   443                           	opt stack 0
   444                           
   445                           ; 4 bytes @ 0x9
   446  00000A                     	ds	1
   447  00000B                     ___awdiv@counter:
   448                           	opt stack 0
   449  00000B                     __div_to_l_@cntr:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0xA
   453  00000B                     	ds	1
   454  00000C                     ___awdiv@sign:
   455                           	opt stack 0
   456  00000C                     ___awtoft@sign:
   457                           	opt stack 0
   458  00000C                     __div_to_l_@exp1:
   459                           	opt stack 0
   460  00000C                     ___ftdiv@f2:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0xB
   464  00000C                     	ds	1
   465  00000D                     ??___lltoft:
   466  00000D                     ___lldiv@counter:
   467                           	opt stack 0
   468  00000D                     ___awdiv@quotient:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0xC
   472  00000D                     	ds	1
   473  00000E                     __tdiv_to_l_@cntr:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0xD
   477  00000E                     	ds	1
   478  00000F                     ??___ftdiv:
   479  00000F                     ?___wmul:
   480                           	opt stack 0
   481  00000F                     __tdiv_to_l_@exp1:
   482                           	opt stack 0
   483  00000F                     ___wmul@multiplier:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0xE
   487  00000F                     	ds	2
   488  000011                     ___lltoft@exp:
   489                           	opt stack 0
   490  000011                     ___wmul@multiplicand:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x10
   494  000011                     	ds	1
   495  000012                     ___ftdiv@cntr:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x11
   499  000012                     	ds	1
   500  000013                     ___wmul@product:
   501                           	opt stack 0
   502  000013                     ___ftdiv@f3:
   503                           	opt stack 0
   504                           
   505                           ; 3 bytes @ 0x12
   506  000013                     	ds	2
   507  000015                     ?___ftmul:
   508                           	opt stack 0
   509  000015                     ___ftmul@f1:
   510                           	opt stack 0
   511                           
   512                           ; 3 bytes @ 0x14
   513  000015                     	ds	1
   514  000016                     ___ftdiv@exp:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x15
   518  000016                     	ds	1
   519  000017                     ___ftdiv@sign:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x16
   523  000017                     	ds	1
   524  000018                     ___ftmul@f2:
   525                           	opt stack 0
   526                           
   527                           ; 3 bytes @ 0x17
   528  000018                     	ds	3
   529  00001B                     ??___ftmul:
   530                           
   531                           ; 1 bytes @ 0x1A
   532  00001B                     	ds	3
   533  00001E                     ___ftmul@exp:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x1D
   537  00001E                     	ds	1
   538  00001F                     ___ftmul@f3_as_product:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x1E
   542  00001F                     	ds	3
   543  000022                     ___ftmul@cntr:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x21
   547  000022                     	ds	1
   548  000023                     ___ftmul@sign:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x22
   552  000023                     	ds	1
   553  000024                     ?_fround:
   554                           	opt stack 0
   555  000024                     ?_scale:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x23
   559  000024                     	ds	3
   560  000027                     _fround$782:
   561                           	opt stack 0
   562  000027                     _scale$783:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x26
   566  000027                     	ds	3
   567  00002A                     scale@scl:
   568                           	opt stack 0
   569  00002A                     _fround$781:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x29
   573  00002A                     	ds	1
   574  00002B                     ?___fttol:
   575                           	opt stack 0
   576  00002B                     ___fttol@f1:
   577                           	opt stack 0
   578                           
   579                           ; 3 bytes @ 0x2A
   580  00002B                     	ds	2
   581  00002D                     fround@prec:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x2C
   585  00002D                     	ds	1
   586  00002E                     ?___ftadd:
   587                           	opt stack 0
   588  00002E                     ___ftadd@f1:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x2D
   592  00002E                     	ds	1
   593  00002F                     ??___fttol:
   594                           
   595                           ; 1 bytes @ 0x2E
   596  00002F                     	ds	2
   597  000031                     ___ftadd@f2:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x30
   601  000031                     	ds	3
   602  000034                     ??___ftadd:
   603  000034                     ___fttol@sign1:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x33
   607  000034                     	ds	1
   608  000035                     ___fttol@lval:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x34
   612  000035                     	ds	2
   613  000037                     ___ftadd@sign:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x36
   617  000037                     	ds	1
   618  000038                     ___ftadd@exp2:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x37
   622  000038                     	ds	1
   623  000039                     ___ftadd@exp1:
   624                           	opt stack 0
   625  000039                     ___fttol@exp1:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x38
   629  000039                     	ds	1
   630  00003A                     ?___ftsub:
   631                           	opt stack 0
   632  00003A                     ___ftsub@f1:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x39
   636  00003A                     	ds	3
   637  00003D                     ___ftsub@f2:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x3C
   641  00003D                     	ds	3
   642  000040                     ?_printf:
   643                           	opt stack 0
   644  000040                     printf@f:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x3F
   648  000040                     	ds	5
   649  000045                     ??_printf:
   650                           
   651                           ; 1 bytes @ 0x44
   652  000045                     	ds	6
   653  00004B                     main@adc:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x4A
   657  00004B                     	ds	2
   658  00004D                     main@temp:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x4C
   662  00004D                     	ds	3
   663                           tblptru	equ	0xFF8
   664                           
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 145 in file "newmain.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  temp            3   76[COMRAM] float 
   675 ;;  adc             2   74[COMRAM] int 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   685 ;;      Params:         0       0       0       0       0       0       0       0       0
   686 ;;      Locals:         5       0       0       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0       0       0
   688 ;;      Totals:         5       0       0       0       0       0       0       0       0
   689 ;;Total ram usage:        5 bytes
   690 ;; Hardware stack levels required when called:    4
   691 ;; This function calls:
   692 ;;		___awtoft
   693 ;;		___ftdiv
   694 ;;		___ftge
   695 ;;		___ftmul
   696 ;;		_capturar_ad
   697 ;;		_inicializa_ad
   698 ;;		_inicializa_lcd
   699 ;;		_inicializa_pinos
   700 ;;		_posicionar_cursor
   701 ;;		_printf
   702 ;; This function is called by:
   703 ;;		Startup code after reset
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text0
   708  001E56                     __ptext0:
   709                           	opt stack 0
   710  001E56                     _main:
   711                           	opt stack 27
   712                           
   713                           ;newmain.c: 147: float temp;
   714                           ;newmain.c: 148: int adc;
   715                           ;newmain.c: 149: inicializa_ad();
   716                           
   717                           ;incstack = 0
   718  001E56  ECA6  F013         	call	_inicializa_ad	;wreg free
   719                           
   720                           ;newmain.c: 150: inicializa_pinos();
   721  001E5A  EC9B  F013         	call	_inicializa_pinos	;wreg free
   722                           
   723                           ;newmain.c: 151: inicializa_lcd();
   724  001E5E  EC41  F013         	call	_inicializa_lcd	;wreg free
   725                           
   726                           ;newmain.c: 152: posicionar_cursor(1,1);
   727  001E62  0E00               	movlw	0
   728  001E64  6E05               	movwf	posicionar_cursor@linha+1,c
   729  001E66  0E01               	movlw	1
   730  001E68  6E04               	movwf	posicionar_cursor@linha,c
   731  001E6A  0E00               	movlw	0
   732  001E6C  6E07               	movwf	posicionar_cursor@coluna+1,c
   733  001E6E  0E01               	movlw	1
   734  001E70  6E06               	movwf	posicionar_cursor@coluna,c
   735  001E72  EC70  F00A         	call	_posicionar_cursor	;wreg free
   736                           
   737                           ;newmain.c: 153: printf("TEMPERATURA");
   738  001E76  0E77               	movlw	low STR_1
   739  001E78  6E40               	movwf	printf@f,c
   740  001E7A  0E08               	movlw	high STR_1
   741  001E7C  6E41               	movwf	printf@f+1,c
   742  001E7E  EC47  F004         	call	_printf	;wreg free
   743  001E82                     
   744                           ;newmain.c: 155: adc=capturar_ad();
   745  001E82  EC67  F013         	call	_capturar_ad	;wreg free
   746  001E86  C001  F04B         	movff	?_capturar_ad,main@adc
   747  001E8A  C002  F04C         	movff	?_capturar_ad+1,main@adc+1
   748                           
   749                           ;newmain.c: 156: temp=(float)adc;
   750  001E8E  C04B  F009         	movff	main@adc,___awtoft@c
   751  001E92  C04C  F00A         	movff	main@adc+1,___awtoft@c+1
   752  001E96  ECE7  F012         	call	___awtoft	;wreg free
   753  001E9A  C009  F04D         	movff	?___awtoft,main@temp
   754  001E9E  C00A  F04E         	movff	?___awtoft+1,main@temp+1
   755  001EA2  C00B  F04F         	movff	?___awtoft+2,main@temp+2
   756                           
   757                           ;newmain.c: 157: temp=temp*(5.0/1024.0);
   758  001EA6  C04D  F015         	movff	main@temp,___ftmul@f1
   759  001EAA  C04E  F016         	movff	main@temp+1,___ftmul@f1+1
   760  001EAE  C04F  F017         	movff	main@temp+2,___ftmul@f1+2
   761  001EB2  0E00               	movlw	0
   762  001EB4  6E18               	movwf	___ftmul@f2,c
   763  001EB6  0EA0               	movlw	160
   764  001EB8  6E19               	movwf	___ftmul@f2+1,c
   765  001EBA  0E3B               	movlw	59
   766  001EBC  6E1A               	movwf	___ftmul@f2+2,c
   767  001EBE  ECA5  F00F         	call	___ftmul	;wreg free
   768  001EC2  C015  F04D         	movff	?___ftmul,main@temp
   769  001EC6  C016  F04E         	movff	?___ftmul+1,main@temp+1
   770  001ECA  C017  F04F         	movff	?___ftmul+2,main@temp+2
   771                           
   772                           ;newmain.c: 158: temp=temp/(10e-3);
   773  001ECE  C04D  F009         	movff	main@temp,___ftdiv@f1
   774  001ED2  C04E  F00A         	movff	main@temp+1,___ftdiv@f1+1
   775  001ED6  C04F  F00B         	movff	main@temp+2,___ftdiv@f1+2
   776  001EDA  0ED7               	movlw	215
   777  001EDC  6E0C               	movwf	___ftdiv@f2,c
   778  001EDE  0E23               	movlw	35
   779  001EE0  6E0D               	movwf	___ftdiv@f2+1,c
   780  001EE2  0E3C               	movlw	60
   781  001EE4  6E0E               	movwf	___ftdiv@f2+2,c
   782  001EE6  EC99  F010         	call	___ftdiv	;wreg free
   783  001EEA  C009  F04D         	movff	?___ftdiv,main@temp
   784  001EEE  C00A  F04E         	movff	?___ftdiv+1,main@temp+1
   785  001EF2  C00B  F04F         	movff	?___ftdiv+2,main@temp+2
   786                           
   787                           ;newmain.c: 159: posicionar_cursor(2,1);
   788  001EF6  0E00               	movlw	0
   789  001EF8  6E05               	movwf	posicionar_cursor@linha+1,c
   790  001EFA  0E02               	movlw	2
   791  001EFC  6E04               	movwf	posicionar_cursor@linha,c
   792  001EFE  0E00               	movlw	0
   793  001F00  6E07               	movwf	posicionar_cursor@coluna+1,c
   794  001F02  0E01               	movlw	1
   795  001F04  6E06               	movwf	posicionar_cursor@coluna,c
   796  001F06  EC70  F00A         	call	_posicionar_cursor	;wreg free
   797                           
   798                           ;newmain.c: 160: printf("%3.0f oC", temp);
   799  001F0A  0E83               	movlw	low STR_2
   800  001F0C  6E40               	movwf	printf@f,c
   801  001F0E  0E08               	movlw	high STR_2
   802  001F10  6E41               	movwf	printf@f+1,c
   803  001F12  C04D  F042         	movff	main@temp,?_printf+2
   804  001F16  C04E  F043         	movff	main@temp+1,?_printf+3
   805  001F1A  C04F  F044         	movff	main@temp+2,?_printf+4
   806  001F1E  EC47  F004         	call	_printf	;wreg free
   807                           
   808                           ;newmain.c: 161: if(temp>=25){
   809  001F22  C04D  F001         	movff	main@temp,___ftge@ff1
   810  001F26  C04E  F002         	movff	main@temp+1,___ftge@ff1+1
   811  001F2A  C04F  F003         	movff	main@temp+2,___ftge@ff1+2
   812  001F2E  0E00               	movlw	0
   813  001F30  6E04               	movwf	___ftge@ff2,c
   814  001F32  0EC8               	movlw	200
   815  001F34  6E05               	movwf	___ftge@ff2+1,c
   816  001F36  0E41               	movlw	65
   817  001F38  6E06               	movwf	___ftge@ff2+2,c
   818  001F3A  EC63  F011         	call	___ftge	;wreg free
   819  001F3E  A0D8               	btfss	status,0,c
   820  001F40  D002               	goto	l120
   821                           
   822                           ;newmain.c: 162: RC2=1;
   823  001F42  8482               	bsf	3970,2,c	;volatile
   824                           
   825                           ;newmain.c: 163: }
   826  001F44  D79E               	goto	l119
   827  001F46                     l120:
   828                           
   829                           ;newmain.c: 164: else{
   830                           ;newmain.c: 165: RC2=0;
   831  001F46  9482               	bcf	3970,2,c	;volatile
   832  001F48  D79C               	goto	l119
   833  001F4A                     __end_of_main:
   834                           	opt stack 0
   835                           tblptru	equ	0xFF8
   836                           status	equ	0xFD8
   837                           
   838 ;; *************** function _printf *****************
   839 ;; Defined at:
   840 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;  f               2   63[COMRAM] PTR const unsigned char 
   843 ;;		 -> STR_2(9), STR_1(12), 
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  tmpval          4   13[BANK0 ] struct .
   846 ;;  val             4    5[BANK0 ] unsigned long 
   847 ;;  fval            3   19[BANK0 ] unsigned long 
   848 ;;  cp              3    0        PTR const unsigned char 
   849 ;;  prec            2   22[BANK0 ] int 
   850 ;;  exp             2   17[BANK0 ] int 
   851 ;;  width           2   11[BANK0 ] int 
   852 ;;  flag            2    9[BANK0 ] unsigned short 
   853 ;;  ap              2    3[BANK0 ] PTR void [1]
   854 ;;		 -> ?_printf(2), 
   855 ;;  len             2    0        unsigned int 
   856 ;;  c               1   24[BANK0 ] char 
   857 ;;  d               1    0        unsigned char 
   858 ;; Return value:  Size  Location     Type
   859 ;;                  2   63[COMRAM] int 
   860 ;; Registers used:
   861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   867 ;;      Params:         5       0       0       0       0       0       0       0       0
   868 ;;      Locals:         0      25       0       0       0       0       0       0       0
   869 ;;      Temps:          6       0       0       0       0       0       0       0       0
   870 ;;      Totals:        11      25       0       0       0       0       0       0       0
   871 ;;Total ram usage:       36 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; Hardware stack levels required when called:    3
   874 ;; This function calls:
   875 ;;		___awdiv
   876 ;;		___ftadd
   877 ;;		___ftge
   878 ;;		___ftmul
   879 ;;		___ftneg
   880 ;;		___ftsub
   881 ;;		___fttol
   882 ;;		___lldiv
   883 ;;		___llmod
   884 ;;		___lltoft
   885 ;;		___wmul
   886 ;;		__div_to_l_
   887 ;;		__tdiv_to_l_
   888 ;;		_fround
   889 ;;		_isdigit
   890 ;;		_putch
   891 ;;		_scale
   892 ;; This function is called by:
   893 ;;		_main
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text1
   898  00088E                     __ptext1:
   899                           	opt stack 0
   900  00088E                     _printf:
   901                           	opt stack 27
   902                           
   903                           ;doprnt.c: 466: va_list ap;
   904                           ;doprnt.c: 499: signed char c;
   905                           ;doprnt.c: 501: int width;
   906                           ;doprnt.c: 504: int prec;
   907                           ;doprnt.c: 508: unsigned short flag;
   908                           ;doprnt.c: 515: char d;
   909                           ;doprnt.c: 516: double fval;
   910                           ;doprnt.c: 517: int exp;
   911                           ;doprnt.c: 523: union {
   912                           ;doprnt.c: 524: unsigned long vd;
   913                           ;doprnt.c: 525: double integ;
   914                           ;doprnt.c: 526: } tmpval;
   915                           ;doprnt.c: 528: unsigned long val;
   916                           ;doprnt.c: 529: unsigned len;
   917                           ;doprnt.c: 530: const char * cp;
   918                           ;doprnt.c: 533: *ap = __va_start();
   919                           
   920                           ;incstack = 0
   921  00088E  0E42               	movlw	low (?_printf+2)
   922  000890  0100               	movlb	0	; () banked
   923  000892  6F63               	movwf	printf@ap& (0+255),b
   924  000894  0E00               	movlw	high (?_printf+2)
   925  000896  6F64               	movwf	(printf@ap+1)& (0+255),b
   926                           
   927                           ;doprnt.c: 536: while(c = *f++) {
   928  000898  EF5D  F008         	goto	l234
   929  00089C                     
   930                           ; BSR set to: 0
   931                           ;doprnt.c: 538: if(c != '%')
   932                           
   933                           ; BSR set to: 0
   934  00089C  0E25               	movlw	37
   935  00089E  1978               	xorwf	printf@c& (0+255),w,b
   936  0008A0  B4D8               	btfsc	status,2,c
   937  0008A2  D005               	goto	l163
   938                           
   939                           ; BSR set to: 0
   940                           ;doprnt.c: 540: {
   941                           ;doprnt.c: 541: (putch(c) );
   942  0008A4  5178               	movf	printf@c& (0+255),w,b
   943  0008A6  ECB2  F013         	call	_putch
   944                           
   945                           ;doprnt.c: 542: continue;
   946  0008AA  EF5D  F008         	goto	l234
   947  0008AE                     l163:
   948                           
   949                           ;doprnt.c: 543: }
   950                           ;doprnt.c: 546: width = 0;
   951  0008AE  0E00               	movlw	0
   952  0008B0  0100               	movlb	0	; () banked
   953  0008B2  6F6C               	movwf	(printf@width+1)& (0+255),b
   954  0008B4  0E00               	movlw	0
   955  0008B6  6F6B               	movwf	printf@width& (0+255),b
   956                           
   957                           ;doprnt.c: 548: flag = 0;
   958  0008B8  0E00               	movlw	0
   959  0008BA  6F6A               	movwf	(printf@flag+1)& (0+255),b
   960  0008BC  0E00               	movlw	0
   961  0008BE  6F69               	movwf	printf@flag& (0+255),b
   962                           
   963                           ; BSR set to: 0
   964                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   965  0008C0  C040  FFF6         	movff	printf@f,tblptrl
   966  0008C4  C041  FFF7         	movff	printf@f+1,tblptrh
   967  0008C8                     	if	0	;tblptru may be non-zero
   968  0008C8                     	endif
   969  0008C8                     	if	0	;tblptru may be non-zero
   970  0008C8                     	endif
   971  0008C8  0008               	tblrd		*
   972  0008CA  50F5               	movf	tablat,w,c
   973  0008CC  EC8C  F013         	call	_isdigit
   974  0008D0  A0D8               	btfss	status,0,c
   975  0008D2  D034               	goto	u3730
   976                           
   977                           ;doprnt.c: 598: width = 0;
   978  0008D4  0E00               	movlw	0
   979  0008D6  0100               	movlb	0	; () banked
   980  0008D8  6F6C               	movwf	(printf@width+1)& (0+255),b
   981  0008DA  0E00               	movlw	0
   982  0008DC  6F6B               	movwf	printf@width& (0+255),b
   983  0008DE                     
   984                           ;doprnt.c: 600: width *= 10;
   985                           
   986                           ; BSR set to: 0
   987  0008DE  C06B  F00F         	movff	printf@width,___wmul@multiplier
   988  0008E2  C06C  F010         	movff	printf@width+1,___wmul@multiplier+1
   989  0008E6  0E00               	movlw	0
   990  0008E8  6E12               	movwf	___wmul@multiplicand+1,c
   991  0008EA  0E0A               	movlw	10
   992  0008EC  6E11               	movwf	___wmul@multiplicand,c
   993  0008EE  EC2E  F013         	call	___wmul	;wreg free
   994  0008F2  C00F  F06B         	movff	?___wmul,printf@width
   995  0008F6  C010  F06C         	movff	?___wmul+1,printf@width+1
   996                           
   997                           ;doprnt.c: 601: width += *f++ - '0';
   998  0008FA  0ED0               	movlw	208
   999  0008FC  6E45               	movwf	??_printf& (0+255),c
  1000  0008FE  0EFF               	movlw	255
  1001  000900  6E46               	movwf	(??_printf+1)& (0+255),c
  1002  000902  C040  FFF6         	movff	printf@f,tblptrl
  1003  000906  C041  FFF7         	movff	printf@f+1,tblptrh
  1004  00090A                     	if	0	;tblptru may be non-zero
  1005  00090A                     	endif
  1006  00090A                     	if	0	;tblptru may be non-zero
  1007  00090A                     	endif
  1008  00090A  0008               	tblrd		*
  1009  00090C  50F5               	movf	tablat,w,c
  1010  00090E  6E47               	movwf	(??_printf+2)& (0+255),c
  1011  000910  6A48               	clrf	(??_printf+3)& (0+255),c
  1012  000912  5045               	movf	??_printf,w,c
  1013  000914  2647               	addwf	??_printf+2,f,c
  1014  000916  5046               	movf	??_printf+1,w,c
  1015  000918  2248               	addwfc	??_printf+3,f,c
  1016  00091A  5047               	movf	??_printf+2,w,c
  1017  00091C  0100               	movlb	0	; () banked
  1018  00091E  276B               	addwf	printf@width& (0+255),f,b
  1019  000920  5048               	movf	??_printf+3,w,c
  1020  000922  236C               	addwfc	(printf@width+1)& (0+255),f,b
  1021                           
  1022                           ; BSR set to: 0
  1023  000924  4A40               	infsnz	printf@f,f,c
  1024  000926  2A41               	incf	printf@f+1,f,c
  1025                           
  1026                           ; BSR set to: 0
  1027                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1028  000928  C040  FFF6         	movff	printf@f,tblptrl
  1029  00092C  C041  FFF7         	movff	printf@f+1,tblptrh
  1030  000930                     	if	0	;tblptru may be non-zero
  1031  000930                     	endif
  1032  000930                     	if	0	;tblptru may be non-zero
  1033  000930                     	endif
  1034  000930  0008               	tblrd		*
  1035  000932  50F5               	movf	tablat,w,c
  1036  000934  EC8C  F013         	call	_isdigit
  1037  000938  B0D8               	btfsc	status,0,c
  1038  00093A  D7D1               	goto	l165
  1039  00093C                     u3730:
  1040                           
  1041                           ;doprnt.c: 608: }
  1042                           ;doprnt.c: 611: if(*f == '.') {
  1043  00093C  C040  FFF6         	movff	printf@f,tblptrl
  1044  000940  C041  FFF7         	movff	printf@f+1,tblptrh
  1045  000944                     	if	0	;tblptru may be non-zero
  1046  000944                     	endif
  1047  000944                     	if	0	;tblptru may be non-zero
  1048  000944                     	endif
  1049  000944  0008               	tblrd		*
  1050  000946  50F5               	movf	tablat,w,c
  1051  000948  0A2E               	xorlw	46
  1052  00094A  A4D8               	btfss	status,2,c
  1053  00094C  D030               	goto	l167
  1054                           
  1055                           ;doprnt.c: 612: flag |= 0x4000;
  1056  00094E  0100               	movlb	0	; () banked
  1057  000950  8D6A               	bsf	(printf@flag+1)& (0+255),6,b
  1058                           
  1059                           ;doprnt.c: 613: f++;
  1060  000952  4A40               	infsnz	printf@f,f,c
  1061  000954  2A41               	incf	printf@f+1,f,c
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;doprnt.c: 620: {
  1065                           ;doprnt.c: 621: prec = 0;
  1066  000956  0E00               	movlw	0
  1067  000958  6F77               	movwf	(printf@prec+1)& (0+255),b
  1068  00095A  0E00               	movlw	0
  1069  00095C  6F76               	movwf	printf@prec& (0+255),b
  1070                           
  1071                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1072  00095E  D01C               	goto	l168
  1073  000960                     
  1074                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1075                           
  1076                           ; BSR set to: 0
  1077  000960  C076  F00F         	movff	printf@prec,___wmul@multiplier
  1078  000964  C077  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1079  000968  0E00               	movlw	0
  1080  00096A  6E12               	movwf	___wmul@multiplicand+1,c
  1081  00096C  0E0A               	movlw	10
  1082  00096E  6E11               	movwf	___wmul@multiplicand,c
  1083  000970  EC2E  F013         	call	___wmul	;wreg free
  1084  000974  C040  FFF6         	movff	printf@f,tblptrl
  1085  000978  C041  FFF7         	movff	printf@f+1,tblptrh
  1086  00097C                     	if	0	;tblptru may be non-zero
  1087  00097C                     	endif
  1088  00097C                     	if	0	;tblptru may be non-zero
  1089  00097C                     	endif
  1090  00097C  0008               	tblrd		*
  1091  00097E  50F5               	movf	tablat,w,c
  1092  000980  260F               	addwf	?___wmul,f,c
  1093  000982  0E00               	movlw	0
  1094  000984  2210               	addwfc	?___wmul+1,f,c
  1095  000986  0ED0               	movlw	208
  1096  000988  240F               	addwf	?___wmul,w,c
  1097  00098A  0100               	movlb	0	; () banked
  1098  00098C  6F76               	movwf	printf@prec& (0+255),b
  1099  00098E  0EFF               	movlw	255
  1100  000990  2010               	addwfc	?___wmul+1,w,c
  1101  000992  6F77               	movwf	(printf@prec+1)& (0+255),b
  1102                           
  1103                           ; BSR set to: 0
  1104  000994  4A40               	infsnz	printf@f,f,c
  1105  000996  2A41               	incf	printf@f+1,f,c
  1106  000998                     l168:
  1107                           
  1108                           ; BSR set to: 0
  1109                           
  1110                           ; BSR set to: 0
  1111  000998  C040  FFF6         	movff	printf@f,tblptrl
  1112  00099C  C041  FFF7         	movff	printf@f+1,tblptrh
  1113  0009A0                     	if	0	;tblptru may be non-zero
  1114  0009A0                     	endif
  1115  0009A0                     	if	0	;tblptru may be non-zero
  1116  0009A0                     	endif
  1117  0009A0  0008               	tblrd		*
  1118  0009A2  50F5               	movf	tablat,w,c
  1119  0009A4  EC8C  F013         	call	_isdigit
  1120  0009A8  A0D8               	btfss	status,0,c
  1121  0009AA  D00A               	goto	l172
  1122  0009AC  D7D9               	goto	l169
  1123  0009AE                     l167:
  1124                           
  1125                           ;doprnt.c: 626: prec = 0;
  1126  0009AE  0E00               	movlw	0
  1127  0009B0  0100               	movlb	0	; () banked
  1128  0009B2  6F77               	movwf	(printf@prec+1)& (0+255),b
  1129  0009B4  0E00               	movlw	0
  1130  0009B6  6F76               	movwf	printf@prec& (0+255),b
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;doprnt.c: 628: flag |= 0x1000;
  1134  0009B8  896A               	bsf	(printf@flag+1)& (0+255),4,b
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;doprnt.c: 630: }
  1138                           ;doprnt.c: 635: switch(c = *f++) {
  1139  0009BA  D002               	goto	l172
  1140  0009BC                     
  1141                           ; BSR set to: 0
  1142                           ;doprnt.c: 663: flag |= 0x400;
  1143                           
  1144                           ; BSR set to: 0
  1145  0009BC  856A               	bsf	(printf@flag+1)& (0+255),2,b
  1146                           
  1147                           ;doprnt.c: 664: break;
  1148  0009BE  D012               	goto	l176
  1149  0009C0                     l172:
  1150                           
  1151                           ; BSR set to: 0
  1152  0009C0  C040  FFF6         	movff	printf@f,tblptrl
  1153  0009C4  C041  FFF7         	movff	printf@f+1,tblptrh
  1154  0009C8  4A40               	infsnz	printf@f,f,c
  1155  0009CA  2A41               	incf	printf@f+1,f,c
  1156  0009CC                     	if	0	;tblptru may be non-zero
  1157  0009CC                     	endif
  1158  0009CC                     	if	0	;tblptru may be non-zero
  1159  0009CC                     	endif
  1160  0009CC  0008               	tblrd		*
  1161  0009CE  CFF5 F078          	movff	tablat,printf@c
  1162  0009D2  0100               	movlb	0	; () banked
  1163  0009D4  5178               	movf	printf@c& (0+255),w,b
  1164                           
  1165                           ; Switch size 1, requested type "space"
  1166                           ; Number of cases is 2, Range of values is 0 to 102
  1167                           ; switch strategies available:
  1168                           ; Name         Instructions Cycles
  1169                           ; simple_byte            7     4 (average)
  1170                           ;	Chosen strategy is simple_byte
  1171  0009D6  0A00               	xorlw	0	; case 0
  1172  0009D8  B4D8               	btfsc	status,2,c
  1173  0009DA  0012               	return	
  1174  0009DC  0A66               	xorlw	102	; case 102
  1175  0009DE  B4D8               	btfsc	status,2,c
  1176  0009E0  D7ED               	goto	l175
  1177  0009E2  D36B               	goto	l234
  1178  0009E4                     l176:
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;doprnt.c: 825: if(flag & (0x700)) {
  1182                           
  1183                           ; BSR set to: 0
  1184  0009E4  0E07               	movlw	7
  1185  0009E6  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1186  0009E8  B4D8               	btfsc	status,2,c
  1187  0009EA  D2E5               	goto	l178
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;doprnt.c: 827: if(flag & 0x1000)
  1191  0009EC  A96A               	btfss	(printf@flag+1)& (0+255),4,b
  1192  0009EE  D004               	goto	l179
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;doprnt.c: 829: prec = 6;
  1196  0009F0  0E00               	movlw	0
  1197  0009F2  6F77               	movwf	(printf@prec+1)& (0+255),b
  1198  0009F4  0E06               	movlw	6
  1199  0009F6  6F76               	movwf	printf@prec& (0+255),b
  1200  0009F8                     l179:
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1204                           
  1205                           ; BSR set to: 0
  1206  0009F8  C063  FFD9         	movff	printf@ap,fsr2l
  1207  0009FC  C064  FFDA         	movff	printf@ap+1,fsr2h
  1208  000A00  CFDE F073          	movff	postinc2,printf@fval
  1209  000A04  CFDE F074          	movff	postinc2,printf@fval+1
  1210  000A08  CFDD F075          	movff	postdec2,printf@fval+2
  1211                           
  1212                           ; BSR set to: 0
  1213  000A0C  0E03               	movlw	3
  1214  000A0E  2763               	addwf	printf@ap& (0+255),f,b
  1215  000A10  0E00               	movlw	0
  1216  000A12  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;doprnt.c: 831: if(fval < 0.0) {
  1220  000A14  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  1221  000A16  D011               	goto	l180
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;doprnt.c: 832: fval = -fval;
  1225  000A18  C073  F001         	movff	printf@fval,___ftneg@f1
  1226  000A1C  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  1227  000A20  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  1228  000A24  EC7A  F013         	call	___ftneg	;wreg free
  1229  000A28  C001  F073         	movff	?___ftneg,printf@fval
  1230  000A2C  C002  F074         	movff	?___ftneg+1,printf@fval+1
  1231  000A30  C003  F075         	movff	?___ftneg+2,printf@fval+2
  1232                           
  1233                           ;doprnt.c: 833: flag |= 0x03;
  1234  000A34  0E03               	movlw	3
  1235  000A36  0100               	movlb	0	; () banked
  1236  000A38  1369               	iorwf	printf@flag& (0+255),f,b
  1237  000A3A                     l180:
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;doprnt.c: 834: }
  1241                           ;doprnt.c: 835: exp = 0;
  1242                           
  1243                           ; BSR set to: 0
  1244  000A3A  0E00               	movlw	0
  1245  000A3C  6F72               	movwf	(printf@exp+1)& (0+255),b
  1246  000A3E  0E00               	movlw	0
  1247  000A40  6F71               	movwf	printf@exp& (0+255),b
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;doprnt.c: 836: if( fval!=0) {
  1251  000A42  5173               	movf	printf@fval& (0+255),w,b
  1252  000A44  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1253  000A46  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1254  000A48  B4D8               	btfsc	status,2,c
  1255  000A4A  D086               	goto	l185
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1259  000A4C  0E82               	movlw	130
  1260  000A4E  6E45               	movwf	??_printf& (0+255),c
  1261  000A50  0EFF               	movlw	255
  1262  000A52  6E46               	movwf	(??_printf+1)& (0+255),c
  1263  000A54  C073  F047         	movff	printf@fval,??_printf+2
  1264  000A58  C074  F048         	movff	printf@fval+1,??_printf+3
  1265  000A5C  C075  F049         	movff	printf@fval+2,??_printf+4
  1266  000A60  C076  F04A         	movff	printf@fval+3,??_printf+5
  1267  000A64  0E10               	movlw	16
  1268  000A66  D005               	goto	u3800
  1269  000A68                     u3805:
  1270  000A68  90D8               	bcf	status,0,c
  1271  000A6A  324A               	rrcf	??_printf+5,f,c
  1272  000A6C  3249               	rrcf	??_printf+4,f,c
  1273  000A6E  3248               	rrcf	??_printf+3,f,c
  1274  000A70  3247               	rrcf	??_printf+2,f,c
  1275  000A72                     u3800:
  1276  000A72  2EE8               	decfsz	wreg,f,c
  1277  000A74  D7F9               	goto	u3805
  1278  000A76  5047               	movf	??_printf+2,w,c
  1279  000A78  2445               	addwf	??_printf,w,c
  1280  000A7A  6F71               	movwf	printf@exp& (0+255),b
  1281  000A7C  0E00               	movlw	0
  1282  000A7E  2046               	addwfc	??_printf+1,w,c
  1283  000A80  6F72               	movwf	(printf@exp+1)& (0+255),b
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 838: exp--;
  1287  000A82  0771               	decf	printf@exp& (0+255),f,b
  1288  000A84  A0D8               	btfss	status,0,c
  1289  000A86  0772               	decf	(printf@exp+1)& (0+255),f,b
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;doprnt.c: 839: exp *= 3;
  1293  000A88  C071  F00F         	movff	printf@exp,___wmul@multiplier
  1294  000A8C  C072  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1295  000A90  0E00               	movlw	0
  1296  000A92  6E12               	movwf	___wmul@multiplicand+1,c
  1297  000A94  0E03               	movlw	3
  1298  000A96  6E11               	movwf	___wmul@multiplicand,c
  1299  000A98  EC2E  F013         	call	___wmul	;wreg free
  1300  000A9C  C00F  F071         	movff	?___wmul,printf@exp
  1301  000AA0  C010  F072         	movff	?___wmul+1,printf@exp+1
  1302                           
  1303                           ;doprnt.c: 840: exp /= 10;
  1304  000AA4  C071  F007         	movff	printf@exp,___awdiv@dividend
  1305  000AA8  C072  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1306  000AAC  0E00               	movlw	0
  1307  000AAE  6E0A               	movwf	___awdiv@divisor+1,c
  1308  000AB0  0E0A               	movlw	10
  1309  000AB2  6E09               	movwf	___awdiv@divisor,c
  1310  000AB4  ECAB  F011         	call	___awdiv	;wreg free
  1311  000AB8  C007  F071         	movff	?___awdiv,printf@exp
  1312  000ABC  C008  F072         	movff	?___awdiv+1,printf@exp+1
  1313                           
  1314                           ;doprnt.c: 841: if(exp < 0)
  1315  000AC0  0100               	movlb	0	; () banked
  1316  000AC2  AF72               	btfss	(printf@exp+1)& (0+255),7,b
  1317  000AC4  D003               	goto	l182
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;doprnt.c: 842: exp--;
  1321  000AC6  0771               	decf	printf@exp& (0+255),f,b
  1322  000AC8  A0D8               	btfss	status,0,c
  1323  000ACA  0772               	decf	(printf@exp+1)& (0+255),f,b
  1324  000ACC                     l182:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1328                           
  1329                           ; BSR set to: 0
  1330  000ACC  5171               	movf	printf@exp& (0+255),w,b
  1331  000ACE  0800               	sublw	0
  1332  000AD0  EC6C  F008         	call	_scale
  1333  000AD4  C024  F06D         	movff	?_scale,printf@tmpval
  1334  000AD8  C025  F06E         	movff	?_scale+1,printf@tmpval+1
  1335  000ADC  C026  F06F         	movff	?_scale+2,printf@tmpval+2
  1336                           
  1337                           ;doprnt.c: 847: tmpval.integ *= fval;
  1338  000AE0  C06D  F015         	movff	printf@tmpval,___ftmul@f1
  1339  000AE4  C06E  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1340  000AE8  C06F  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1341  000AEC  C073  F018         	movff	printf@fval,___ftmul@f2
  1342  000AF0  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  1343  000AF4  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1344  000AF8  ECA5  F00F         	call	___ftmul	;wreg free
  1345  000AFC  C015  F06D         	movff	?___ftmul,printf@tmpval
  1346  000B00  C016  F06E         	movff	?___ftmul+1,printf@tmpval+1
  1347  000B04  C017  F06F         	movff	?___ftmul+2,printf@tmpval+2
  1348                           
  1349                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1350  000B08  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1351  000B0C  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1352  000B10  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1353  000B14  0E00               	movlw	0
  1354  000B16  6E04               	movwf	___ftge@ff2,c
  1355  000B18  0E80               	movlw	128
  1356  000B1A  6E05               	movwf	___ftge@ff2+1,c
  1357  000B1C  0E3F               	movlw	63
  1358  000B1E  6E06               	movwf	___ftge@ff2+2,c
  1359  000B20  EC63  F011         	call	___ftge	;wreg free
  1360  000B24  B0D8               	btfsc	status,0,c
  1361  000B26  D005               	goto	l183
  1362                           
  1363                           ;doprnt.c: 849: exp--;
  1364  000B28  0100               	movlb	0	; () banked
  1365  000B2A  0771               	decf	printf@exp& (0+255),f,b
  1366  000B2C  A0D8               	btfss	status,0,c
  1367  000B2E  0772               	decf	(printf@exp+1)& (0+255),f,b
  1368  000B30  D013               	goto	l185
  1369  000B32                     l183:
  1370                           
  1371                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1372                           
  1373                           ; BSR set to: 0
  1374  000B32  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1375  000B36  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1376  000B3A  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1377  000B3E  0E00               	movlw	0
  1378  000B40  6E04               	movwf	___ftge@ff2,c
  1379  000B42  0E20               	movlw	32
  1380  000B44  6E05               	movwf	___ftge@ff2+1,c
  1381  000B46  0E41               	movlw	65
  1382  000B48  6E06               	movwf	___ftge@ff2+2,c
  1383  000B4A  EC63  F011         	call	___ftge	;wreg free
  1384  000B4E  A0D8               	btfss	status,0,c
  1385  000B50  D003               	goto	l185
  1386                           
  1387                           ;doprnt.c: 851: exp++;
  1388  000B52  0100               	movlb	0	; () banked
  1389  000B54  4B71               	infsnz	printf@exp& (0+255),f,b
  1390  000B56  2B72               	incf	(printf@exp+1)& (0+255),f,b
  1391  000B58                     l185:
  1392                           
  1393                           ;doprnt.c: 852: }
  1394                           ;doprnt.c: 1112: if(prec <= 12)
  1395                           
  1396                           ; BSR set to: 0
  1397                           
  1398                           ; BSR set to: 0
  1399                           
  1400                           ; BSR set to: 0
  1401  000B58  0100               	movlb	0	; () banked
  1402  000B5A  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  1403  000B5C  D006               	goto	u3840
  1404  000B5E  5177               	movf	(printf@prec+1)& (0+255),w,b
  1405  000B60  E11B               	bnz	l2909
  1406  000B62  0E0D               	movlw	13
  1407  000B64  5D76               	subwf	printf@prec& (0+255),w,b
  1408  000B66  B0D8               	btfsc	status,0,c
  1409  000B68  D017               	goto	l186
  1410  000B6A                     u3840:
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;doprnt.c: 1113: fval += fround(prec);
  1414  000B6A  C073  F02E         	movff	printf@fval,___ftadd@f1
  1415  000B6E  C074  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1416  000B72  C075  F030         	movff	printf@fval+2,___ftadd@f1+2
  1417  000B76  5176               	movf	printf@prec& (0+255),w,b
  1418  000B78  ECFF  F00B         	call	_fround
  1419  000B7C  C024  F031         	movff	?_fround,___ftadd@f2
  1420  000B80  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1421  000B84  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1422  000B88  EC28  F00D         	call	___ftadd	;wreg free
  1423  000B8C  C02E  F073         	movff	?___ftadd,printf@fval
  1424  000B90  C02F  F074         	movff	?___ftadd+1,printf@fval+1
  1425  000B94  C030  F075         	movff	?___ftadd+2,printf@fval+2
  1426  000B98                     l186:
  1427  000B98                     l2909:
  1428                           
  1429                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1430  000B98  0100               	movlb	0	; () banked
  1431  000B9A  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1432  000B9C  D006               	goto	u3850
  1433  000B9E  5172               	movf	(printf@exp+1)& (0+255),w,b
  1434  000BA0  E120               	bnz	l2917
  1435  000BA2  0E0A               	movlw	10
  1436  000BA4  5D71               	subwf	printf@exp& (0+255),w,b
  1437  000BA6  B0D8               	btfsc	status,0,c
  1438  000BA8  D01C               	goto	u3880
  1439  000BAA                     u3850:
  1440                           
  1441                           ; BSR set to: 0
  1442  000BAA  5173               	movf	printf@fval& (0+255),w,b
  1443  000BAC  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1444  000BAE  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1445  000BB0  B4D8               	btfsc	status,2,c
  1446  000BB2  D056               	goto	l187
  1447                           
  1448                           ; BSR set to: 0
  1449  000BB4  C073  F02B         	movff	printf@fval,___fttol@f1
  1450  000BB8  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  1451  000BBC  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  1452  000BC0  EC1F  F010         	call	___fttol	;wreg free
  1453  000BC4  502B               	movf	?___fttol,w,c
  1454  000BC6  102C               	iorwf	?___fttol+1,w,c
  1455  000BC8  102D               	iorwf	?___fttol+2,w,c
  1456  000BCA  102E               	iorwf	?___fttol+3,w,c
  1457  000BCC  A4D8               	btfss	status,2,c
  1458  000BCE  D048               	goto	l187
  1459  000BD0  0100               	movlb	0	; () banked
  1460  000BD2  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1461  000BD4  D045               	goto	l187
  1462  000BD6  5172               	movf	(printf@exp+1)& (0+255),w,b
  1463  000BD8  E104               	bnz	l2917
  1464  000BDA  0E02               	movlw	2
  1465  000BDC  5D71               	subwf	printf@exp& (0+255),w,b
  1466  000BDE  A0D8               	btfss	status,0,c
  1467  000BE0  D03F               	goto	l187
  1468  000BE2                     u3880:
  1469  000BE2                     l2917:
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1473  000BE2  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1474  000BE6  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1475  000BEA  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1476  000BEE  0E70               	movlw	112
  1477  000BF0  6E04               	movwf	___ftge@ff2,c
  1478  000BF2  0E89               	movlw	137
  1479  000BF4  6E05               	movwf	___ftge@ff2+1,c
  1480  000BF6  0E40               	movlw	64
  1481  000BF8  6E06               	movwf	___ftge@ff2+2,c
  1482  000BFA  EC63  F011         	call	___ftge	;wreg free
  1483  000BFE  B0D8               	btfsc	status,0,c
  1484  000C00  D003               	goto	l190
  1485                           
  1486                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1487  000C02  0100               	movlb	0	; () banked
  1488  000C04  0EF7               	movlw	247
  1489  000C06  D002               	goto	L1
  1490  000C08                     l190:
  1491                           
  1492                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1493                           
  1494                           ; BSR set to: 0
  1495  000C08  0100               	movlb	0	; () banked
  1496  000C0A  0EF8               	movlw	248
  1497  000C0C                     L1:
  1498  000C0C  2771               	addwf	printf@exp& (0+255),f,b
  1499  000C0E  0EFF               	movlw	255
  1500  000C10  2372               	addwfc	(printf@exp+1)& (0+255),f,b
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;doprnt.c: 1124: }
  1504                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1505                           
  1506                           ; BSR set to: 0
  1507  000C12  5171               	movf	printf@exp& (0+255),w,b
  1508  000C14  EC6C  F008         	call	_scale
  1509  000C18  C024  F06D         	movff	?_scale,printf@tmpval
  1510  000C1C  C025  F06E         	movff	?_scale+1,printf@tmpval+1
  1511  000C20  C026  F06F         	movff	?_scale+2,printf@tmpval+2
  1512                           
  1513                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1514  000C24  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1515  000C28  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1516  000C2C  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1517  000C30  C06D  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1518  000C34  C06E  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1519  000C38  C06F  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1520  000C3C  ECFE  F00D         	call	__tdiv_to_l_	;wreg free
  1521  000C40  C001  F065         	movff	?__tdiv_to_l_,printf@val
  1522  000C44  C002  F066         	movff	?__tdiv_to_l_+1,printf@val+1
  1523  000C48  C003  F067         	movff	?__tdiv_to_l_+2,printf@val+2
  1524  000C4C  C004  F068         	movff	?__tdiv_to_l_+3,printf@val+3
  1525                           
  1526                           ;doprnt.c: 1129: fval = 0.0;
  1527  000C50  0E00               	movlw	0
  1528  000C52  0100               	movlb	0	; () banked
  1529  000C54  6F73               	movwf	printf@fval& (0+255),b
  1530  000C56  0E00               	movlw	0
  1531  000C58  6F74               	movwf	(printf@fval+1)& (0+255),b
  1532  000C5A  0E00               	movlw	0
  1533  000C5C  6F75               	movwf	(printf@fval+2)& (0+255),b
  1534                           
  1535                           ;doprnt.c: 1130: } else {
  1536  000C5E  D033               	goto	l196
  1537  000C60                     l187:
  1538                           
  1539                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1540                           
  1541                           ; BSR set to: 0
  1542  000C60  C073  F02B         	movff	printf@fval,___fttol@f1
  1543  000C64  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  1544  000C68  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  1545  000C6C  EC1F  F010         	call	___fttol	;wreg free
  1546  000C70  C02B  F065         	movff	?___fttol,printf@val
  1547  000C74  C02C  F066         	movff	?___fttol+1,printf@val+1
  1548  000C78  C02D  F067         	movff	?___fttol+2,printf@val+2
  1549  000C7C  C02E  F068         	movff	?___fttol+3,printf@val+3
  1550                           
  1551                           ;doprnt.c: 1132: fval -= (double)val;
  1552  000C80  C073  F03A         	movff	printf@fval,___ftsub@f1
  1553  000C84  C074  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1554  000C88  C075  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1555  000C8C  C065  F009         	movff	printf@val,___lltoft@c
  1556  000C90  C066  F00A         	movff	printf@val+1,___lltoft@c+1
  1557  000C94  C067  F00B         	movff	printf@val+2,___lltoft@c+2
  1558  000C98  C068  F00C         	movff	printf@val+3,___lltoft@c+3
  1559  000C9C  EC99  F012         	call	___lltoft	;wreg free
  1560  000CA0  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1561  000CA4  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1562  000CA8  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1563  000CAC  ECC7  F012         	call	___ftsub	;wreg free
  1564  000CB0  C03A  F073         	movff	?___ftsub,printf@fval
  1565  000CB4  C03B  F074         	movff	?___ftsub+1,printf@fval+1
  1566  000CB8  C03C  F075         	movff	?___ftsub+2,printf@fval+2
  1567                           
  1568                           ;doprnt.c: 1133: exp = 0;
  1569  000CBC  0E00               	movlw	0
  1570  000CBE  0100               	movlb	0	; () banked
  1571  000CC0  6F72               	movwf	(printf@exp+1)& (0+255),b
  1572  000CC2  0E00               	movlw	0
  1573  000CC4  6F71               	movwf	printf@exp& (0+255),b
  1574  000CC6                     l196:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;doprnt.c: 1134: }
  1578                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1579                           
  1580                           ; BSR set to: 0
  1581  000CC6  0E01               	movlw	1
  1582  000CC8  6F78               	movwf	printf@c& (0+255),b
  1583  000CCA                     l2937:
  1584                           
  1585                           ; BSR set to: 0
  1586  000CCA  0E0A               	movlw	10
  1587  000CCC  1978               	xorwf	printf@c& (0+255),w,b
  1588  000CCE  B4D8               	btfsc	status,2,c
  1589  000CD0  D018               	goto	u3920
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;doprnt.c: 1137: if(val < dpowers[c])
  1593                           
  1594                           ; BSR set to: 0
  1595                           
  1596                           ; BSR set to: 0
  1597  000CD2  5178               	movf	printf@c& (0+255),w,b
  1598  000CD4  0D04               	mullw	4
  1599  000CD6  0E01               	movlw	low _dpowers
  1600  000CD8  24F3               	addwf	prodl,w,c
  1601  000CDA  6EF6               	movwf	tblptrl,c
  1602  000CDC  0E08               	movlw	high _dpowers
  1603  000CDE  20F4               	addwfc	prodh,w,c
  1604  000CE0  6EF7               	movwf	tblptrh,c
  1605  000CE2                     	if	0	;There are less than 3 active tblptr bytes
  1606  000CE2                     	endif
  1607  000CE2  0009               	tblrd		*+
  1608  000CE4  50F5               	movf	tablat,w,c
  1609  000CE6  5D65               	subwf	printf@val& (0+255),w,b
  1610  000CE8  0009               	tblrd		*+
  1611  000CEA  50F5               	movf	tablat,w,c
  1612  000CEC  5966               	subwfb	(printf@val+1)& (0+255),w,b
  1613  000CEE  0009               	tblrd		*+
  1614  000CF0  50F5               	movf	tablat,w,c
  1615  000CF2  5967               	subwfb	(printf@val+2)& (0+255),w,b
  1616  000CF4  0009               	tblrd		*+
  1617  000CF6  50F5               	movf	tablat,w,c
  1618  000CF8  5968               	subwfb	(printf@val+3)& (0+255),w,b
  1619  000CFA  A0D8               	btfss	status,0,c
  1620  000CFC  D002               	goto	u3920
  1621                           
  1622                           ; BSR set to: 0
  1623                           
  1624                           ; BSR set to: 0
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;doprnt.c: 1138: break;
  1628  000CFE  2B78               	incf	printf@c& (0+255),f,b
  1629  000D00  D7E4               	goto	l2937
  1630  000D02                     u3920:
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;doprnt.c: 1142: width -= prec + c + exp;
  1634                           
  1635                           ; BSR set to: 0
  1636  000D02  C078  F045         	movff	printf@c,??_printf
  1637  000D06  6A46               	clrf	(??_printf+1)& (0+255),c
  1638  000D08  BE45               	btfsc	??_printf& (0+255),7,c
  1639  000D0A  0646               	decf	(??_printf+1)& (0+255),f,c
  1640  000D0C  5176               	movf	printf@prec& (0+255),w,b
  1641  000D0E  2645               	addwf	??_printf,f,c
  1642  000D10  5177               	movf	(printf@prec+1)& (0+255),w,b
  1643  000D12  2246               	addwfc	??_printf+1,f,c
  1644  000D14  5171               	movf	printf@exp& (0+255),w,b
  1645  000D16  2645               	addwf	??_printf,f,c
  1646  000D18  5172               	movf	(printf@exp+1)& (0+255),w,b
  1647  000D1A  2246               	addwfc	??_printf+1,f,c
  1648  000D1C  5045               	movf	??_printf,w,c
  1649  000D1E  5F6B               	subwf	printf@width& (0+255),f,b
  1650  000D20  5046               	movf	??_printf+1,w,c
  1651  000D22  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  1652                           
  1653                           ;doprnt.c: 1143: if(
  1654                           ;doprnt.c: 1147: prec)
  1655  000D24  5176               	movf	printf@prec& (0+255),w,b
  1656  000D26  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  1657  000D28  B4D8               	btfsc	status,2,c
  1658  000D2A  D003               	goto	l200
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;doprnt.c: 1148: width--;
  1662  000D2C  076B               	decf	printf@width& (0+255),f,b
  1663  000D2E  A0D8               	btfss	status,0,c
  1664  000D30  076C               	decf	(printf@width+1)& (0+255),f,b
  1665  000D32                     l200:
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;doprnt.c: 1149: if(flag & 0x03)
  1669                           
  1670                           ; BSR set to: 0
  1671  000D32  0E03               	movlw	3
  1672  000D34  1569               	andwf	printf@flag& (0+255),w,b
  1673  000D36  6E45               	movwf	??_printf& (0+255),c
  1674  000D38  0E00               	movlw	0
  1675  000D3A  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1676  000D3C  6E46               	movwf	(??_printf+1)& (0+255),c
  1677  000D3E  5045               	movf	??_printf,w,c
  1678  000D40  1046               	iorwf	??_printf+1,w,c
  1679  000D42  B4D8               	btfsc	status,2,c
  1680  000D44  D008               	goto	l202
  1681  000D46  D004               	goto	L2
  1682  000D48                     l2957:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;doprnt.c: 1181: (putch(' ') );
  1686  000D48  0E20               	movlw	32
  1687  000D4A  ECB2  F013         	call	_putch
  1688                           
  1689                           ;doprnt.c: 1182: width--;
  1690  000D4E  0100               	movlb	0	; () banked
  1691  000D50                     L2:
  1692  000D50  076B               	decf	printf@width& (0+255),f,b
  1693  000D52  A0D8               	btfss	status,0,c
  1694  000D54  076C               	decf	(printf@width+1)& (0+255),f,b
  1695  000D56                     l202:
  1696                           
  1697                           ; BSR set to: 0
  1698                           
  1699                           ; BSR set to: 0
  1700  000D56  BF6C               	btfsc	(printf@width+1)& (0+255),7,b
  1701  000D58  D005               	goto	u3950
  1702  000D5A  516C               	movf	(printf@width+1)& (0+255),w,b
  1703  000D5C  E1F5               	bnz	l2957
  1704  000D5E  056B               	decf	printf@width& (0+255),w,b
  1705  000D60  B0D8               	btfsc	status,0,c
  1706  000D62  D7F2               	goto	l203
  1707  000D64                     u3950:
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;doprnt.c: 1183: }
  1711                           ;doprnt.c: 1188: if(flag & 0x03)
  1712                           
  1713                           ; BSR set to: 0
  1714  000D64  0E03               	movlw	3
  1715  000D66  1569               	andwf	printf@flag& (0+255),w,b
  1716  000D68  6E45               	movwf	??_printf& (0+255),c
  1717  000D6A  0E00               	movlw	0
  1718  000D6C  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1719  000D6E  6E46               	movwf	(??_printf+1)& (0+255),c
  1720  000D70  5045               	movf	??_printf,w,c
  1721  000D72  1046               	iorwf	??_printf+1,w,c
  1722  000D74  B4D8               	btfsc	status,2,c
  1723  000D76  D04A               	goto	l206
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;doprnt.c: 1190: (putch('-') );
  1727  000D78  0E2D               	movlw	45
  1728  000D7A  ECB2  F013         	call	_putch
  1729                           
  1730                           ;doprnt.c: 1195: }
  1731                           ;doprnt.c: 1196: while(c--) {
  1732  000D7E  D046               	goto	l206
  1733  000D80                     
  1734                           ;doprnt.c: 1200: {
  1735                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1736  000D80  C065  F001         	movff	printf@val,___lldiv@dividend
  1737  000D84  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  1738  000D88  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  1739  000D8C  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  1740  000D90  0100               	movlb	0	; () banked
  1741  000D92  5178               	movf	printf@c& (0+255),w,b
  1742  000D94  0D04               	mullw	4
  1743  000D96  0E01               	movlw	low _dpowers
  1744  000D98  24F3               	addwf	prodl,w,c
  1745  000D9A  6EF6               	movwf	tblptrl,c
  1746  000D9C  0E08               	movlw	high _dpowers
  1747  000D9E  20F4               	addwfc	prodh,w,c
  1748  000DA0  6EF7               	movwf	tblptrh,c
  1749  000DA2                     	if	0	;There are less than 3 active tblptr bytes
  1750  000DA2                     	endif
  1751  000DA2  0009               	tblrd		*+
  1752  000DA4  CFF5 F005          	movff	tablat,___lldiv@divisor
  1753  000DA8  0009               	tblrd		*+
  1754  000DAA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1755  000DAE  0009               	tblrd		*+
  1756  000DB0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1757  000DB4  000A               	tblrd		*-
  1758  000DB6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1759  000DBA  ECED  F011         	call	___lldiv	;wreg free
  1760  000DBE  C001  F06D         	movff	?___lldiv,printf@tmpval
  1761  000DC2  C002  F06E         	movff	?___lldiv+1,printf@tmpval+1
  1762  000DC6  C003  F06F         	movff	?___lldiv+2,printf@tmpval+2
  1763  000DCA  C004  F070         	movff	?___lldiv+3,printf@tmpval+3
  1764                           
  1765                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1766  000DCE  C06D  F001         	movff	printf@tmpval,___llmod@dividend
  1767  000DD2  C06E  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1768  000DD6  C06F  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1769  000DDA  C070  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1770  000DDE  0E0A               	movlw	10
  1771  000DE0  6E05               	movwf	___llmod@divisor,c
  1772  000DE2  0E00               	movlw	0
  1773  000DE4  6E06               	movwf	___llmod@divisor+1,c
  1774  000DE6  0E00               	movlw	0
  1775  000DE8  6E07               	movwf	___llmod@divisor+2,c
  1776  000DEA  0E00               	movlw	0
  1777  000DEC  6E08               	movwf	___llmod@divisor+3,c
  1778  000DEE  EC66  F012         	call	___llmod	;wreg free
  1779  000DF2  C001  F06D         	movff	?___llmod,printf@tmpval
  1780  000DF6  C002  F06E         	movff	?___llmod+1,printf@tmpval+1
  1781  000DFA  C003  F06F         	movff	?___llmod+2,printf@tmpval+2
  1782  000DFE  C004  F070         	movff	?___llmod+3,printf@tmpval+3
  1783                           
  1784                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1785  000E02  0100               	movlb	0	; () banked
  1786  000E04  516D               	movf	printf@tmpval& (0+255),w,b
  1787  000E06  0F30               	addlw	48
  1788  000E08  ECB2  F013         	call	_putch
  1789  000E0C                     l206:
  1790  000E0C  0100               	movlb	0	; () banked
  1791  000E0E  0778               	decf	printf@c& (0+255),f,b
  1792  000E10  2978               	incf	printf@c& (0+255),w,b
  1793  000E12  B4D8               	btfsc	status,2,c
  1794  000E14  D008               	goto	l209
  1795  000E16  D7B4               	goto	l207
  1796  000E18                     l2975:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;doprnt.c: 1208: (putch('0') );
  1800  000E18  0E30               	movlw	48
  1801  000E1A  ECB2  F013         	call	_putch
  1802                           
  1803                           ;doprnt.c: 1209: exp--;
  1804  000E1E  0100               	movlb	0	; () banked
  1805  000E20  0771               	decf	printf@exp& (0+255),f,b
  1806  000E22  A0D8               	btfss	status,0,c
  1807  000E24  0772               	decf	(printf@exp+1)& (0+255),f,b
  1808  000E26                     l209:
  1809                           
  1810                           ; BSR set to: 0
  1811                           
  1812                           ; BSR set to: 0
  1813  000E26  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1814  000E28  D005               	goto	u3980
  1815  000E2A  5172               	movf	(printf@exp+1)& (0+255),w,b
  1816  000E2C  E1F5               	bnz	l2975
  1817  000E2E  0571               	decf	printf@exp& (0+255),w,b
  1818  000E30  B0D8               	btfsc	status,0,c
  1819  000E32  D7F2               	goto	l210
  1820  000E34                     u3980:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 1210: }
  1824                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1825                           
  1826                           ; BSR set to: 0
  1827  000E34  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  1828  000E36  D009               	goto	l212
  1829  000E38  5177               	movf	(printf@prec+1)& (0+255),w,b
  1830  000E3A  E104               	bnz	u3990
  1831  000E3C  0E09               	movlw	9
  1832  000E3E  5D76               	subwf	printf@prec& (0+255),w,b
  1833  000E40  A0D8               	btfss	status,0,c
  1834  000E42  D003               	goto	l212
  1835  000E44                     u3990:
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1839  000E44  0E08               	movlw	8
  1840  000E46  6F78               	movwf	printf@c& (0+255),b
  1841  000E48  D002               	goto	l213
  1842  000E4A                     l212:
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;doprnt.c: 1213: else
  1846                           ;doprnt.c: 1214: c = prec;
  1847  000E4A  C076  F078         	movff	printf@prec,printf@c
  1848  000E4E                     l213:
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;doprnt.c: 1215: prec -= c;
  1852                           
  1853                           ; BSR set to: 0
  1854  000E4E  5178               	movf	printf@c& (0+255),w,b
  1855  000E50  5F76               	subwf	printf@prec& (0+255),f,b
  1856  000E52  0E00               	movlw	0
  1857  000E54  BF78               	btfsc	printf@c& (0+255),7,b
  1858  000E56  0EFF               	movlw	255
  1859  000E58  5B77               	subwfb	(printf@prec+1)& (0+255),f,b
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;doprnt.c: 1219: if(c)
  1863  000E5A  5178               	movf	printf@c& (0+255),w,b
  1864  000E5C  B4D8               	btfsc	status,2,c
  1865  000E5E  D003               	goto	l214
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;doprnt.c: 1221: (putch('.') );
  1869  000E60  0E2E               	movlw	46
  1870  000E62  ECB2  F013         	call	_putch
  1871  000E66                     l214:
  1872                           
  1873                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1874  000E66  0100               	movlb	0	; () banked
  1875  000E68  5178               	movf	printf@c& (0+255),w,b
  1876  000E6A  EC6C  F008         	call	_scale
  1877  000E6E  C024  F060         	movff	?_scale,_printf$784
  1878  000E72  C025  F061         	movff	?_scale+1,_printf$784+1
  1879  000E76  C026  F062         	movff	?_scale+2,_printf$784+2
  1880                           
  1881                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1882  000E7A  C073  F018         	movff	printf@fval,___ftmul@f2
  1883  000E7E  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  1884  000E82  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1885  000E86  C060  F015         	movff	_printf$784,___ftmul@f1
  1886  000E8A  C061  F016         	movff	_printf$784+1,___ftmul@f1+1
  1887  000E8E  C062  F017         	movff	_printf$784+2,___ftmul@f1+2
  1888  000E92  ECA5  F00F         	call	___ftmul	;wreg free
  1889  000E96  C015  F02B         	movff	?___ftmul,___fttol@f1
  1890  000E9A  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1891  000E9E  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1892  000EA2  EC1F  F010         	call	___fttol	;wreg free
  1893  000EA6  C02B  F065         	movff	?___fttol,printf@val
  1894  000EAA  C02C  F066         	movff	?___fttol+1,printf@val+1
  1895  000EAE  C02D  F067         	movff	?___fttol+2,printf@val+2
  1896  000EB2  C02E  F068         	movff	?___fttol+3,printf@val+3
  1897                           
  1898                           ;doprnt.c: 1228: while(c--) {
  1899  000EB6  D06D               	goto	l215
  1900  000EB8                     
  1901                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1902  000EB8  C065  F001         	movff	printf@val,___lldiv@dividend
  1903  000EBC  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  1904  000EC0  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  1905  000EC4  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  1906  000EC8  0100               	movlb	0	; () banked
  1907  000ECA  5178               	movf	printf@c& (0+255),w,b
  1908  000ECC  0D04               	mullw	4
  1909  000ECE  0E01               	movlw	low _dpowers
  1910  000ED0  24F3               	addwf	prodl,w,c
  1911  000ED2  6EF6               	movwf	tblptrl,c
  1912  000ED4  0E08               	movlw	high _dpowers
  1913  000ED6  20F4               	addwfc	prodh,w,c
  1914  000ED8  6EF7               	movwf	tblptrh,c
  1915  000EDA                     	if	0	;There are less than 3 active tblptr bytes
  1916  000EDA                     	endif
  1917  000EDA  0009               	tblrd		*+
  1918  000EDC  CFF5 F005          	movff	tablat,___lldiv@divisor
  1919  000EE0  0009               	tblrd		*+
  1920  000EE2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1921  000EE6  0009               	tblrd		*+
  1922  000EE8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1923  000EEC  000A               	tblrd		*-
  1924  000EEE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1925  000EF2  ECED  F011         	call	___lldiv	;wreg free
  1926  000EF6  C001  F06D         	movff	?___lldiv,printf@tmpval
  1927  000EFA  C002  F06E         	movff	?___lldiv+1,printf@tmpval+1
  1928  000EFE  C003  F06F         	movff	?___lldiv+2,printf@tmpval+2
  1929  000F02  C004  F070         	movff	?___lldiv+3,printf@tmpval+3
  1930                           
  1931                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1932  000F06  C06D  F001         	movff	printf@tmpval,___llmod@dividend
  1933  000F0A  C06E  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1934  000F0E  C06F  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1935  000F12  C070  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1936  000F16  0E0A               	movlw	10
  1937  000F18  6E05               	movwf	___llmod@divisor,c
  1938  000F1A  0E00               	movlw	0
  1939  000F1C  6E06               	movwf	___llmod@divisor+1,c
  1940  000F1E  0E00               	movlw	0
  1941  000F20  6E07               	movwf	___llmod@divisor+2,c
  1942  000F22  0E00               	movlw	0
  1943  000F24  6E08               	movwf	___llmod@divisor+3,c
  1944  000F26  EC66  F012         	call	___llmod	;wreg free
  1945  000F2A  C001  F06D         	movff	?___llmod,printf@tmpval
  1946  000F2E  C002  F06E         	movff	?___llmod+1,printf@tmpval+1
  1947  000F32  C003  F06F         	movff	?___llmod+2,printf@tmpval+2
  1948  000F36  C004  F070         	movff	?___llmod+3,printf@tmpval+3
  1949                           
  1950                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1951  000F3A  0100               	movlb	0	; () banked
  1952  000F3C  516D               	movf	printf@tmpval& (0+255),w,b
  1953  000F3E  0F30               	addlw	48
  1954  000F40  ECB2  F013         	call	_putch
  1955                           
  1956                           ;doprnt.c: 1232: val %= dpowers[c];
  1957  000F44  C065  F001         	movff	printf@val,___llmod@dividend
  1958  000F48  C066  F002         	movff	printf@val+1,___llmod@dividend+1
  1959  000F4C  C067  F003         	movff	printf@val+2,___llmod@dividend+2
  1960  000F50  C068  F004         	movff	printf@val+3,___llmod@dividend+3
  1961  000F54  0100               	movlb	0	; () banked
  1962  000F56  5178               	movf	printf@c& (0+255),w,b
  1963  000F58  0D04               	mullw	4
  1964  000F5A  0E01               	movlw	low _dpowers
  1965  000F5C  24F3               	addwf	prodl,w,c
  1966  000F5E  6EF6               	movwf	tblptrl,c
  1967  000F60  0E08               	movlw	high _dpowers
  1968  000F62  20F4               	addwfc	prodh,w,c
  1969  000F64  6EF7               	movwf	tblptrh,c
  1970  000F66                     	if	0	;There are less than 3 active tblptr bytes
  1971  000F66                     	endif
  1972  000F66  0009               	tblrd		*+
  1973  000F68  CFF5 F005          	movff	tablat,___llmod@divisor
  1974  000F6C  0009               	tblrd		*+
  1975  000F6E  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1976  000F72  0009               	tblrd		*+
  1977  000F74  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1978  000F78  000A               	tblrd		*-
  1979  000F7A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1980  000F7E  EC66  F012         	call	___llmod	;wreg free
  1981  000F82  C001  F065         	movff	?___llmod,printf@val
  1982  000F86  C002  F066         	movff	?___llmod+1,printf@val+1
  1983  000F8A  C003  F067         	movff	?___llmod+2,printf@val+2
  1984  000F8E  C004  F068         	movff	?___llmod+3,printf@val+3
  1985  000F92                     l215:
  1986  000F92  0100               	movlb	0	; () banked
  1987  000F94  0778               	decf	printf@c& (0+255),f,b
  1988  000F96  2978               	incf	printf@c& (0+255),w,b
  1989  000F98  B4D8               	btfsc	status,2,c
  1990  000F9A  D008               	goto	l218
  1991  000F9C  D78D               	goto	l216
  1992  000F9E                     
  1993                           ; BSR set to: 0
  1994                           ;doprnt.c: 1236: (putch('0') );
  1995                           
  1996                           ; BSR set to: 0
  1997  000F9E  0E30               	movlw	48
  1998  000FA0  ECB2  F013         	call	_putch
  1999                           
  2000                           ;doprnt.c: 1237: prec--;
  2001  000FA4  0100               	movlb	0	; () banked
  2002  000FA6  0776               	decf	printf@prec& (0+255),f,b
  2003  000FA8  A0D8               	btfss	status,0,c
  2004  000FAA  0777               	decf	(printf@prec+1)& (0+255),f,b
  2005  000FAC                     l218:
  2006                           
  2007                           ; BSR set to: 0
  2008                           
  2009                           ; BSR set to: 0
  2010  000FAC  5176               	movf	printf@prec& (0+255),w,b
  2011  000FAE  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  2012  000FB0  B4D8               	btfsc	status,2,c
  2013  000FB2  D083               	goto	l234
  2014  000FB4  D7F4               	goto	l219
  2015  000FB6                     l178:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;doprnt.c: 1246: }
  2019                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2020                           
  2021                           ; BSR set to: 0
  2022  000FB6  5176               	movf	printf@prec& (0+255),w,b
  2023  000FB8  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  2024  000FBA  A4D8               	btfss	status,2,c
  2025  000FBC  D008               	goto	l221
  2026                           
  2027                           ; BSR set to: 0
  2028  000FBE  5165               	movf	printf@val& (0+255),w,b
  2029  000FC0  1166               	iorwf	(printf@val+1)& (0+255),w,b
  2030  000FC2  1167               	iorwf	(printf@val+2)& (0+255),w,b
  2031  000FC4  1168               	iorwf	(printf@val+3)& (0+255),w,b
  2032  000FC6  A4D8               	btfss	status,2,c
  2033  000FC8  D002               	goto	l221
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;doprnt.c: 1291: prec++;
  2037  000FCA  4B76               	infsnz	printf@prec& (0+255),f,b
  2038  000FCC  2B77               	incf	(printf@prec+1)& (0+255),f,b
  2039  000FCE                     l221:
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;doprnt.c: 1339: if(c < prec)
  2043                           
  2044                           ; BSR set to: 0
  2045  000FCE  0E80               	movlw	128
  2046  000FD0  BF78               	btfsc	printf@c& (0+255),7,b
  2047  000FD2  0E7F               	movlw	127
  2048  000FD4  6E45               	movwf	??_printf& (0+255),c
  2049  000FD6  5176               	movf	printf@prec& (0+255),w,b
  2050  000FD8  5D78               	subwf	printf@c& (0+255),w,b
  2051  000FDA  5177               	movf	(printf@prec+1)& (0+255),w,b
  2052  000FDC  0A80               	xorlw	128
  2053  000FDE  5845               	subwfb	??_printf& (0+255),w,c
  2054  000FE0  B0D8               	btfsc	status,0,c
  2055  000FE2  D003               	goto	l222
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;doprnt.c: 1340: c = prec;
  2059  000FE4  C076  F078         	movff	printf@prec,printf@c
  2060  000FE8  D010               	goto	l224
  2061  000FEA                     l222:
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;doprnt.c: 1341: else if(prec < c)
  2065                           
  2066                           ; BSR set to: 0
  2067  000FEA  5177               	movf	(printf@prec+1)& (0+255),w,b
  2068  000FEC  0A80               	xorlw	128
  2069  000FEE  6E45               	movwf	??_printf& (0+255),c
  2070  000FF0  5178               	movf	printf@c& (0+255),w,b
  2071  000FF2  5D76               	subwf	printf@prec& (0+255),w,b
  2072  000FF4  0E80               	movlw	128
  2073  000FF6  BF78               	btfsc	printf@c& (0+255),7,b
  2074  000FF8  0E7F               	movlw	127
  2075  000FFA  5845               	subwfb	??_printf& (0+255),w,c
  2076  000FFC  B0D8               	btfsc	status,0,c
  2077  000FFE  D005               	goto	l224
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;doprnt.c: 1342: prec = c;
  2081  001000  5178               	movf	printf@c& (0+255),w,b
  2082  001002  6F76               	movwf	printf@prec& (0+255),b
  2083  001004  6B77               	clrf	(printf@prec+1)& (0+255),b
  2084  001006  BF76               	btfsc	printf@prec& (0+255),7,b
  2085  001008  0777               	decf	(printf@prec+1)& (0+255),f,b
  2086  00100A                     l224:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2090                           
  2091                           ; BSR set to: 0
  2092                           
  2093                           ; BSR set to: 0
  2094  00100A  516B               	movf	printf@width& (0+255),w,b
  2095  00100C  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2096  00100E  B4D8               	btfsc	status,2,c
  2097  001010  D00D               	goto	l225
  2098                           
  2099                           ; BSR set to: 0
  2100  001012  0E03               	movlw	3
  2101  001014  1569               	andwf	printf@flag& (0+255),w,b
  2102  001016  6E45               	movwf	??_printf& (0+255),c
  2103  001018  0E00               	movlw	0
  2104  00101A  156A               	andwf	(printf@flag+1)& (0+255),w,b
  2105  00101C  6E46               	movwf	(??_printf+1)& (0+255),c
  2106  00101E  5045               	movf	??_printf,w,c
  2107  001020  1046               	iorwf	??_printf+1,w,c
  2108  001022  B4D8               	btfsc	status,2,c
  2109  001024  D003               	goto	l225
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;doprnt.c: 1346: width--;
  2113  001026  076B               	decf	printf@width& (0+255),f,b
  2114  001028  A0D8               	btfss	status,0,c
  2115  00102A  076C               	decf	(printf@width+1)& (0+255),f,b
  2116  00102C                     l225:
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2120                           
  2121                           ; BSR set to: 0
  2122  00102C  AD6A               	btfss	(printf@flag+1)& (0+255),6,b
  2123  00102E  D013               	goto	l228
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;doprnt.c: 1349: if(width > prec)
  2127  001030  516B               	movf	printf@width& (0+255),w,b
  2128  001032  5D76               	subwf	printf@prec& (0+255),w,b
  2129  001034  5177               	movf	(printf@prec+1)& (0+255),w,b
  2130  001036  0A80               	xorlw	128
  2131  001038  6E45               	movwf	??_printf& (0+255),c
  2132  00103A  516C               	movf	(printf@width+1)& (0+255),w,b
  2133  00103C  0A80               	xorlw	128
  2134  00103E  5845               	subwfb	??_printf& (0+255),w,c
  2135  001040  B0D8               	btfsc	status,0,c
  2136  001042  D005               	goto	l227
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;doprnt.c: 1350: width -= prec;
  2140  001044  5176               	movf	printf@prec& (0+255),w,b
  2141  001046  5F6B               	subwf	printf@width& (0+255),f,b
  2142  001048  5177               	movf	(printf@prec+1)& (0+255),w,b
  2143  00104A  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  2144  00104C  D004               	goto	l228
  2145  00104E                     l227:
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;doprnt.c: 1351: else
  2149                           ;doprnt.c: 1352: width = 0;
  2150                           
  2151                           ; BSR set to: 0
  2152  00104E  0E00               	movlw	0
  2153  001050  6F6C               	movwf	(printf@width+1)& (0+255),b
  2154  001052  0E00               	movlw	0
  2155  001054  6F6B               	movwf	printf@width& (0+255),b
  2156  001056                     l228:
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;doprnt.c: 1353: }
  2160                           ;doprnt.c: 1381: if(width > c)
  2161                           
  2162                           ; BSR set to: 0
  2163                           
  2164                           ; BSR set to: 0
  2165  001056  0E80               	movlw	128
  2166  001058  BF78               	btfsc	printf@c& (0+255),7,b
  2167  00105A  0E7F               	movlw	127
  2168  00105C  6E45               	movwf	??_printf& (0+255),c
  2169  00105E  516B               	movf	printf@width& (0+255),w,b
  2170  001060  5D78               	subwf	printf@c& (0+255),w,b
  2171  001062  516C               	movf	(printf@width+1)& (0+255),w,b
  2172  001064  0A80               	xorlw	128
  2173  001066  5845               	subwfb	??_printf& (0+255),w,c
  2174  001068  B0D8               	btfsc	status,0,c
  2175  00106A  D007               	goto	l229
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;doprnt.c: 1382: width -= c;
  2179  00106C  5178               	movf	printf@c& (0+255),w,b
  2180  00106E  5F6B               	subwf	printf@width& (0+255),f,b
  2181  001070  0E00               	movlw	0
  2182  001072  BF78               	btfsc	printf@c& (0+255),7,b
  2183  001074  0EFF               	movlw	255
  2184  001076  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  2185  001078  D004               	goto	l230
  2186  00107A                     l229:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;doprnt.c: 1383: else
  2190                           ;doprnt.c: 1384: width = 0;
  2191                           
  2192                           ; BSR set to: 0
  2193  00107A  0E00               	movlw	0
  2194  00107C  6F6C               	movwf	(printf@width+1)& (0+255),b
  2195  00107E  0E00               	movlw	0
  2196  001080  6F6B               	movwf	printf@width& (0+255),b
  2197  001082                     l230:
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;doprnt.c: 1422: {
  2201                           ;doprnt.c: 1424: if(width
  2202                           ;doprnt.c: 1428: )
  2203                           
  2204                           ; BSR set to: 0
  2205  001082  516B               	movf	printf@width& (0+255),w,b
  2206  001084  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2207  001086  B4D8               	btfsc	status,2,c
  2208  001088  D00B               	goto	u4130
  2209  00108A                     u4120:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;doprnt.c: 1430: (putch(' ') );
  2213                           
  2214                           ; BSR set to: 0
  2215                           
  2216                           ;doprnt.c: 1429: do
  2217  00108A  0E20               	movlw	32
  2218  00108C  ECB2  F013         	call	_putch
  2219                           
  2220                           ;doprnt.c: 1431: while(--width);
  2221  001090  0100               	movlb	0	; () banked
  2222  001092  076B               	decf	printf@width& (0+255),f,b
  2223  001094  A0D8               	btfss	status,0,c
  2224  001096  076C               	decf	(printf@width+1)& (0+255),f,b
  2225  001098  516B               	movf	printf@width& (0+255),w,b
  2226  00109A  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2227  00109C  A4D8               	btfss	status,2,c
  2228  00109E  D7F5               	goto	u4120
  2229  0010A0                     u4130:
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;doprnt.c: 1438: if(flag & 0x03)
  2233                           
  2234                           ; BSR set to: 0
  2235                           
  2236                           ; BSR set to: 0
  2237  0010A0  0E03               	movlw	3
  2238  0010A2  1569               	andwf	printf@flag& (0+255),w,b
  2239  0010A4  6E45               	movwf	??_printf& (0+255),c
  2240  0010A6  0E00               	movlw	0
  2241  0010A8  156A               	andwf	(printf@flag+1)& (0+255),w,b
  2242  0010AA  6E46               	movwf	(??_printf+1)& (0+255),c
  2243  0010AC  5045               	movf	??_printf,w,c
  2244  0010AE  1046               	iorwf	??_printf+1,w,c
  2245  0010B0  B4D8               	btfsc	status,2,c
  2246  0010B2  D003               	goto	l234
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;doprnt.c: 1439: (putch('-') );
  2250  0010B4  0E2D               	movlw	45
  2251  0010B6  ECB2  F013         	call	_putch
  2252  0010BA                     l234:
  2253  0010BA  C040  FFF6         	movff	printf@f,tblptrl
  2254  0010BE  C041  FFF7         	movff	printf@f+1,tblptrh
  2255  0010C2  4A40               	infsnz	printf@f,f,c
  2256  0010C4  2A41               	incf	printf@f+1,f,c
  2257  0010C6                     	if	0	;tblptru may be non-zero
  2258  0010C6                     	endif
  2259  0010C6                     	if	0	;tblptru may be non-zero
  2260  0010C6                     	endif
  2261  0010C6  0008               	tblrd		*
  2262  0010C8  CFF5 F078          	movff	tablat,printf@c
  2263  0010CC  0100               	movlb	0	; () banked
  2264  0010CE  5178               	movf	printf@c& (0+255),w,b
  2265  0010D0  B4D8               	btfsc	status,2,c
  2266  0010D2  0012               	return	
  2267  0010D4  EF4E  F004         	goto	l162
  2268  0010D8                     __end_of_printf:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           wreg	equ	0xFE8
  2277                           postinc2	equ	0xFDE
  2278                           postdec2	equ	0xFDD
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function _scale *****************
  2284 ;; Defined at:
  2285 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  scl             1    wreg     char 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  scl             1   41[COMRAM] char 
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  3   35[COMRAM] char 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2299 ;;      Params:         3       0       0       0       0       0       0       0       0
  2300 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2302 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2303 ;;Total ram usage:        7 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    2
  2306 ;; This function calls:
  2307 ;;		___awdiv
  2308 ;;		___awmod
  2309 ;;		___ftmul
  2310 ;;		___wmul
  2311 ;; This function is called by:
  2312 ;;		_printf
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text2
  2317  0010D8                     __ptext2:
  2318                           	opt stack 0
  2319  0010D8                     _scale:
  2320                           	opt stack 27
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;incstack = 0
  2324                           ;scale@scl stored from wreg
  2325  0010D8  6E2A               	movwf	scale@scl,c
  2326                           
  2327                           ;doprnt.c: 428: if(scl < 0) {
  2328  0010DA  AE2A               	btfss	scale@scl,7,c
  2329  0010DC  D101               	goto	l151
  2330                           
  2331                           ;doprnt.c: 429: scl = -scl;
  2332  0010DE  6C2A               	negf	scale@scl,c
  2333                           
  2334                           ;doprnt.c: 430: if(scl>=110)
  2335  0010E0  502A               	movf	scale@scl,w,c
  2336  0010E2  0A80               	xorlw	128
  2337  0010E4  0F12               	addlw	-238
  2338  0010E6  A0D8               	btfss	status,0,c
  2339  0010E8  D091               	goto	l152
  2340                           
  2341                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2342  0010EA  0E00               	movlw	0
  2343  0010EC  6E12               	movwf	___wmul@multiplicand+1,c
  2344  0010EE  0E03               	movlw	3
  2345  0010F0  6E11               	movwf	___wmul@multiplicand,c
  2346  0010F2  0E00               	movlw	0
  2347  0010F4  6E0A               	movwf	___awdiv@divisor+1,c
  2348  0010F6  0E0A               	movlw	10
  2349  0010F8  6E09               	movwf	___awdiv@divisor,c
  2350  0010FA  0E00               	movlw	0
  2351  0010FC  6E04               	movwf	___awmod@divisor+1,c
  2352  0010FE  0E64               	movlw	100
  2353  001100  6E03               	movwf	___awmod@divisor,c
  2354  001102  502A               	movf	scale@scl,w,c
  2355  001104  6E01               	movwf	___awmod@dividend,c
  2356  001106  6A02               	clrf	___awmod@dividend+1,c
  2357  001108  BE01               	btfsc	___awmod@dividend,7,c
  2358  00110A  0602               	decf	___awmod@dividend+1,f,c
  2359  00110C  EC2E  F012         	call	___awmod	;wreg free
  2360  001110  C001  F007         	movff	?___awmod,___awdiv@dividend
  2361  001114  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2362  001118  ECAB  F011         	call	___awdiv	;wreg free
  2363  00111C  0E09               	movlw	9
  2364  00111E  2407               	addwf	?___awdiv,w,c
  2365  001120  6E0F               	movwf	___wmul@multiplier,c
  2366  001122  0E00               	movlw	0
  2367  001124  2008               	addwfc	?___awdiv+1,w,c
  2368  001126  6E10               	movwf	___wmul@multiplier+1,c
  2369  001128  EC2E  F013         	call	___wmul	;wreg free
  2370  00112C  0E50               	movlw	low __npowers_
  2371  00112E  240F               	addwf	?___wmul,w,c
  2372  001130  6EF6               	movwf	tblptrl,c
  2373  001132  0E08               	movlw	high __npowers_
  2374  001134  2010               	addwfc	?___wmul+1,w,c
  2375  001136  6EF7               	movwf	tblptrh,c
  2376  001138                     	if	0	;There are less than 3 active tblptr bytes
  2377  001138                     	endif
  2378  001138  0009               	tblrd		*+
  2379  00113A  CFF5 F018          	movff	tablat,___ftmul@f2
  2380  00113E  0009               	tblrd		*+
  2381  001140  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2382  001144  000A               	tblrd		*-
  2383  001146  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2384  00114A  0E00               	movlw	0
  2385  00114C  6E0A               	movwf	___awdiv@divisor+1,c
  2386  00114E  0E64               	movlw	100
  2387  001150  6E09               	movwf	___awdiv@divisor,c
  2388  001152  502A               	movf	scale@scl,w,c
  2389  001154  6E07               	movwf	___awdiv@dividend,c
  2390  001156  6A08               	clrf	___awdiv@dividend+1,c
  2391  001158  BE07               	btfsc	___awdiv@dividend,7,c
  2392  00115A  0608               	decf	___awdiv@dividend+1,f,c
  2393  00115C  ECAB  F011         	call	___awdiv	;wreg free
  2394  001160  0E12               	movlw	18
  2395  001162  2407               	addwf	?___awdiv,w,c
  2396  001164  6E0F               	movwf	___wmul@multiplier,c
  2397  001166  0E00               	movlw	0
  2398  001168  2008               	addwfc	?___awdiv+1,w,c
  2399  00116A  6E10               	movwf	___wmul@multiplier+1,c
  2400  00116C  0E00               	movlw	0
  2401  00116E  6E12               	movwf	___wmul@multiplicand+1,c
  2402  001170  0E03               	movlw	3
  2403  001172  6E11               	movwf	___wmul@multiplicand,c
  2404  001174  EC2E  F013         	call	___wmul	;wreg free
  2405  001178  0E50               	movlw	low __npowers_
  2406  00117A  240F               	addwf	?___wmul,w,c
  2407  00117C  6EF6               	movwf	tblptrl,c
  2408  00117E  0E08               	movlw	high __npowers_
  2409  001180  2010               	addwfc	?___wmul+1,w,c
  2410  001182  6EF7               	movwf	tblptrh,c
  2411  001184                     	if	0	;There are less than 3 active tblptr bytes
  2412  001184                     	endif
  2413  001184  0009               	tblrd		*+
  2414  001186  CFF5 F015          	movff	tablat,___ftmul@f1
  2415  00118A  0009               	tblrd		*+
  2416  00118C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2417  001190  000A               	tblrd		*-
  2418  001192  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2419  001196  ECA5  F00F         	call	___ftmul	;wreg free
  2420  00119A  C015  F027         	movff	?___ftmul,_scale$783
  2421  00119E  C016  F028         	movff	?___ftmul+1,_scale$783+1
  2422  0011A2  C017  F029         	movff	?___ftmul+2,_scale$783+2
  2423                           
  2424                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2425  0011A6  C027  F015         	movff	_scale$783,___ftmul@f1
  2426  0011AA  C028  F016         	movff	_scale$783+1,___ftmul@f1+1
  2427  0011AE  C029  F017         	movff	_scale$783+2,___ftmul@f1+2
  2428  0011B2  0E00               	movlw	0
  2429  0011B4  6E12               	movwf	___wmul@multiplicand+1,c
  2430  0011B6  0E03               	movlw	3
  2431  0011B8  6E11               	movwf	___wmul@multiplicand,c
  2432  0011BA  0E00               	movlw	0
  2433  0011BC  6E04               	movwf	___awmod@divisor+1,c
  2434  0011BE  0E0A               	movlw	10
  2435  0011C0  6E03               	movwf	___awmod@divisor,c
  2436  0011C2  502A               	movf	scale@scl,w,c
  2437  0011C4  6E01               	movwf	___awmod@dividend,c
  2438  0011C6  6A02               	clrf	___awmod@dividend+1,c
  2439  0011C8  BE01               	btfsc	___awmod@dividend,7,c
  2440  0011CA  0602               	decf	___awmod@dividend+1,f,c
  2441  0011CC  EC2E  F012         	call	___awmod	;wreg free
  2442  0011D0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2443  0011D4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2444  0011D8  EC2E  F013         	call	___wmul	;wreg free
  2445  0011DC  0E50               	movlw	low __npowers_
  2446  0011DE  240F               	addwf	?___wmul,w,c
  2447  0011E0  6EF6               	movwf	tblptrl,c
  2448  0011E2  0E08               	movlw	high __npowers_
  2449  0011E4  2010               	addwfc	?___wmul+1,w,c
  2450  0011E6  6EF7               	movwf	tblptrh,c
  2451  0011E8                     	if	0	;There are less than 3 active tblptr bytes
  2452  0011E8                     	endif
  2453  0011E8  0009               	tblrd		*+
  2454  0011EA  CFF5 F018          	movff	tablat,___ftmul@f2
  2455  0011EE  0009               	tblrd		*+
  2456  0011F0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2457  0011F4  000A               	tblrd		*-
  2458  0011F6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2459  0011FA  ECA5  F00F         	call	___ftmul	;wreg free
  2460  0011FE  C015  F024         	movff	?___ftmul,?_scale
  2461  001202  C016  F025         	movff	?___ftmul+1,?_scale+1
  2462  001206  C017  F026         	movff	?___ftmul+2,?_scale+2
  2463  00120A  0012               	return	
  2464  00120C                     l152:
  2465                           
  2466                           ;doprnt.c: 432: else if(scl > 10)
  2467  00120C  502A               	movf	scale@scl,w,c
  2468  00120E  0A80               	xorlw	128
  2469  001210  0F75               	addlw	-139
  2470  001212  A0D8               	btfss	status,0,c
  2471  001214  D053               	goto	l155
  2472                           
  2473                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2474  001216  0E00               	movlw	0
  2475  001218  6E0A               	movwf	___awdiv@divisor+1,c
  2476  00121A  0E0A               	movlw	10
  2477  00121C  6E09               	movwf	___awdiv@divisor,c
  2478  00121E  502A               	movf	scale@scl,w,c
  2479  001220  6E07               	movwf	___awdiv@dividend,c
  2480  001222  6A08               	clrf	___awdiv@dividend+1,c
  2481  001224  BE07               	btfsc	___awdiv@dividend,7,c
  2482  001226  0608               	decf	___awdiv@dividend+1,f,c
  2483  001228  ECAB  F011         	call	___awdiv	;wreg free
  2484  00122C  0E09               	movlw	9
  2485  00122E  2407               	addwf	?___awdiv,w,c
  2486  001230  6E0F               	movwf	___wmul@multiplier,c
  2487  001232  0E00               	movlw	0
  2488  001234  2008               	addwfc	?___awdiv+1,w,c
  2489  001236  6E10               	movwf	___wmul@multiplier+1,c
  2490  001238  0E00               	movlw	0
  2491  00123A  6E12               	movwf	___wmul@multiplicand+1,c
  2492  00123C  0E03               	movlw	3
  2493  00123E  6E11               	movwf	___wmul@multiplicand,c
  2494  001240  EC2E  F013         	call	___wmul	;wreg free
  2495  001244  0E50               	movlw	low __npowers_
  2496  001246  240F               	addwf	?___wmul,w,c
  2497  001248  6EF6               	movwf	tblptrl,c
  2498  00124A  0E08               	movlw	high __npowers_
  2499  00124C  2010               	addwfc	?___wmul+1,w,c
  2500  00124E  6EF7               	movwf	tblptrh,c
  2501  001250                     	if	0	;There are less than 3 active tblptr bytes
  2502  001250                     	endif
  2503  001250  0009               	tblrd		*+
  2504  001252  CFF5 F015          	movff	tablat,___ftmul@f1
  2505  001256  0009               	tblrd		*+
  2506  001258  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2507  00125C  000A               	tblrd		*-
  2508  00125E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2509  001262  0E00               	movlw	0
  2510  001264  6E12               	movwf	___wmul@multiplicand+1,c
  2511  001266  0E03               	movlw	3
  2512  001268  6E11               	movwf	___wmul@multiplicand,c
  2513  00126A  0E00               	movlw	0
  2514  00126C  6E04               	movwf	___awmod@divisor+1,c
  2515  00126E  0E0A               	movlw	10
  2516  001270  6E03               	movwf	___awmod@divisor,c
  2517  001272  502A               	movf	scale@scl,w,c
  2518  001274  6E01               	movwf	___awmod@dividend,c
  2519  001276  6A02               	clrf	___awmod@dividend+1,c
  2520  001278  BE01               	btfsc	___awmod@dividend,7,c
  2521  00127A  0602               	decf	___awmod@dividend+1,f,c
  2522  00127C  EC2E  F012         	call	___awmod	;wreg free
  2523  001280  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2524  001284  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2525  001288  EC2E  F013         	call	___wmul	;wreg free
  2526  00128C  0E50               	movlw	low __npowers_
  2527  00128E  240F               	addwf	?___wmul,w,c
  2528  001290  6EF6               	movwf	tblptrl,c
  2529  001292  0E08               	movlw	high __npowers_
  2530  001294  2010               	addwfc	?___wmul+1,w,c
  2531  001296  6EF7               	movwf	tblptrh,c
  2532  001298                     	if	0	;There are less than 3 active tblptr bytes
  2533  001298                     	endif
  2534  001298  0009               	tblrd		*+
  2535  00129A  CFF5 F018          	movff	tablat,___ftmul@f2
  2536  00129E  0009               	tblrd		*+
  2537  0012A0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2538  0012A4  000A               	tblrd		*-
  2539  0012A6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2540  0012AA  ECA5  F00F         	call	___ftmul	;wreg free
  2541  0012AE  C015  F024         	movff	?___ftmul,?_scale
  2542  0012B2  C016  F025         	movff	?___ftmul+1,?_scale+1
  2543  0012B6  C017  F026         	movff	?___ftmul+2,?_scale+2
  2544  0012BA  0012               	return	
  2545  0012BC                     l155:
  2546                           
  2547                           ;doprnt.c: 434: return _npowers_[scl];
  2548  0012BC  502A               	movf	scale@scl,w,c
  2549  0012BE  0D03               	mullw	3
  2550  0012C0  0E50               	movlw	low __npowers_
  2551  0012C2  24F3               	addwf	prodl,w,c
  2552  0012C4  6EF6               	movwf	tblptrl,c
  2553  0012C6  0E08               	movlw	high __npowers_
  2554  0012C8  20F4               	addwfc	prodh,w,c
  2555  0012CA  6EF7               	movwf	tblptrh,c
  2556  0012CC                     	if	0	;There are less than 3 active tblptr bytes
  2557  0012CC                     	endif
  2558  0012CC  0009               	tblrd		*+
  2559  0012CE  CFF5 F024          	movff	tablat,?_scale
  2560  0012D2  0009               	tblrd		*+
  2561  0012D4  CFF5 F025          	movff	tablat,?_scale+1
  2562  0012D8  000A               	tblrd		*-
  2563  0012DA  CFF5 F026          	movff	tablat,?_scale+2
  2564  0012DE  0012               	return	
  2565  0012E0                     l151:
  2566                           
  2567                           ;doprnt.c: 435: }
  2568                           ;doprnt.c: 436: if(scl>=110)
  2569  0012E0  502A               	movf	scale@scl,w,c
  2570  0012E2  0A80               	xorlw	128
  2571  0012E4  0F12               	addlw	-238
  2572  0012E6  A0D8               	btfss	status,0,c
  2573  0012E8  D091               	goto	l156
  2574                           
  2575                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2576  0012EA  0E00               	movlw	0
  2577  0012EC  6E12               	movwf	___wmul@multiplicand+1,c
  2578  0012EE  0E03               	movlw	3
  2579  0012F0  6E11               	movwf	___wmul@multiplicand,c
  2580  0012F2  0E00               	movlw	0
  2581  0012F4  6E0A               	movwf	___awdiv@divisor+1,c
  2582  0012F6  0E0A               	movlw	10
  2583  0012F8  6E09               	movwf	___awdiv@divisor,c
  2584  0012FA  0E00               	movlw	0
  2585  0012FC  6E04               	movwf	___awmod@divisor+1,c
  2586  0012FE  0E64               	movlw	100
  2587  001300  6E03               	movwf	___awmod@divisor,c
  2588  001302  502A               	movf	scale@scl,w,c
  2589  001304  6E01               	movwf	___awmod@dividend,c
  2590  001306  6A02               	clrf	___awmod@dividend+1,c
  2591  001308  BE01               	btfsc	___awmod@dividend,7,c
  2592  00130A  0602               	decf	___awmod@dividend+1,f,c
  2593  00130C  EC2E  F012         	call	___awmod	;wreg free
  2594  001310  C001  F007         	movff	?___awmod,___awdiv@dividend
  2595  001314  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2596  001318  ECAB  F011         	call	___awdiv	;wreg free
  2597  00131C  0E09               	movlw	9
  2598  00131E  2407               	addwf	?___awdiv,w,c
  2599  001320  6E0F               	movwf	___wmul@multiplier,c
  2600  001322  0E00               	movlw	0
  2601  001324  2008               	addwfc	?___awdiv+1,w,c
  2602  001326  6E10               	movwf	___wmul@multiplier+1,c
  2603  001328  EC2E  F013         	call	___wmul	;wreg free
  2604  00132C  0E29               	movlw	low __powers_
  2605  00132E  240F               	addwf	?___wmul,w,c
  2606  001330  6EF6               	movwf	tblptrl,c
  2607  001332  0E08               	movlw	high __powers_
  2608  001334  2010               	addwfc	?___wmul+1,w,c
  2609  001336  6EF7               	movwf	tblptrh,c
  2610  001338                     	if	0	;There are less than 3 active tblptr bytes
  2611  001338                     	endif
  2612  001338  0009               	tblrd		*+
  2613  00133A  CFF5 F018          	movff	tablat,___ftmul@f2
  2614  00133E  0009               	tblrd		*+
  2615  001340  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2616  001344  000A               	tblrd		*-
  2617  001346  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2618  00134A  0E00               	movlw	0
  2619  00134C  6E0A               	movwf	___awdiv@divisor+1,c
  2620  00134E  0E64               	movlw	100
  2621  001350  6E09               	movwf	___awdiv@divisor,c
  2622  001352  502A               	movf	scale@scl,w,c
  2623  001354  6E07               	movwf	___awdiv@dividend,c
  2624  001356  6A08               	clrf	___awdiv@dividend+1,c
  2625  001358  BE07               	btfsc	___awdiv@dividend,7,c
  2626  00135A  0608               	decf	___awdiv@dividend+1,f,c
  2627  00135C  ECAB  F011         	call	___awdiv	;wreg free
  2628  001360  0E12               	movlw	18
  2629  001362  2407               	addwf	?___awdiv,w,c
  2630  001364  6E0F               	movwf	___wmul@multiplier,c
  2631  001366  0E00               	movlw	0
  2632  001368  2008               	addwfc	?___awdiv+1,w,c
  2633  00136A  6E10               	movwf	___wmul@multiplier+1,c
  2634  00136C  0E00               	movlw	0
  2635  00136E  6E12               	movwf	___wmul@multiplicand+1,c
  2636  001370  0E03               	movlw	3
  2637  001372  6E11               	movwf	___wmul@multiplicand,c
  2638  001374  EC2E  F013         	call	___wmul	;wreg free
  2639  001378  0E29               	movlw	low __powers_
  2640  00137A  240F               	addwf	?___wmul,w,c
  2641  00137C  6EF6               	movwf	tblptrl,c
  2642  00137E  0E08               	movlw	high __powers_
  2643  001380  2010               	addwfc	?___wmul+1,w,c
  2644  001382  6EF7               	movwf	tblptrh,c
  2645  001384                     	if	0	;There are less than 3 active tblptr bytes
  2646  001384                     	endif
  2647  001384  0009               	tblrd		*+
  2648  001386  CFF5 F015          	movff	tablat,___ftmul@f1
  2649  00138A  0009               	tblrd		*+
  2650  00138C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2651  001390  000A               	tblrd		*-
  2652  001392  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2653  001396  ECA5  F00F         	call	___ftmul	;wreg free
  2654  00139A  C015  F027         	movff	?___ftmul,_scale$783
  2655  00139E  C016  F028         	movff	?___ftmul+1,_scale$783+1
  2656  0013A2  C017  F029         	movff	?___ftmul+2,_scale$783+2
  2657                           
  2658                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2659  0013A6  C027  F015         	movff	_scale$783,___ftmul@f1
  2660  0013AA  C028  F016         	movff	_scale$783+1,___ftmul@f1+1
  2661  0013AE  C029  F017         	movff	_scale$783+2,___ftmul@f1+2
  2662  0013B2  0E00               	movlw	0
  2663  0013B4  6E12               	movwf	___wmul@multiplicand+1,c
  2664  0013B6  0E03               	movlw	3
  2665  0013B8  6E11               	movwf	___wmul@multiplicand,c
  2666  0013BA  0E00               	movlw	0
  2667  0013BC  6E04               	movwf	___awmod@divisor+1,c
  2668  0013BE  0E0A               	movlw	10
  2669  0013C0  6E03               	movwf	___awmod@divisor,c
  2670  0013C2  502A               	movf	scale@scl,w,c
  2671  0013C4  6E01               	movwf	___awmod@dividend,c
  2672  0013C6  6A02               	clrf	___awmod@dividend+1,c
  2673  0013C8  BE01               	btfsc	___awmod@dividend,7,c
  2674  0013CA  0602               	decf	___awmod@dividend+1,f,c
  2675  0013CC  EC2E  F012         	call	___awmod	;wreg free
  2676  0013D0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2677  0013D4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2678  0013D8  EC2E  F013         	call	___wmul	;wreg free
  2679  0013DC  0E29               	movlw	low __powers_
  2680  0013DE  240F               	addwf	?___wmul,w,c
  2681  0013E0  6EF6               	movwf	tblptrl,c
  2682  0013E2  0E08               	movlw	high __powers_
  2683  0013E4  2010               	addwfc	?___wmul+1,w,c
  2684  0013E6  6EF7               	movwf	tblptrh,c
  2685  0013E8                     	if	0	;There are less than 3 active tblptr bytes
  2686  0013E8                     	endif
  2687  0013E8  0009               	tblrd		*+
  2688  0013EA  CFF5 F018          	movff	tablat,___ftmul@f2
  2689  0013EE  0009               	tblrd		*+
  2690  0013F0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2691  0013F4  000A               	tblrd		*-
  2692  0013F6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2693  0013FA  ECA5  F00F         	call	___ftmul	;wreg free
  2694  0013FE  C015  F024         	movff	?___ftmul,?_scale
  2695  001402  C016  F025         	movff	?___ftmul+1,?_scale+1
  2696  001406  C017  F026         	movff	?___ftmul+2,?_scale+2
  2697  00140A  0012               	return	
  2698  00140C                     l156:
  2699                           
  2700                           ;doprnt.c: 438: else if(scl > 10)
  2701  00140C  502A               	movf	scale@scl,w,c
  2702  00140E  0A80               	xorlw	128
  2703  001410  0F75               	addlw	-139
  2704  001412  A0D8               	btfss	status,0,c
  2705  001414  D053               	goto	l158
  2706                           
  2707                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2708  001416  0E00               	movlw	0
  2709  001418  6E0A               	movwf	___awdiv@divisor+1,c
  2710  00141A  0E0A               	movlw	10
  2711  00141C  6E09               	movwf	___awdiv@divisor,c
  2712  00141E  502A               	movf	scale@scl,w,c
  2713  001420  6E07               	movwf	___awdiv@dividend,c
  2714  001422  6A08               	clrf	___awdiv@dividend+1,c
  2715  001424  BE07               	btfsc	___awdiv@dividend,7,c
  2716  001426  0608               	decf	___awdiv@dividend+1,f,c
  2717  001428  ECAB  F011         	call	___awdiv	;wreg free
  2718  00142C  0E09               	movlw	9
  2719  00142E  2407               	addwf	?___awdiv,w,c
  2720  001430  6E0F               	movwf	___wmul@multiplier,c
  2721  001432  0E00               	movlw	0
  2722  001434  2008               	addwfc	?___awdiv+1,w,c
  2723  001436  6E10               	movwf	___wmul@multiplier+1,c
  2724  001438  0E00               	movlw	0
  2725  00143A  6E12               	movwf	___wmul@multiplicand+1,c
  2726  00143C  0E03               	movlw	3
  2727  00143E  6E11               	movwf	___wmul@multiplicand,c
  2728  001440  EC2E  F013         	call	___wmul	;wreg free
  2729  001444  0E29               	movlw	low __powers_
  2730  001446  240F               	addwf	?___wmul,w,c
  2731  001448  6EF6               	movwf	tblptrl,c
  2732  00144A  0E08               	movlw	high __powers_
  2733  00144C  2010               	addwfc	?___wmul+1,w,c
  2734  00144E  6EF7               	movwf	tblptrh,c
  2735  001450                     	if	0	;There are less than 3 active tblptr bytes
  2736  001450                     	endif
  2737  001450  0009               	tblrd		*+
  2738  001452  CFF5 F015          	movff	tablat,___ftmul@f1
  2739  001456  0009               	tblrd		*+
  2740  001458  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2741  00145C  000A               	tblrd		*-
  2742  00145E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2743  001462  0E00               	movlw	0
  2744  001464  6E12               	movwf	___wmul@multiplicand+1,c
  2745  001466  0E03               	movlw	3
  2746  001468  6E11               	movwf	___wmul@multiplicand,c
  2747  00146A  0E00               	movlw	0
  2748  00146C  6E04               	movwf	___awmod@divisor+1,c
  2749  00146E  0E0A               	movlw	10
  2750  001470  6E03               	movwf	___awmod@divisor,c
  2751  001472  502A               	movf	scale@scl,w,c
  2752  001474  6E01               	movwf	___awmod@dividend,c
  2753  001476  6A02               	clrf	___awmod@dividend+1,c
  2754  001478  BE01               	btfsc	___awmod@dividend,7,c
  2755  00147A  0602               	decf	___awmod@dividend+1,f,c
  2756  00147C  EC2E  F012         	call	___awmod	;wreg free
  2757  001480  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2758  001484  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2759  001488  EC2E  F013         	call	___wmul	;wreg free
  2760  00148C  0E29               	movlw	low __powers_
  2761  00148E  240F               	addwf	?___wmul,w,c
  2762  001490  6EF6               	movwf	tblptrl,c
  2763  001492  0E08               	movlw	high __powers_
  2764  001494  2010               	addwfc	?___wmul+1,w,c
  2765  001496  6EF7               	movwf	tblptrh,c
  2766  001498                     	if	0	;There are less than 3 active tblptr bytes
  2767  001498                     	endif
  2768  001498  0009               	tblrd		*+
  2769  00149A  CFF5 F018          	movff	tablat,___ftmul@f2
  2770  00149E  0009               	tblrd		*+
  2771  0014A0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2772  0014A4  000A               	tblrd		*-
  2773  0014A6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2774  0014AA  ECA5  F00F         	call	___ftmul	;wreg free
  2775  0014AE  C015  F024         	movff	?___ftmul,?_scale
  2776  0014B2  C016  F025         	movff	?___ftmul+1,?_scale+1
  2777  0014B6  C017  F026         	movff	?___ftmul+2,?_scale+2
  2778  0014BA  0012               	return	
  2779  0014BC                     l158:
  2780                           
  2781                           ;doprnt.c: 440: return _powers_[scl];
  2782  0014BC  502A               	movf	scale@scl,w,c
  2783  0014BE  0D03               	mullw	3
  2784  0014C0  0E29               	movlw	low __powers_
  2785  0014C2  24F3               	addwf	prodl,w,c
  2786  0014C4  6EF6               	movwf	tblptrl,c
  2787  0014C6  0E08               	movlw	high __powers_
  2788  0014C8  20F4               	addwfc	prodh,w,c
  2789  0014CA  6EF7               	movwf	tblptrh,c
  2790  0014CC                     	if	0	;There are less than 3 active tblptr bytes
  2791  0014CC                     	endif
  2792  0014CC  0009               	tblrd		*+
  2793  0014CE  CFF5 F024          	movff	tablat,?_scale
  2794  0014D2  0009               	tblrd		*+
  2795  0014D4  CFF5 F025          	movff	tablat,?_scale+1
  2796  0014D8  000A               	tblrd		*-
  2797  0014DA  CFF5 F026          	movff	tablat,?_scale+2
  2798  0014DE  0012               	return	
  2799  0014E0                     __end_of_scale:
  2800                           	opt stack 0
  2801                           tblptru	equ	0xFF8
  2802                           tblptrh	equ	0xFF7
  2803                           tblptrl	equ	0xFF6
  2804                           tablat	equ	0xFF5
  2805                           prodh	equ	0xFF4
  2806                           prodl	equ	0xFF3
  2807                           wreg	equ	0xFE8
  2808                           postinc2	equ	0xFDE
  2809                           postdec2	equ	0xFDD
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _putch *****************
  2815 ;; Defined at:
  2816 ;;		line 53 in file "newmain.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  x               1    wreg     unsigned char 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  x               1    3[COMRAM] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, status,2, status,0, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0
  2831 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2832 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2833 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2834 ;;Total ram usage:        1 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    2
  2837 ;; This function calls:
  2838 ;;		_escrever_lcd
  2839 ;; This function is called by:
  2840 ;;		_printf
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text3
  2845  002764                     __ptext3:
  2846                           	opt stack 0
  2847  002764                     _putch:
  2848                           	opt stack 27
  2849                           
  2850                           ;incstack = 0
  2851                           ;putch@x stored from wreg
  2852  002764  6E04               	movwf	putch@x,c
  2853                           
  2854                           ;newmain.c: 55: escrever_lcd(x);
  2855  002766  5004               	movf	putch@x,w,c
  2856  002768  EC1B  F013         	call	_escrever_lcd
  2857  00276C  0012               	return		;funcret
  2858  00276E                     __end_of_putch:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           prodh	equ	0xFF4
  2865                           prodl	equ	0xFF3
  2866                           wreg	equ	0xFE8
  2867                           postinc2	equ	0xFDE
  2868                           postdec2	equ	0xFDD
  2869                           fsr2h	equ	0xFDA
  2870                           fsr2l	equ	0xFD9
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function _escrever_lcd *****************
  2874 ;; Defined at:
  2875 ;;		line 43 in file "newmain.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  valor           1    wreg     unsigned char 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  valor           1    2[COMRAM] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, status,2, status,0, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2889 ;;      Params:         0       0       0       0       0       0       0       0       0
  2890 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2891 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2892 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2893 ;;Total ram usage:        1 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    1
  2896 ;; This function calls:
  2897 ;;		_delay_ms
  2898 ;; This function is called by:
  2899 ;;		_putch
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           	psect	text4
  2904  002636                     __ptext4:
  2905                           	opt stack 0
  2906  002636                     _escrever_lcd:
  2907                           	opt stack 27
  2908                           
  2909                           ;incstack = 0
  2910                           ;escrever_lcd@valor stored from wreg
  2911  002636  6E03               	movwf	escrever_lcd@valor,c
  2912                           
  2913                           ;newmain.c: 45: PORTD = valor;
  2914  002638  C003  FF83         	movff	escrever_lcd@valor,3971	;volatile
  2915                           
  2916                           ;newmain.c: 46: PORTCbits.RC0 = 1;
  2917  00263C  8082               	bsf	3970,0,c	;volatile
  2918                           
  2919                           ;newmain.c: 47: PORTCbits.RC1 = 1;
  2920  00263E  8282               	bsf	3970,1,c	;volatile
  2921                           
  2922                           ;newmain.c: 48: delay_ms(1);
  2923  002640  0E00               	movlw	0
  2924  002642  6E02               	movwf	delay_ms@tempo+1,c
  2925  002644  0E01               	movlw	1
  2926  002646  6E01               	movwf	delay_ms@tempo,c
  2927  002648  EC03  F013         	call	_delay_ms	;wreg free
  2928                           
  2929                           ;newmain.c: 49: PORTCbits.RC1 = 0;
  2930  00264C  9282               	bcf	3970,1,c	;volatile
  2931                           
  2932                           ;newmain.c: 50: delay_ms(1);
  2933  00264E  0E00               	movlw	0
  2934  002650  6E02               	movwf	delay_ms@tempo+1,c
  2935  002652  0E01               	movlw	1
  2936  002654  6E01               	movwf	delay_ms@tempo,c
  2937  002656  EC03  F013         	call	_delay_ms	;wreg free
  2938  00265A  0012               	return		;funcret
  2939  00265C                     __end_of_escrever_lcd:
  2940                           	opt stack 0
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           prodh	equ	0xFF4
  2946                           prodl	equ	0xFF3
  2947                           wreg	equ	0xFE8
  2948                           postinc2	equ	0xFDE
  2949                           postdec2	equ	0xFDD
  2950                           fsr2h	equ	0xFDA
  2951                           fsr2l	equ	0xFD9
  2952                           status	equ	0xFD8
  2953                           
  2954 ;; *************** function _isdigit *****************
  2955 ;; Defined at:
  2956 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  c               1    wreg     unsigned char 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  c               1    2[COMRAM] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;		None               void
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2970 ;;      Params:         0       0       0       0       0       0       0       0       0
  2971 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2972 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2973 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2974 ;;Total ram usage:        3 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; This function calls:
  2977 ;;		Nothing
  2978 ;; This function is called by:
  2979 ;;		_printf
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text5
  2984  002718                     __ptext5:
  2985                           	opt stack 0
  2986  002718                     _isdigit:
  2987                           	opt stack 29
  2988                           
  2989                           ;incstack = 0
  2990                           ;isdigit@c stored from wreg
  2991  002718  6E03               	movwf	isdigit@c,c
  2992  00271A  0E00               	movlw	0
  2993  00271C  6E02               	movwf	_isdigit$436,c
  2994  00271E  0E3A               	movlw	58
  2995  002720  6003               	cpfslt	isdigit@c,c
  2996  002722  D005               	goto	l600
  2997  002724  0E2F               	movlw	47
  2998  002726  6403               	cpfsgt	isdigit@c,c
  2999  002728  D002               	goto	l600
  3000  00272A  0E01               	movlw	1
  3001  00272C  6E02               	movwf	_isdigit$436,c
  3002  00272E                     l600:
  3003  00272E  C002  F001         	movff	_isdigit$436,??_isdigit
  3004  002732  3001               	rrcf	??_isdigit,w,c
  3005  002734  0012               	return	
  3006  002736                     __end_of_isdigit:
  3007                           	opt stack 0
  3008                           tblptru	equ	0xFF8
  3009                           tblptrh	equ	0xFF7
  3010                           tblptrl	equ	0xFF6
  3011                           tablat	equ	0xFF5
  3012                           prodh	equ	0xFF4
  3013                           prodl	equ	0xFF3
  3014                           wreg	equ	0xFE8
  3015                           postinc2	equ	0xFDE
  3016                           postdec2	equ	0xFDD
  3017                           fsr2h	equ	0xFDA
  3018                           fsr2l	equ	0xFD9
  3019                           status	equ	0xFD8
  3020                           
  3021 ;; *************** function _fround *****************
  3022 ;; Defined at:
  3023 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  prec            1    wreg     unsigned char 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  prec            1   44[COMRAM] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  3   35[COMRAM] unsigned char 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3037 ;;      Params:         3       0       0       0       0       0       0       0       0
  3038 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3040 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3041 ;;Total ram usage:       10 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    2
  3044 ;; This function calls:
  3045 ;;		___awdiv
  3046 ;;		___awmod
  3047 ;;		___ftmul
  3048 ;;		___wmul
  3049 ;; This function is called by:
  3050 ;;		_printf
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text6
  3055  0017FE                     __ptext6:
  3056                           	opt stack 0
  3057  0017FE                     _fround:
  3058                           	opt stack 27
  3059                           
  3060                           ;incstack = 0
  3061                           ;fround@prec stored from wreg
  3062  0017FE  6E2D               	movwf	fround@prec,c
  3063                           
  3064                           ;doprnt.c: 413: if(prec>=110)
  3065  001800  0E6D               	movlw	109
  3066  001802  642D               	cpfsgt	fround@prec,c
  3067  001804  D09F               	goto	l145
  3068                           
  3069                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3070  001806  0E00               	movlw	0
  3071  001808  6E12               	movwf	___wmul@multiplicand+1,c
  3072  00180A  0E03               	movlw	3
  3073  00180C  6E11               	movwf	___wmul@multiplicand,c
  3074  00180E  0E00               	movlw	0
  3075  001810  6E0A               	movwf	___awdiv@divisor+1,c
  3076  001812  0E0A               	movlw	10
  3077  001814  6E09               	movwf	___awdiv@divisor,c
  3078  001816  0E00               	movlw	0
  3079  001818  6E04               	movwf	___awmod@divisor+1,c
  3080  00181A  0E64               	movlw	100
  3081  00181C  6E03               	movwf	___awmod@divisor,c
  3082  00181E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3083  001822  6A02               	clrf	___awmod@dividend+1,c
  3084  001824  EC2E  F012         	call	___awmod	;wreg free
  3085  001828  C001  F007         	movff	?___awmod,___awdiv@dividend
  3086  00182C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3087  001830  ECAB  F011         	call	___awdiv	;wreg free
  3088  001834  0E09               	movlw	9
  3089  001836  2407               	addwf	?___awdiv,w,c
  3090  001838  6E0F               	movwf	___wmul@multiplier,c
  3091  00183A  0E00               	movlw	0
  3092  00183C  2008               	addwfc	?___awdiv+1,w,c
  3093  00183E  6E10               	movwf	___wmul@multiplier+1,c
  3094  001840  EC2E  F013         	call	___wmul	;wreg free
  3095  001844  0E50               	movlw	low __npowers_
  3096  001846  240F               	addwf	?___wmul,w,c
  3097  001848  6EF6               	movwf	tblptrl,c
  3098  00184A  0E08               	movlw	high __npowers_
  3099  00184C  2010               	addwfc	?___wmul+1,w,c
  3100  00184E  6EF7               	movwf	tblptrh,c
  3101  001850                     	if	0	;There are less than 3 active tblptr bytes
  3102  001850                     	endif
  3103  001850  0009               	tblrd		*+
  3104  001852  CFF5 F018          	movff	tablat,___ftmul@f2
  3105  001856  0009               	tblrd		*+
  3106  001858  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3107  00185C  000A               	tblrd		*-
  3108  00185E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3109  001862  0E00               	movlw	0
  3110  001864  6E0A               	movwf	___awdiv@divisor+1,c
  3111  001866  0E64               	movlw	100
  3112  001868  6E09               	movwf	___awdiv@divisor,c
  3113  00186A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3114  00186E  6A08               	clrf	___awdiv@dividend+1,c
  3115  001870  ECAB  F011         	call	___awdiv	;wreg free
  3116  001874  0E12               	movlw	18
  3117  001876  2407               	addwf	?___awdiv,w,c
  3118  001878  6E0F               	movwf	___wmul@multiplier,c
  3119  00187A  0E00               	movlw	0
  3120  00187C  2008               	addwfc	?___awdiv+1,w,c
  3121  00187E  6E10               	movwf	___wmul@multiplier+1,c
  3122  001880  0E00               	movlw	0
  3123  001882  6E12               	movwf	___wmul@multiplicand+1,c
  3124  001884  0E03               	movlw	3
  3125  001886  6E11               	movwf	___wmul@multiplicand,c
  3126  001888  EC2E  F013         	call	___wmul	;wreg free
  3127  00188C  0E50               	movlw	low __npowers_
  3128  00188E  240F               	addwf	?___wmul,w,c
  3129  001890  6EF6               	movwf	tblptrl,c
  3130  001892  0E08               	movlw	high __npowers_
  3131  001894  2010               	addwfc	?___wmul+1,w,c
  3132  001896  6EF7               	movwf	tblptrh,c
  3133  001898                     	if	0	;There are less than 3 active tblptr bytes
  3134  001898                     	endif
  3135  001898  0009               	tblrd		*+
  3136  00189A  CFF5 F015          	movff	tablat,___ftmul@f1
  3137  00189E  0009               	tblrd		*+
  3138  0018A0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3139  0018A4  000A               	tblrd		*-
  3140  0018A6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3141  0018AA  ECA5  F00F         	call	___ftmul	;wreg free
  3142  0018AE  C015  F02A         	movff	?___ftmul,_fround$781
  3143  0018B2  C016  F02B         	movff	?___ftmul+1,_fround$781+1
  3144  0018B6  C017  F02C         	movff	?___ftmul+2,_fround$781+2
  3145                           
  3146                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3147  0018BA  0E00               	movlw	0
  3148  0018BC  6E12               	movwf	___wmul@multiplicand+1,c
  3149  0018BE  0E03               	movlw	3
  3150  0018C0  6E11               	movwf	___wmul@multiplicand,c
  3151  0018C2  0E00               	movlw	0
  3152  0018C4  6E04               	movwf	___awmod@divisor+1,c
  3153  0018C6  0E0A               	movlw	10
  3154  0018C8  6E03               	movwf	___awmod@divisor,c
  3155  0018CA  C02D  F001         	movff	fround@prec,___awmod@dividend
  3156  0018CE  6A02               	clrf	___awmod@dividend+1,c
  3157  0018D0  EC2E  F012         	call	___awmod	;wreg free
  3158  0018D4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3159  0018D8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3160  0018DC  EC2E  F013         	call	___wmul	;wreg free
  3161  0018E0  0E50               	movlw	low __npowers_
  3162  0018E2  240F               	addwf	?___wmul,w,c
  3163  0018E4  6EF6               	movwf	tblptrl,c
  3164  0018E6  0E08               	movlw	high __npowers_
  3165  0018E8  2010               	addwfc	?___wmul+1,w,c
  3166  0018EA  6EF7               	movwf	tblptrh,c
  3167  0018EC                     	if	0	;There are less than 3 active tblptr bytes
  3168  0018EC                     	endif
  3169  0018EC  0009               	tblrd		*+
  3170  0018EE  CFF5 F018          	movff	tablat,___ftmul@f2
  3171  0018F2  0009               	tblrd		*+
  3172  0018F4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3173  0018F8  000A               	tblrd		*-
  3174  0018FA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3175  0018FE  C02A  F015         	movff	_fround$781,___ftmul@f1
  3176  001902  C02B  F016         	movff	_fround$781+1,___ftmul@f1+1
  3177  001906  C02C  F017         	movff	_fround$781+2,___ftmul@f1+2
  3178  00190A  ECA5  F00F         	call	___ftmul	;wreg free
  3179  00190E  C015  F027         	movff	?___ftmul,_fround$782
  3180  001912  C016  F028         	movff	?___ftmul+1,_fround$782+1
  3181  001916  C017  F029         	movff	?___ftmul+2,_fround$782+2
  3182                           
  3183                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3184  00191A  C027  F015         	movff	_fround$782,___ftmul@f1
  3185  00191E  C028  F016         	movff	_fround$782+1,___ftmul@f1+1
  3186  001922  C029  F017         	movff	_fround$782+2,___ftmul@f1+2
  3187  001926  0E00               	movlw	0
  3188  001928  6E18               	movwf	___ftmul@f2,c
  3189  00192A  0E00               	movlw	0
  3190  00192C  6E19               	movwf	___ftmul@f2+1,c
  3191  00192E  0E3F               	movlw	63
  3192  001930  6E1A               	movwf	___ftmul@f2+2,c
  3193  001932  ECA5  F00F         	call	___ftmul	;wreg free
  3194  001936  C015  F024         	movff	?___ftmul,?_fround
  3195  00193A  C016  F025         	movff	?___ftmul+1,?_fround+1
  3196  00193E  C017  F026         	movff	?___ftmul+2,?_fround+2
  3197  001942  0012               	return	
  3198  001944                     l145:
  3199                           
  3200                           ;doprnt.c: 415: else if(prec > 10)
  3201  001944  0E0A               	movlw	10
  3202  001946  642D               	cpfsgt	fround@prec,c
  3203  001948  D063               	goto	l148
  3204                           
  3205                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3206  00194A  0E00               	movlw	0
  3207  00194C  6E12               	movwf	___wmul@multiplicand+1,c
  3208  00194E  0E03               	movlw	3
  3209  001950  6E11               	movwf	___wmul@multiplicand,c
  3210  001952  0E00               	movlw	0
  3211  001954  6E04               	movwf	___awmod@divisor+1,c
  3212  001956  0E0A               	movlw	10
  3213  001958  6E03               	movwf	___awmod@divisor,c
  3214  00195A  C02D  F001         	movff	fround@prec,___awmod@dividend
  3215  00195E  6A02               	clrf	___awmod@dividend+1,c
  3216  001960  EC2E  F012         	call	___awmod	;wreg free
  3217  001964  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3218  001968  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3219  00196C  EC2E  F013         	call	___wmul	;wreg free
  3220  001970  0E50               	movlw	low __npowers_
  3221  001972  240F               	addwf	?___wmul,w,c
  3222  001974  6EF6               	movwf	tblptrl,c
  3223  001976  0E08               	movlw	high __npowers_
  3224  001978  2010               	addwfc	?___wmul+1,w,c
  3225  00197A  6EF7               	movwf	tblptrh,c
  3226  00197C                     	if	0	;There are less than 3 active tblptr bytes
  3227  00197C                     	endif
  3228  00197C  0009               	tblrd		*+
  3229  00197E  CFF5 F018          	movff	tablat,___ftmul@f2
  3230  001982  0009               	tblrd		*+
  3231  001984  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3232  001988  000A               	tblrd		*-
  3233  00198A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3234  00198E  0E00               	movlw	0
  3235  001990  6E0A               	movwf	___awdiv@divisor+1,c
  3236  001992  0E0A               	movlw	10
  3237  001994  6E09               	movwf	___awdiv@divisor,c
  3238  001996  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3239  00199A  6A08               	clrf	___awdiv@dividend+1,c
  3240  00199C  ECAB  F011         	call	___awdiv	;wreg free
  3241  0019A0  0E09               	movlw	9
  3242  0019A2  2407               	addwf	?___awdiv,w,c
  3243  0019A4  6E0F               	movwf	___wmul@multiplier,c
  3244  0019A6  0E00               	movlw	0
  3245  0019A8  2008               	addwfc	?___awdiv+1,w,c
  3246  0019AA  6E10               	movwf	___wmul@multiplier+1,c
  3247  0019AC  0E00               	movlw	0
  3248  0019AE  6E12               	movwf	___wmul@multiplicand+1,c
  3249  0019B0  0E03               	movlw	3
  3250  0019B2  6E11               	movwf	___wmul@multiplicand,c
  3251  0019B4  EC2E  F013         	call	___wmul	;wreg free
  3252  0019B8  0E50               	movlw	low __npowers_
  3253  0019BA  240F               	addwf	?___wmul,w,c
  3254  0019BC  6EF6               	movwf	tblptrl,c
  3255  0019BE  0E08               	movlw	high __npowers_
  3256  0019C0  2010               	addwfc	?___wmul+1,w,c
  3257  0019C2  6EF7               	movwf	tblptrh,c
  3258  0019C4                     	if	0	;There are less than 3 active tblptr bytes
  3259  0019C4                     	endif
  3260  0019C4  0009               	tblrd		*+
  3261  0019C6  CFF5 F015          	movff	tablat,___ftmul@f1
  3262  0019CA  0009               	tblrd		*+
  3263  0019CC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3264  0019D0  000A               	tblrd		*-
  3265  0019D2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3266  0019D6  ECA5  F00F         	call	___ftmul	;wreg free
  3267  0019DA  C015  F02A         	movff	?___ftmul,_fround$781
  3268  0019DE  C016  F02B         	movff	?___ftmul+1,_fround$781+1
  3269  0019E2  C017  F02C         	movff	?___ftmul+2,_fround$781+2
  3270                           
  3271                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3272  0019E6  C02A  F015         	movff	_fround$781,___ftmul@f1
  3273  0019EA  C02B  F016         	movff	_fround$781+1,___ftmul@f1+1
  3274  0019EE  C02C  F017         	movff	_fround$781+2,___ftmul@f1+2
  3275  0019F2  0E00               	movlw	0
  3276  0019F4  6E18               	movwf	___ftmul@f2,c
  3277  0019F6  0E00               	movlw	0
  3278  0019F8  6E19               	movwf	___ftmul@f2+1,c
  3279  0019FA  0E3F               	movlw	63
  3280  0019FC  6E1A               	movwf	___ftmul@f2+2,c
  3281  0019FE  ECA5  F00F         	call	___ftmul	;wreg free
  3282  001A02  C015  F024         	movff	?___ftmul,?_fround
  3283  001A06  C016  F025         	movff	?___ftmul+1,?_fround+1
  3284  001A0A  C017  F026         	movff	?___ftmul+2,?_fround+2
  3285  001A0E  0012               	return	
  3286  001A10                     l148:
  3287                           
  3288                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3289  001A10  502D               	movf	fround@prec,w,c
  3290  001A12  0D03               	mullw	3
  3291  001A14  0E50               	movlw	low __npowers_
  3292  001A16  24F3               	addwf	prodl,w,c
  3293  001A18  6EF6               	movwf	tblptrl,c
  3294  001A1A  0E08               	movlw	high __npowers_
  3295  001A1C  20F4               	addwfc	prodh,w,c
  3296  001A1E  6EF7               	movwf	tblptrh,c
  3297  001A20                     	if	0	;There are less than 3 active tblptr bytes
  3298  001A20                     	endif
  3299  001A20  0009               	tblrd		*+
  3300  001A22  CFF5 F015          	movff	tablat,___ftmul@f1
  3301  001A26  0009               	tblrd		*+
  3302  001A28  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3303  001A2C  000A               	tblrd		*-
  3304  001A2E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3305  001A32  0E00               	movlw	0
  3306  001A34  6E18               	movwf	___ftmul@f2,c
  3307  001A36  0E00               	movlw	0
  3308  001A38  6E19               	movwf	___ftmul@f2+1,c
  3309  001A3A  0E3F               	movlw	63
  3310  001A3C  6E1A               	movwf	___ftmul@f2+2,c
  3311  001A3E  ECA5  F00F         	call	___ftmul	;wreg free
  3312  001A42  C015  F024         	movff	?___ftmul,?_fround
  3313  001A46  C016  F025         	movff	?___ftmul+1,?_fround+1
  3314  001A4A  C017  F026         	movff	?___ftmul+2,?_fround+2
  3315  001A4E  0012               	return	
  3316  001A50                     __end_of_fround:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           prodh	equ	0xFF4
  3323                           prodl	equ	0xFF3
  3324                           wreg	equ	0xFE8
  3325                           postinc2	equ	0xFDE
  3326                           postdec2	equ	0xFDD
  3327                           fsr2h	equ	0xFDA
  3328                           fsr2l	equ	0xFD9
  3329                           status	equ	0xFD8
  3330                           
  3331 ;; *************** function ___wmul *****************
  3332 ;; Defined at:
  3333 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  multiplier      2   14[COMRAM] unsigned int 
  3336 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  product         2   18[COMRAM] unsigned int 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  2   14[COMRAM] unsigned int 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0, prodl, prodh
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3348 ;;      Params:         4       0       0       0       0       0       0       0       0
  3349 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3351 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3352 ;;Total ram usage:        6 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_fround
  3358 ;;		_scale
  3359 ;;		_printf
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           	psect	text7
  3364  00265C                     __ptext7:
  3365                           	opt stack 0
  3366  00265C                     ___wmul:
  3367                           	opt stack 28
  3368                           
  3369                           ;incstack = 0
  3370  00265C  500F               	movf	___wmul@multiplier,w,c
  3371  00265E  0211               	mulwf	___wmul@multiplicand,c
  3372  002660  CFF3 F013          	movff	prodl,___wmul@product
  3373  002664  CFF4 F014          	movff	prodh,___wmul@product+1
  3374  002668  500F               	movf	___wmul@multiplier,w,c
  3375  00266A  0212               	mulwf	___wmul@multiplicand+1,c
  3376  00266C  50F3               	movf	prodl,w,c
  3377  00266E  2614               	addwf	___wmul@product+1,f,c
  3378  002670  5010               	movf	___wmul@multiplier+1,w,c
  3379  002672  0211               	mulwf	___wmul@multiplicand,c
  3380  002674  50F3               	movf	prodl,w,c
  3381  002676  2614               	addwf	___wmul@product+1,f,c
  3382  002678  C013  F00F         	movff	___wmul@product,?___wmul
  3383  00267C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3384  002680  0012               	return	
  3385  002682                     __end_of___wmul:
  3386                           	opt stack 0
  3387                           tblptru	equ	0xFF8
  3388                           tblptrh	equ	0xFF7
  3389                           tblptrl	equ	0xFF6
  3390                           tablat	equ	0xFF5
  3391                           prodh	equ	0xFF4
  3392                           prodl	equ	0xFF3
  3393                           wreg	equ	0xFE8
  3394                           postinc2	equ	0xFDE
  3395                           postdec2	equ	0xFDD
  3396                           fsr2h	equ	0xFDA
  3397                           fsr2l	equ	0xFD9
  3398                           status	equ	0xFD8
  3399                           
  3400 ;; *************** function ___ftmul *****************
  3401 ;; Defined at:
  3402 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  f1              3   20[COMRAM] float 
  3405 ;;  f2              3   23[COMRAM] float 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3408 ;;  sign            1   34[COMRAM] unsigned char 
  3409 ;;  cntr            1   33[COMRAM] unsigned char 
  3410 ;;  exp             1   29[COMRAM] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  3   20[COMRAM] float 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3420 ;;      Params:         6       0       0       0       0       0       0       0       0
  3421 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3422 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3423 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3424 ;;Total ram usage:       15 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    1
  3427 ;; This function calls:
  3428 ;;		___ftpack
  3429 ;; This function is called by:
  3430 ;;		_main
  3431 ;;		_fround
  3432 ;;		_scale
  3433 ;;		_printf
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text8
  3438  001F4A                     __ptext8:
  3439                           	opt stack 0
  3440  001F4A                     ___ftmul:
  3441                           	opt stack 27
  3442                           
  3443                           ;incstack = 0
  3444  001F4A  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3445  001F4E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3446  001F50  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3447  001F52  3416               	rlcf	___ftmul@f1+1,w,c
  3448  001F54  361B               	rlcf	??___ftmul& (0+255),f,c
  3449  001F56  E301               	bnc	u2431
  3450  001F58  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3451  001F5A                     u2431:
  3452  001F5A  501B               	movf	??___ftmul,w,c
  3453  001F5C  6E1E               	movwf	___ftmul@exp,c
  3454  001F5E  501E               	movf	___ftmul@exp,w,c
  3455  001F60  A4D8               	btfss	status,2,c
  3456  001F62  D007               	goto	l564
  3457  001F64  0E00               	movlw	0
  3458  001F66  6E15               	movwf	?___ftmul,c
  3459  001F68  0E00               	movlw	0
  3460  001F6A  6E16               	movwf	?___ftmul+1,c
  3461  001F6C  0E00               	movlw	0
  3462  001F6E  6E17               	movwf	?___ftmul+2,c
  3463  001F70  0012               	return	
  3464  001F72                     l564:
  3465  001F72  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3466  001F76  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3467  001F78  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3468  001F7A  3419               	rlcf	___ftmul@f2+1,w,c
  3469  001F7C  361B               	rlcf	??___ftmul& (0+255),f,c
  3470  001F7E  E301               	bnc	u2451
  3471  001F80  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3472  001F82                     u2451:
  3473  001F82  501B               	movf	??___ftmul,w,c
  3474  001F84  6E23               	movwf	___ftmul@sign,c
  3475  001F86  5023               	movf	___ftmul@sign,w,c
  3476  001F88  A4D8               	btfss	status,2,c
  3477  001F8A  D007               	goto	l566
  3478  001F8C  0E00               	movlw	0
  3479  001F8E  6E15               	movwf	?___ftmul,c
  3480  001F90  0E00               	movlw	0
  3481  001F92  6E16               	movwf	?___ftmul+1,c
  3482  001F94  0E00               	movlw	0
  3483  001F96  6E17               	movwf	?___ftmul+2,c
  3484  001F98  0012               	return	
  3485  001F9A                     l566:
  3486  001F9A  5023               	movf	___ftmul@sign,w,c
  3487  001F9C  0F7B               	addlw	123
  3488  001F9E  261E               	addwf	___ftmul@exp,f,c
  3489  001FA0  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3490  001FA4  501A               	movf	___ftmul@f2+2,w,c
  3491  001FA6  1A23               	xorwf	___ftmul@sign,f,c
  3492  001FA8  0E80               	movlw	128
  3493  001FAA  1623               	andwf	___ftmul@sign,f,c
  3494  001FAC  8E16               	bsf	___ftmul@f1+1,7,c
  3495  001FAE  8E19               	bsf	___ftmul@f2+1,7,c
  3496  001FB0  0EFF               	movlw	255
  3497  001FB2  1618               	andwf	___ftmul@f2,f,c
  3498  001FB4  0EFF               	movlw	255
  3499  001FB6  1619               	andwf	___ftmul@f2+1,f,c
  3500  001FB8  0E00               	movlw	0
  3501  001FBA  161A               	andwf	___ftmul@f2+2,f,c
  3502  001FBC  0E00               	movlw	0
  3503  001FBE  6E1F               	movwf	___ftmul@f3_as_product,c
  3504  001FC0  0E00               	movlw	0
  3505  001FC2  6E20               	movwf	___ftmul@f3_as_product+1,c
  3506  001FC4  0E00               	movlw	0
  3507  001FC6  6E21               	movwf	___ftmul@f3_as_product+2,c
  3508  001FC8  0E07               	movlw	7
  3509  001FCA  6E22               	movwf	___ftmul@cntr,c
  3510  001FCC  A015               	btfss	___ftmul@f1,0,c
  3511  001FCE  D006               	goto	l568
  3512  001FD0  5018               	movf	___ftmul@f2,w,c
  3513  001FD2  261F               	addwf	___ftmul@f3_as_product,f,c
  3514  001FD4  5019               	movf	___ftmul@f2+1,w,c
  3515  001FD6  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3516  001FD8  501A               	movf	___ftmul@f2+2,w,c
  3517  001FDA  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3518  001FDC                     l568:
  3519  001FDC  90D8               	bcf	status,0,c
  3520  001FDE  3217               	rrcf	___ftmul@f1+2,f,c
  3521  001FE0  3216               	rrcf	___ftmul@f1+1,f,c
  3522  001FE2  3215               	rrcf	___ftmul@f1,f,c
  3523  001FE4  90D8               	bcf	status,0,c
  3524  001FE6  3618               	rlcf	___ftmul@f2,f,c
  3525  001FE8  3619               	rlcf	___ftmul@f2+1,f,c
  3526  001FEA  361A               	rlcf	___ftmul@f2+2,f,c
  3527  001FEC  2E22               	decfsz	___ftmul@cntr,f,c
  3528  001FEE  D7EE               	goto	l567
  3529  001FF0  0E09               	movlw	9
  3530  001FF2  6E22               	movwf	___ftmul@cntr,c
  3531  001FF4  A015               	btfss	___ftmul@f1,0,c
  3532  001FF6  D006               	goto	l571
  3533  001FF8  5018               	movf	___ftmul@f2,w,c
  3534  001FFA  261F               	addwf	___ftmul@f3_as_product,f,c
  3535  001FFC  5019               	movf	___ftmul@f2+1,w,c
  3536  001FFE  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3537  002000  501A               	movf	___ftmul@f2+2,w,c
  3538  002002  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3539  002004                     l571:
  3540  002004  90D8               	bcf	status,0,c
  3541  002006  3217               	rrcf	___ftmul@f1+2,f,c
  3542  002008  3216               	rrcf	___ftmul@f1+1,f,c
  3543  00200A  3215               	rrcf	___ftmul@f1,f,c
  3544  00200C  90D8               	bcf	status,0,c
  3545  00200E  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3546  002010  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3547  002012  321F               	rrcf	___ftmul@f3_as_product,f,c
  3548  002014  2E22               	decfsz	___ftmul@cntr,f,c
  3549  002016  D7EE               	goto	l570
  3550  002018  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3551  00201C  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3552  002020  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3553  002024  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3554  002028  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3555  00202C  EC0C  F011         	call	___ftpack	;wreg free
  3556  002030  C001  F015         	movff	?___ftpack,?___ftmul
  3557  002034  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3558  002038  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3559  00203C  0012               	return	
  3560  00203E                     __end_of___ftmul:
  3561                           	opt stack 0
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           wreg	equ	0xFE8
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function ___awmod *****************
  3576 ;; Defined at:
  3577 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  dividend        2    0[COMRAM] int 
  3580 ;;  divisor         2    2[COMRAM] int 
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  sign            1    5[COMRAM] unsigned char 
  3583 ;;  counter         1    4[COMRAM] unsigned char 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  2    0[COMRAM] int 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2, status,0
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3593 ;;      Params:         4       0       0       0       0       0       0       0       0
  3594 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3596 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3597 ;;Total ram usage:        6 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_fround
  3603 ;;		_scale
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           	psect	text9
  3608  00245C                     __ptext9:
  3609                           	opt stack 0
  3610  00245C                     ___awmod:
  3611                           	opt stack 28
  3612                           
  3613                           ;incstack = 0
  3614  00245C  0E00               	movlw	0
  3615  00245E  6E06               	movwf	___awmod@sign,c
  3616  002460  AE02               	btfss	___awmod@dividend+1,7,c
  3617  002462  D006               	goto	l417
  3618  002464  6C01               	negf	___awmod@dividend,c
  3619  002466  1E02               	comf	___awmod@dividend+1,f,c
  3620  002468  B0D8               	btfsc	status,0,c
  3621  00246A  2A02               	incf	___awmod@dividend+1,f,c
  3622  00246C  0E01               	movlw	1
  3623  00246E  6E06               	movwf	___awmod@sign,c
  3624  002470                     l417:
  3625  002470  AE04               	btfss	___awmod@divisor+1,7,c
  3626  002472  D004               	goto	l418
  3627  002474  6C03               	negf	___awmod@divisor,c
  3628  002476  1E04               	comf	___awmod@divisor+1,f,c
  3629  002478  B0D8               	btfsc	status,0,c
  3630  00247A  2A04               	incf	___awmod@divisor+1,f,c
  3631  00247C                     l418:
  3632  00247C  5003               	movf	___awmod@divisor,w,c
  3633  00247E  1004               	iorwf	___awmod@divisor+1,w,c
  3634  002480  B4D8               	btfsc	status,2,c
  3635  002482  D018               	goto	l425
  3636  002484  0E01               	movlw	1
  3637  002486  6E05               	movwf	___awmod@counter,c
  3638  002488  D004               	goto	l420
  3639  00248A  90D8               	bcf	status,0,c
  3640  00248C  3603               	rlcf	___awmod@divisor,f,c
  3641  00248E  3604               	rlcf	___awmod@divisor+1,f,c
  3642  002490  2A05               	incf	___awmod@counter,f,c
  3643  002492                     l420:
  3644  002492  AE04               	btfss	___awmod@divisor+1,7,c
  3645  002494  D7FA               	goto	l421
  3646  002496                     u2580:
  3647  002496  5003               	movf	___awmod@divisor,w,c
  3648  002498  5C01               	subwf	___awmod@dividend,w,c
  3649  00249A  5004               	movf	___awmod@divisor+1,w,c
  3650  00249C  5802               	subwfb	___awmod@dividend+1,w,c
  3651  00249E  A0D8               	btfss	status,0,c
  3652  0024A0  D004               	goto	l424
  3653  0024A2  5003               	movf	___awmod@divisor,w,c
  3654  0024A4  5E01               	subwf	___awmod@dividend,f,c
  3655  0024A6  5004               	movf	___awmod@divisor+1,w,c
  3656  0024A8  5A02               	subwfb	___awmod@dividend+1,f,c
  3657  0024AA                     l424:
  3658  0024AA  90D8               	bcf	status,0,c
  3659  0024AC  3204               	rrcf	___awmod@divisor+1,f,c
  3660  0024AE  3203               	rrcf	___awmod@divisor,f,c
  3661  0024B0  2E05               	decfsz	___awmod@counter,f,c
  3662  0024B2  D7F1               	goto	u2580
  3663  0024B4                     l425:
  3664  0024B4  5006               	movf	___awmod@sign,w,c
  3665  0024B6  B4D8               	btfsc	status,2,c
  3666  0024B8  D004               	goto	l426
  3667  0024BA  6C01               	negf	___awmod@dividend,c
  3668  0024BC  1E02               	comf	___awmod@dividend+1,f,c
  3669  0024BE  B0D8               	btfsc	status,0,c
  3670  0024C0  2A02               	incf	___awmod@dividend+1,f,c
  3671  0024C2                     l426:
  3672  0024C2  C001  F001         	movff	___awmod@dividend,?___awmod
  3673  0024C6  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3674  0024CA  0012               	return	
  3675  0024CC                     __end_of___awmod:
  3676                           	opt stack 0
  3677                           tblptru	equ	0xFF8
  3678                           tblptrh	equ	0xFF7
  3679                           tblptrl	equ	0xFF6
  3680                           tablat	equ	0xFF5
  3681                           prodh	equ	0xFF4
  3682                           prodl	equ	0xFF3
  3683                           wreg	equ	0xFE8
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function ___awdiv *****************
  3691 ;; Defined at:
  3692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  dividend        2    6[COMRAM] int 
  3695 ;;  divisor         2    8[COMRAM] int 
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;  quotient        2   12[COMRAM] int 
  3698 ;;  sign            1   11[COMRAM] unsigned char 
  3699 ;;  counter         1   10[COMRAM] unsigned char 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  2    6[COMRAM] int 
  3702 ;; Registers used:
  3703 ;;		wreg, status,2, status,0
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3709 ;;      Params:         4       0       0       0       0       0       0       0       0
  3710 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3711 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3712 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3713 ;;Total ram usage:        8 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_fround
  3719 ;;		_scale
  3720 ;;		_printf
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           	psect	text10
  3725  002356                     __ptext10:
  3726                           	opt stack 0
  3727  002356                     ___awdiv:
  3728                           	opt stack 28
  3729                           
  3730                           ;incstack = 0
  3731  002356  0E00               	movlw	0
  3732  002358  6E0C               	movwf	___awdiv@sign,c
  3733  00235A  AE0A               	btfss	___awdiv@divisor+1,7,c
  3734  00235C  D006               	goto	l404
  3735  00235E  6C09               	negf	___awdiv@divisor,c
  3736  002360  1E0A               	comf	___awdiv@divisor+1,f,c
  3737  002362  B0D8               	btfsc	status,0,c
  3738  002364  2A0A               	incf	___awdiv@divisor+1,f,c
  3739  002366  0E01               	movlw	1
  3740  002368  6E0C               	movwf	___awdiv@sign,c
  3741  00236A                     l404:
  3742  00236A  AE08               	btfss	___awdiv@dividend+1,7,c
  3743  00236C  D006               	goto	l405
  3744  00236E  6C07               	negf	___awdiv@dividend,c
  3745  002370  1E08               	comf	___awdiv@dividend+1,f,c
  3746  002372  B0D8               	btfsc	status,0,c
  3747  002374  2A08               	incf	___awdiv@dividend+1,f,c
  3748  002376  0E01               	movlw	1
  3749  002378  1A0C               	xorwf	___awdiv@sign,f,c
  3750  00237A                     l405:
  3751  00237A  0E00               	movlw	0
  3752  00237C  6E0E               	movwf	___awdiv@quotient+1,c
  3753  00237E  0E00               	movlw	0
  3754  002380  6E0D               	movwf	___awdiv@quotient,c
  3755  002382  5009               	movf	___awdiv@divisor,w,c
  3756  002384  100A               	iorwf	___awdiv@divisor+1,w,c
  3757  002386  B4D8               	btfsc	status,2,c
  3758  002388  D01C               	goto	l412
  3759  00238A  0E01               	movlw	1
  3760  00238C  6E0B               	movwf	___awdiv@counter,c
  3761  00238E  D004               	goto	l407
  3762  002390  90D8               	bcf	status,0,c
  3763  002392  3609               	rlcf	___awdiv@divisor,f,c
  3764  002394  360A               	rlcf	___awdiv@divisor+1,f,c
  3765  002396  2A0B               	incf	___awdiv@counter,f,c
  3766  002398                     l407:
  3767  002398  AE0A               	btfss	___awdiv@divisor+1,7,c
  3768  00239A  D7FA               	goto	l408
  3769  00239C                     u2520:
  3770  00239C  90D8               	bcf	status,0,c
  3771  00239E  360D               	rlcf	___awdiv@quotient,f,c
  3772  0023A0  360E               	rlcf	___awdiv@quotient+1,f,c
  3773  0023A2  5009               	movf	___awdiv@divisor,w,c
  3774  0023A4  5C07               	subwf	___awdiv@dividend,w,c
  3775  0023A6  500A               	movf	___awdiv@divisor+1,w,c
  3776  0023A8  5808               	subwfb	___awdiv@dividend+1,w,c
  3777  0023AA  A0D8               	btfss	status,0,c
  3778  0023AC  D005               	goto	l411
  3779  0023AE  5009               	movf	___awdiv@divisor,w,c
  3780  0023B0  5E07               	subwf	___awdiv@dividend,f,c
  3781  0023B2  500A               	movf	___awdiv@divisor+1,w,c
  3782  0023B4  5A08               	subwfb	___awdiv@dividend+1,f,c
  3783  0023B6  800D               	bsf	___awdiv@quotient,0,c
  3784  0023B8                     l411:
  3785  0023B8  90D8               	bcf	status,0,c
  3786  0023BA  320A               	rrcf	___awdiv@divisor+1,f,c
  3787  0023BC  3209               	rrcf	___awdiv@divisor,f,c
  3788  0023BE  2E0B               	decfsz	___awdiv@counter,f,c
  3789  0023C0  D7ED               	goto	u2520
  3790  0023C2                     l412:
  3791  0023C2  500C               	movf	___awdiv@sign,w,c
  3792  0023C4  B4D8               	btfsc	status,2,c
  3793  0023C6  D004               	goto	l413
  3794  0023C8  6C0D               	negf	___awdiv@quotient,c
  3795  0023CA  1E0E               	comf	___awdiv@quotient+1,f,c
  3796  0023CC  B0D8               	btfsc	status,0,c
  3797  0023CE  2A0E               	incf	___awdiv@quotient+1,f,c
  3798  0023D0                     l413:
  3799  0023D0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3800  0023D4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3801  0023D8  0012               	return	
  3802  0023DA                     __end_of___awdiv:
  3803                           	opt stack 0
  3804                           tblptru	equ	0xFF8
  3805                           tblptrh	equ	0xFF7
  3806                           tblptrl	equ	0xFF6
  3807                           tablat	equ	0xFF5
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           wreg	equ	0xFE8
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           fsr2h	equ	0xFDA
  3814                           fsr2l	equ	0xFD9
  3815                           status	equ	0xFD8
  3816                           
  3817 ;; *************** function __tdiv_to_l_ *****************
  3818 ;; Defined at:
  3819 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;  f1              3    0[COMRAM] float 
  3822 ;;  f2              3    3[COMRAM] float 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  quot            4    9[COMRAM] unsigned long 
  3825 ;;  exp1            1   14[COMRAM] unsigned char 
  3826 ;;  cntr            1   13[COMRAM] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  4    0[COMRAM] unsigned long 
  3829 ;; Registers used:
  3830 ;;		wreg, status,2, status,0
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3836 ;;      Params:         6       0       0       0       0       0       0       0       0
  3837 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3838 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3839 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3840 ;;Total ram usage:       15 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; This function calls:
  3843 ;;		Nothing
  3844 ;; This function is called by:
  3845 ;;		_printf
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text11
  3850  001BFC                     __ptext11:
  3851                           	opt stack 0
  3852  001BFC                     __tdiv_to_l_:
  3853                           	opt stack 29
  3854                           
  3855                           ;incstack = 0
  3856  001BFC  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3857  001C00  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3858  001C02  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3859  001C04  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3860  001C06  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3861  001C08  E301               	bnc	u2701
  3862  001C0A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3863  001C0C                     u2701:
  3864  001C0C  5007               	movf	??__tdiv_to_l_,w,c
  3865  001C0E  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3866  001C10  500F               	movf	__tdiv_to_l_@exp1,w,c
  3867  001C12  A4D8               	btfss	status,2,c
  3868  001C14  D009               	goto	l540
  3869  001C16  0E00               	movlw	0
  3870  001C18  6E01               	movwf	?__tdiv_to_l_,c
  3871  001C1A  0E00               	movlw	0
  3872  001C1C  6E02               	movwf	?__tdiv_to_l_+1,c
  3873  001C1E  0E00               	movlw	0
  3874  001C20  6E03               	movwf	?__tdiv_to_l_+2,c
  3875  001C22  0E00               	movlw	0
  3876  001C24  6E04               	movwf	?__tdiv_to_l_+3,c
  3877  001C26  0012               	return	
  3878  001C28                     l540:
  3879  001C28  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3880  001C2C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3881  001C2E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3882  001C30  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3883  001C32  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3884  001C34  E301               	bnc	u2721
  3885  001C36  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3886  001C38                     u2721:
  3887  001C38  5007               	movf	??__tdiv_to_l_,w,c
  3888  001C3A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3889  001C3C  500E               	movf	__tdiv_to_l_@cntr,w,c
  3890  001C3E  A4D8               	btfss	status,2,c
  3891  001C40  D009               	goto	l542
  3892  001C42  0E00               	movlw	0
  3893  001C44  6E01               	movwf	?__tdiv_to_l_,c
  3894  001C46  0E00               	movlw	0
  3895  001C48  6E02               	movwf	?__tdiv_to_l_+1,c
  3896  001C4A  0E00               	movlw	0
  3897  001C4C  6E03               	movwf	?__tdiv_to_l_+2,c
  3898  001C4E  0E00               	movlw	0
  3899  001C50  6E04               	movwf	?__tdiv_to_l_+3,c
  3900  001C52  0012               	return	
  3901  001C54                     l542:
  3902  001C54  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3903  001C56  0EFF               	movlw	255
  3904  001C58  1601               	andwf	__tdiv_to_l_@f1,f,c
  3905  001C5A  0EFF               	movlw	255
  3906  001C5C  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3907  001C5E  0E00               	movlw	0
  3908  001C60  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3909  001C62  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3910  001C64  0EFF               	movlw	255
  3911  001C66  1604               	andwf	__tdiv_to_l_@f2,f,c
  3912  001C68  0EFF               	movlw	255
  3913  001C6A  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3914  001C6C  0E00               	movlw	0
  3915  001C6E  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3916  001C70  0E00               	movlw	0
  3917  001C72  6E0A               	movwf	__tdiv_to_l_@quot,c
  3918  001C74  0E00               	movlw	0
  3919  001C76  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3920  001C78  0E00               	movlw	0
  3921  001C7A  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3922  001C7C  0E00               	movlw	0
  3923  001C7E  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3924  001C80  0E7F               	movlw	127
  3925  001C82  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3926  001C84  500E               	movf	__tdiv_to_l_@cntr,w,c
  3927  001C86  0F98               	addlw	152
  3928  001C88  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3929  001C8A  0E18               	movlw	24
  3930  001C8C  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3931  001C8E                     l543:
  3932  001C8E  90D8               	bcf	status,0,c
  3933  001C90  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3934  001C92  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3935  001C94  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3936  001C96  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3937  001C98  5004               	movf	__tdiv_to_l_@f2,w,c
  3938  001C9A  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3939  001C9C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3940  001C9E  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3941  001CA0  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3942  001CA2  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3943  001CA4  A0D8               	btfss	status,0,c
  3944  001CA6  D007               	goto	l544
  3945  001CA8  5004               	movf	__tdiv_to_l_@f2,w,c
  3946  001CAA  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3947  001CAC  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3948  001CAE  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3949  001CB0  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3950  001CB2  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3951  001CB4  800A               	bsf	__tdiv_to_l_@quot,0,c
  3952  001CB6                     l544:
  3953  001CB6  90D8               	bcf	status,0,c
  3954  001CB8  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3955  001CBA  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3956  001CBC  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3957  001CBE  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3958  001CC0  D7E6               	goto	l543
  3959  001CC2  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3960  001CC4  D016               	goto	l546
  3961  001CC6  500F               	movf	__tdiv_to_l_@exp1,w,c
  3962  001CC8  0A80               	xorlw	128
  3963  001CCA  0F97               	addlw	151
  3964  001CCC  B0D8               	btfsc	status,0,c
  3965  001CCE  D009               	goto	l547
  3966  001CD0  0E00               	movlw	0
  3967  001CD2  6E01               	movwf	?__tdiv_to_l_,c
  3968  001CD4  0E00               	movlw	0
  3969  001CD6  6E02               	movwf	?__tdiv_to_l_+1,c
  3970  001CD8  0E00               	movlw	0
  3971  001CDA  6E03               	movwf	?__tdiv_to_l_+2,c
  3972  001CDC  0E00               	movlw	0
  3973  001CDE  6E04               	movwf	?__tdiv_to_l_+3,c
  3974  001CE0  0012               	return	
  3975  001CE2                     l547:
  3976  001CE2  90D8               	bcf	status,0,c
  3977  001CE4  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3978  001CE6  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3979  001CE8  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3980  001CEA  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3981  001CEC  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3982  001CEE  D7F9               	goto	l547
  3983  001CF0  D015               	goto	u2780
  3984  001CF2                     l546:
  3985  001CF2  0E17               	movlw	23
  3986  001CF4  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3987  001CF6  D00F               	goto	l552
  3988  001CF8  0E00               	movlw	0
  3989  001CFA  6E01               	movwf	?__tdiv_to_l_,c
  3990  001CFC  0E00               	movlw	0
  3991  001CFE  6E02               	movwf	?__tdiv_to_l_+1,c
  3992  001D00  0E00               	movlw	0
  3993  001D02  6E03               	movwf	?__tdiv_to_l_+2,c
  3994  001D04  0E00               	movlw	0
  3995  001D06  6E04               	movwf	?__tdiv_to_l_+3,c
  3996  001D08  0012               	return	
  3997  001D0A  90D8               	bcf	status,0,c
  3998  001D0C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3999  001D0E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4000  001D10  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4001  001D12  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4002  001D14  060F               	decf	__tdiv_to_l_@exp1,f,c
  4003  001D16                     l552:
  4004  001D16  500F               	movf	__tdiv_to_l_@exp1,w,c
  4005  001D18  A4D8               	btfss	status,2,c
  4006  001D1A  D7F7               	goto	l553
  4007  001D1C                     u2780:
  4008  001D1C  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4009  001D20  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4010  001D24  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4011  001D28  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4012  001D2C  0012               	return		;funcret
  4013  001D2E                     __end_of__tdiv_to_l_:
  4014                           	opt stack 0
  4015                           tblptru	equ	0xFF8
  4016                           tblptrh	equ	0xFF7
  4017                           tblptrl	equ	0xFF6
  4018                           tablat	equ	0xFF5
  4019                           prodh	equ	0xFF4
  4020                           prodl	equ	0xFF3
  4021                           wreg	equ	0xFE8
  4022                           postinc2	equ	0xFDE
  4023                           postdec2	equ	0xFDD
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function __div_to_l_ *****************
  4029 ;; Defined at:
  4030 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  f1              3    0[COMRAM] unsigned long 
  4033 ;;  f2              3    3[COMRAM] unsigned long 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  quot            4    6[COMRAM] unsigned long 
  4036 ;;  exp1            1   11[COMRAM] unsigned char 
  4037 ;;  cntr            1   10[COMRAM] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  4    0[COMRAM] unsigned long 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4047 ;;      Params:         6       0       0       0       0       0       0       0       0
  4048 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4050 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4051 ;;Total ram usage:       12 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; This function calls:
  4054 ;;		Nothing
  4055 ;; This function is called by:
  4056 ;;		_printf
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text12
  4061  001D2E                     __ptext12:
  4062                           	opt stack 0
  4063  001D2E                     __div_to_l_:
  4064                           	opt stack 29
  4065                           
  4066                           ;incstack = 0
  4067  001D2E  3403               	rlcf	__div_to_l_@f1+2,w,c
  4068  001D30  3404               	rlcf	__div_to_l_@f1+3,w,c
  4069  001D32  6E0C               	movwf	__div_to_l_@exp1,c
  4070  001D34  500C               	movf	__div_to_l_@exp1,w,c
  4071  001D36  A4D8               	btfss	status,2,c
  4072  001D38  D009               	goto	l436
  4073  001D3A  0E00               	movlw	0
  4074  001D3C  6E01               	movwf	?__div_to_l_,c
  4075  001D3E  0E00               	movlw	0
  4076  001D40  6E02               	movwf	?__div_to_l_+1,c
  4077  001D42  0E00               	movlw	0
  4078  001D44  6E03               	movwf	?__div_to_l_+2,c
  4079  001D46  0E00               	movlw	0
  4080  001D48  6E04               	movwf	?__div_to_l_+3,c
  4081  001D4A  0012               	return	
  4082  001D4C                     l436:
  4083  001D4C  3406               	rlcf	__div_to_l_@f2+2,w,c
  4084  001D4E  3407               	rlcf	__div_to_l_@f2+3,w,c
  4085  001D50  6E0B               	movwf	__div_to_l_@cntr,c
  4086  001D52  500B               	movf	__div_to_l_@cntr,w,c
  4087  001D54  A4D8               	btfss	status,2,c
  4088  001D56  D009               	goto	l438
  4089  001D58  0E00               	movlw	0
  4090  001D5A  6E01               	movwf	?__div_to_l_,c
  4091  001D5C  0E00               	movlw	0
  4092  001D5E  6E02               	movwf	?__div_to_l_+1,c
  4093  001D60  0E00               	movlw	0
  4094  001D62  6E03               	movwf	?__div_to_l_+2,c
  4095  001D64  0E00               	movlw	0
  4096  001D66  6E04               	movwf	?__div_to_l_+3,c
  4097  001D68  0012               	return	
  4098  001D6A                     l438:
  4099  001D6A  8E03               	bsf	__div_to_l_@f1+2,7,c
  4100  001D6C  0EFF               	movlw	255
  4101  001D6E  1601               	andwf	__div_to_l_@f1,f,c
  4102  001D70  0EFF               	movlw	255
  4103  001D72  1602               	andwf	__div_to_l_@f1+1,f,c
  4104  001D74  0EFF               	movlw	255
  4105  001D76  1603               	andwf	__div_to_l_@f1+2,f,c
  4106  001D78  0E00               	movlw	0
  4107  001D7A  1604               	andwf	__div_to_l_@f1+3,f,c
  4108  001D7C  8E06               	bsf	__div_to_l_@f2+2,7,c
  4109  001D7E  0EFF               	movlw	255
  4110  001D80  1604               	andwf	__div_to_l_@f2,f,c
  4111  001D82  0EFF               	movlw	255
  4112  001D84  1605               	andwf	__div_to_l_@f2+1,f,c
  4113  001D86  0EFF               	movlw	255
  4114  001D88  1606               	andwf	__div_to_l_@f2+2,f,c
  4115  001D8A  0E00               	movlw	0
  4116  001D8C  1607               	andwf	__div_to_l_@f2+3,f,c
  4117  001D8E  0E00               	movlw	0
  4118  001D90  6E07               	movwf	__div_to_l_@quot,c
  4119  001D92  0E00               	movlw	0
  4120  001D94  6E08               	movwf	__div_to_l_@quot+1,c
  4121  001D96  0E00               	movlw	0
  4122  001D98  6E09               	movwf	__div_to_l_@quot+2,c
  4123  001D9A  0E00               	movlw	0
  4124  001D9C  6E0A               	movwf	__div_to_l_@quot+3,c
  4125  001D9E  0E7F               	movlw	127
  4126  001DA0  5E0C               	subwf	__div_to_l_@exp1,f,c
  4127  001DA2  500B               	movf	__div_to_l_@cntr,w,c
  4128  001DA4  0FA0               	addlw	160
  4129  001DA6  5E0C               	subwf	__div_to_l_@exp1,f,c
  4130  001DA8  0E20               	movlw	32
  4131  001DAA  6E0B               	movwf	__div_to_l_@cntr,c
  4132  001DAC  90D8               	bcf	status,0,c
  4133  001DAE  3607               	rlcf	__div_to_l_@quot,f,c
  4134  001DB0  3608               	rlcf	__div_to_l_@quot+1,f,c
  4135  001DB2  3609               	rlcf	__div_to_l_@quot+2,f,c
  4136  001DB4  360A               	rlcf	__div_to_l_@quot+3,f,c
  4137  001DB6  5004               	movf	__div_to_l_@f2,w,c
  4138  001DB8  5C01               	subwf	__div_to_l_@f1,w,c
  4139  001DBA  5005               	movf	__div_to_l_@f2+1,w,c
  4140  001DBC  5802               	subwfb	__div_to_l_@f1+1,w,c
  4141  001DBE  5006               	movf	__div_to_l_@f2+2,w,c
  4142  001DC0  5803               	subwfb	__div_to_l_@f1+2,w,c
  4143  001DC2  5007               	movf	__div_to_l_@f2+3,w,c
  4144  001DC4  5804               	subwfb	__div_to_l_@f1+3,w,c
  4145  001DC6  A0D8               	btfss	status,0,c
  4146  001DC8  D009               	goto	l440
  4147  001DCA  5004               	movf	__div_to_l_@f2,w,c
  4148  001DCC  5E01               	subwf	__div_to_l_@f1,f,c
  4149  001DCE  5005               	movf	__div_to_l_@f2+1,w,c
  4150  001DD0  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4151  001DD2  5006               	movf	__div_to_l_@f2+2,w,c
  4152  001DD4  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4153  001DD6  5007               	movf	__div_to_l_@f2+3,w,c
  4154  001DD8  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4155  001DDA  8007               	bsf	__div_to_l_@quot,0,c
  4156  001DDC                     l440:
  4157  001DDC  90D8               	bcf	status,0,c
  4158  001DDE  3601               	rlcf	__div_to_l_@f1,f,c
  4159  001DE0  3602               	rlcf	__div_to_l_@f1+1,f,c
  4160  001DE2  3603               	rlcf	__div_to_l_@f1+2,f,c
  4161  001DE4  3604               	rlcf	__div_to_l_@f1+3,f,c
  4162  001DE6  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4163  001DE8  D7E1               	goto	l439
  4164  001DEA  AE0C               	btfss	__div_to_l_@exp1,7,c
  4165  001DEC  D016               	goto	l442
  4166  001DEE  500C               	movf	__div_to_l_@exp1,w,c
  4167  001DF0  0A80               	xorlw	128
  4168  001DF2  0F9F               	addlw	159
  4169  001DF4  B0D8               	btfsc	status,0,c
  4170  001DF6  D009               	goto	l443
  4171  001DF8  0E00               	movlw	0
  4172  001DFA  6E01               	movwf	?__div_to_l_,c
  4173  001DFC  0E00               	movlw	0
  4174  001DFE  6E02               	movwf	?__div_to_l_+1,c
  4175  001E00  0E00               	movlw	0
  4176  001E02  6E03               	movwf	?__div_to_l_+2,c
  4177  001E04  0E00               	movlw	0
  4178  001E06  6E04               	movwf	?__div_to_l_+3,c
  4179  001E08  0012               	return	
  4180  001E0A                     l443:
  4181  001E0A  90D8               	bcf	status,0,c
  4182  001E0C  320A               	rrcf	__div_to_l_@quot+3,f,c
  4183  001E0E  3209               	rrcf	__div_to_l_@quot+2,f,c
  4184  001E10  3208               	rrcf	__div_to_l_@quot+1,f,c
  4185  001E12  3207               	rrcf	__div_to_l_@quot,f,c
  4186  001E14  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4187  001E16  D7F9               	goto	l443
  4188  001E18  D015               	goto	u2850
  4189  001E1A                     l442:
  4190  001E1A  0E1F               	movlw	31
  4191  001E1C  640C               	cpfsgt	__div_to_l_@exp1,c
  4192  001E1E  D00F               	goto	l448
  4193  001E20  0E00               	movlw	0
  4194  001E22  6E01               	movwf	?__div_to_l_,c
  4195  001E24  0E00               	movlw	0
  4196  001E26  6E02               	movwf	?__div_to_l_+1,c
  4197  001E28  0E00               	movlw	0
  4198  001E2A  6E03               	movwf	?__div_to_l_+2,c
  4199  001E2C  0E00               	movlw	0
  4200  001E2E  6E04               	movwf	?__div_to_l_+3,c
  4201  001E30  0012               	return	
  4202  001E32  90D8               	bcf	status,0,c
  4203  001E34  3607               	rlcf	__div_to_l_@quot,f,c
  4204  001E36  3608               	rlcf	__div_to_l_@quot+1,f,c
  4205  001E38  3609               	rlcf	__div_to_l_@quot+2,f,c
  4206  001E3A  360A               	rlcf	__div_to_l_@quot+3,f,c
  4207  001E3C  060C               	decf	__div_to_l_@exp1,f,c
  4208  001E3E                     l448:
  4209  001E3E  500C               	movf	__div_to_l_@exp1,w,c
  4210  001E40  A4D8               	btfss	status,2,c
  4211  001E42  D7F7               	goto	l449
  4212  001E44                     u2850:
  4213  001E44  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4214  001E48  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4215  001E4C  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4216  001E50  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4217  001E54  0012               	return		;funcret
  4218  001E56                     __end_of__div_to_l_:
  4219                           	opt stack 0
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           wreg	equ	0xFE8
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           fsr2h	equ	0xFDA
  4230                           fsr2l	equ	0xFD9
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function ___lltoft *****************
  4234 ;; Defined at:
  4235 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  c               4    8[COMRAM] unsigned long 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  exp             1   16[COMRAM] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  3    8[COMRAM] float 
  4242 ;; Registers used:
  4243 ;;		wreg, status,2, status,0, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4249 ;;      Params:         4       0       0       0       0       0       0       0       0
  4250 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4251 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4252 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4253 ;;Total ram usage:        9 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    1
  4256 ;; This function calls:
  4257 ;;		___ftpack
  4258 ;; This function is called by:
  4259 ;;		_printf
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text13
  4264  002532                     __ptext13:
  4265                           	opt stack 0
  4266  002532                     ___lltoft:
  4267                           	opt stack 28
  4268                           
  4269                           ;incstack = 0
  4270  002532  0E8E               	movlw	142
  4271  002534  6E11               	movwf	___lltoft@exp,c
  4272  002536  D006               	goto	l647
  4273  002538  90D8               	bcf	status,0,c
  4274  00253A  320C               	rrcf	___lltoft@c+3,f,c
  4275  00253C  320B               	rrcf	___lltoft@c+2,f,c
  4276  00253E  320A               	rrcf	___lltoft@c+1,f,c
  4277  002540  3209               	rrcf	___lltoft@c,f,c
  4278  002542  2A11               	incf	___lltoft@exp,f,c
  4279  002544                     l647:
  4280  002544  0E00               	movlw	0
  4281  002546  1409               	andwf	___lltoft@c,w,c
  4282  002548  6E0D               	movwf	??___lltoft& (0+255),c
  4283  00254A  0E00               	movlw	0
  4284  00254C  140A               	andwf	___lltoft@c+1,w,c
  4285  00254E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4286  002550  0E00               	movlw	0
  4287  002552  140B               	andwf	___lltoft@c+2,w,c
  4288  002554  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4289  002556  0EFF               	movlw	255
  4290  002558  140C               	andwf	___lltoft@c+3,w,c
  4291  00255A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4292  00255C  500D               	movf	??___lltoft,w,c
  4293  00255E  100E               	iorwf	??___lltoft+1,w,c
  4294  002560  100F               	iorwf	??___lltoft+2,w,c
  4295  002562  1010               	iorwf	??___lltoft+3,w,c
  4296  002564  A4D8               	btfss	status,2,c
  4297  002566  D7E8               	goto	l648
  4298  002568  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4299  00256C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4300  002570  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4301  002574  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4302  002578  0E00               	movlw	0
  4303  00257A  6E05               	movwf	___ftpack@sign,c
  4304  00257C  EC0C  F011         	call	___ftpack	;wreg free
  4305  002580  C001  F009         	movff	?___ftpack,?___lltoft
  4306  002584  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4307  002588  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4308  00258C  0012               	return	
  4309  00258E                     __end_of___lltoft:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           wreg	equ	0xFE8
  4318                           postinc2	equ	0xFDE
  4319                           postdec2	equ	0xFDD
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function ___llmod *****************
  4325 ;; Defined at:
  4326 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  dividend        4    0[COMRAM] unsigned long 
  4329 ;;  divisor         4    4[COMRAM] unsigned long 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  counter         1    8[COMRAM] unsigned char 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  4    0[COMRAM] unsigned long 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2, status,0
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4341 ;;      Params:         8       0       0       0       0       0       0       0       0
  4342 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4344 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4345 ;;Total ram usage:        9 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_printf
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text14
  4355  0024CC                     __ptext14:
  4356                           	opt stack 0
  4357  0024CC                     ___llmod:
  4358                           	opt stack 29
  4359                           
  4360                           ;incstack = 0
  4361  0024CC  5005               	movf	___llmod@divisor,w,c
  4362  0024CE  1006               	iorwf	___llmod@divisor+1,w,c
  4363  0024D0  1007               	iorwf	___llmod@divisor+2,w,c
  4364  0024D2  1008               	iorwf	___llmod@divisor+3,w,c
  4365  0024D4  B4D8               	btfsc	status,2,c
  4366  0024D6  D024               	goto	l641
  4367  0024D8  0E01               	movlw	1
  4368  0024DA  6E09               	movwf	___llmod@counter,c
  4369  0024DC  D006               	goto	l636
  4370  0024DE  90D8               	bcf	status,0,c
  4371  0024E0  3605               	rlcf	___llmod@divisor,f,c
  4372  0024E2  3606               	rlcf	___llmod@divisor+1,f,c
  4373  0024E4  3607               	rlcf	___llmod@divisor+2,f,c
  4374  0024E6  3608               	rlcf	___llmod@divisor+3,f,c
  4375  0024E8  2A09               	incf	___llmod@counter,f,c
  4376  0024EA                     l636:
  4377  0024EA  AE08               	btfss	___llmod@divisor+3,7,c
  4378  0024EC  D7F8               	goto	l637
  4379  0024EE                     u3030:
  4380  0024EE  5005               	movf	___llmod@divisor,w,c
  4381  0024F0  5C01               	subwf	___llmod@dividend,w,c
  4382  0024F2  5006               	movf	___llmod@divisor+1,w,c
  4383  0024F4  5802               	subwfb	___llmod@dividend+1,w,c
  4384  0024F6  5007               	movf	___llmod@divisor+2,w,c
  4385  0024F8  5803               	subwfb	___llmod@dividend+2,w,c
  4386  0024FA  5008               	movf	___llmod@divisor+3,w,c
  4387  0024FC  5804               	subwfb	___llmod@dividend+3,w,c
  4388  0024FE  A0D8               	btfss	status,0,c
  4389  002500  D008               	goto	l640
  4390  002502  5005               	movf	___llmod@divisor,w,c
  4391  002504  5E01               	subwf	___llmod@dividend,f,c
  4392  002506  5006               	movf	___llmod@divisor+1,w,c
  4393  002508  5A02               	subwfb	___llmod@dividend+1,f,c
  4394  00250A  5007               	movf	___llmod@divisor+2,w,c
  4395  00250C  5A03               	subwfb	___llmod@dividend+2,f,c
  4396  00250E  5008               	movf	___llmod@divisor+3,w,c
  4397  002510  5A04               	subwfb	___llmod@dividend+3,f,c
  4398  002512                     l640:
  4399  002512  90D8               	bcf	status,0,c
  4400  002514  3208               	rrcf	___llmod@divisor+3,f,c
  4401  002516  3207               	rrcf	___llmod@divisor+2,f,c
  4402  002518  3206               	rrcf	___llmod@divisor+1,f,c
  4403  00251A  3205               	rrcf	___llmod@divisor,f,c
  4404  00251C  2E09               	decfsz	___llmod@counter,f,c
  4405  00251E  D7E7               	goto	u3030
  4406  002520                     l641:
  4407  002520  C001  F001         	movff	___llmod@dividend,?___llmod
  4408  002524  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4409  002528  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4410  00252C  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4411  002530  0012               	return		;funcret
  4412  002532                     __end_of___llmod:
  4413                           	opt stack 0
  4414                           tblptru	equ	0xFF8
  4415                           tblptrh	equ	0xFF7
  4416                           tblptrl	equ	0xFF6
  4417                           tablat	equ	0xFF5
  4418                           prodh	equ	0xFF4
  4419                           prodl	equ	0xFF3
  4420                           wreg	equ	0xFE8
  4421                           postinc2	equ	0xFDE
  4422                           postdec2	equ	0xFDD
  4423                           fsr2h	equ	0xFDA
  4424                           fsr2l	equ	0xFD9
  4425                           status	equ	0xFD8
  4426                           
  4427 ;; *************** function ___lldiv *****************
  4428 ;; Defined at:
  4429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  dividend        4    0[COMRAM] unsigned long 
  4432 ;;  divisor         4    4[COMRAM] unsigned long 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;  quotient        4    8[COMRAM] unsigned long 
  4435 ;;  counter         1   12[COMRAM] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  4    0[COMRAM] unsigned long 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4445 ;;      Params:         8       0       0       0       0       0       0       0       0
  4446 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4447 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4448 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4449 ;;Total ram usage:       13 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; This function calls:
  4452 ;;		Nothing
  4453 ;; This function is called by:
  4454 ;;		_printf
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	text15
  4459  0023DA                     __ptext15:
  4460                           	opt stack 0
  4461  0023DA                     ___lldiv:
  4462                           	opt stack 29
  4463                           
  4464                           ;incstack = 0
  4465  0023DA  0E00               	movlw	0
  4466  0023DC  6E09               	movwf	___lldiv@quotient,c
  4467  0023DE  0E00               	movlw	0
  4468  0023E0  6E0A               	movwf	___lldiv@quotient+1,c
  4469  0023E2  0E00               	movlw	0
  4470  0023E4  6E0B               	movwf	___lldiv@quotient+2,c
  4471  0023E6  0E00               	movlw	0
  4472  0023E8  6E0C               	movwf	___lldiv@quotient+3,c
  4473  0023EA  5005               	movf	___lldiv@divisor,w,c
  4474  0023EC  1006               	iorwf	___lldiv@divisor+1,w,c
  4475  0023EE  1007               	iorwf	___lldiv@divisor+2,w,c
  4476  0023F0  1008               	iorwf	___lldiv@divisor+3,w,c
  4477  0023F2  B4D8               	btfsc	status,2,c
  4478  0023F4  D02A               	goto	l631
  4479  0023F6  0E01               	movlw	1
  4480  0023F8  6E0D               	movwf	___lldiv@counter,c
  4481  0023FA  D006               	goto	l626
  4482  0023FC  90D8               	bcf	status,0,c
  4483  0023FE  3605               	rlcf	___lldiv@divisor,f,c
  4484  002400  3606               	rlcf	___lldiv@divisor+1,f,c
  4485  002402  3607               	rlcf	___lldiv@divisor+2,f,c
  4486  002404  3608               	rlcf	___lldiv@divisor+3,f,c
  4487  002406  2A0D               	incf	___lldiv@counter,f,c
  4488  002408                     l626:
  4489  002408  AE08               	btfss	___lldiv@divisor+3,7,c
  4490  00240A  D7F8               	goto	l627
  4491  00240C                     u3000:
  4492  00240C  90D8               	bcf	status,0,c
  4493  00240E  3609               	rlcf	___lldiv@quotient,f,c
  4494  002410  360A               	rlcf	___lldiv@quotient+1,f,c
  4495  002412  360B               	rlcf	___lldiv@quotient+2,f,c
  4496  002414  360C               	rlcf	___lldiv@quotient+3,f,c
  4497  002416  5005               	movf	___lldiv@divisor,w,c
  4498  002418  5C01               	subwf	___lldiv@dividend,w,c
  4499  00241A  5006               	movf	___lldiv@divisor+1,w,c
  4500  00241C  5802               	subwfb	___lldiv@dividend+1,w,c
  4501  00241E  5007               	movf	___lldiv@divisor+2,w,c
  4502  002420  5803               	subwfb	___lldiv@dividend+2,w,c
  4503  002422  5008               	movf	___lldiv@divisor+3,w,c
  4504  002424  5804               	subwfb	___lldiv@dividend+3,w,c
  4505  002426  A0D8               	btfss	status,0,c
  4506  002428  D009               	goto	l630
  4507  00242A  5005               	movf	___lldiv@divisor,w,c
  4508  00242C  5E01               	subwf	___lldiv@dividend,f,c
  4509  00242E  5006               	movf	___lldiv@divisor+1,w,c
  4510  002430  5A02               	subwfb	___lldiv@dividend+1,f,c
  4511  002432  5007               	movf	___lldiv@divisor+2,w,c
  4512  002434  5A03               	subwfb	___lldiv@dividend+2,f,c
  4513  002436  5008               	movf	___lldiv@divisor+3,w,c
  4514  002438  5A04               	subwfb	___lldiv@dividend+3,f,c
  4515  00243A  8009               	bsf	___lldiv@quotient,0,c
  4516  00243C                     l630:
  4517  00243C  90D8               	bcf	status,0,c
  4518  00243E  3208               	rrcf	___lldiv@divisor+3,f,c
  4519  002440  3207               	rrcf	___lldiv@divisor+2,f,c
  4520  002442  3206               	rrcf	___lldiv@divisor+1,f,c
  4521  002444  3205               	rrcf	___lldiv@divisor,f,c
  4522  002446  2E0D               	decfsz	___lldiv@counter,f,c
  4523  002448  D7E1               	goto	u3000
  4524  00244A                     l631:
  4525  00244A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4526  00244E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4527  002452  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4528  002456  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4529  00245A  0012               	return		;funcret
  4530  00245C                     __end_of___lldiv:
  4531                           	opt stack 0
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           prodh	equ	0xFF4
  4537                           prodl	equ	0xFF3
  4538                           wreg	equ	0xFE8
  4539                           postinc2	equ	0xFDE
  4540                           postdec2	equ	0xFDD
  4541                           fsr2h	equ	0xFDA
  4542                           fsr2l	equ	0xFD9
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function ___fttol *****************
  4546 ;; Defined at:
  4547 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  f1              3   42[COMRAM] float 
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  lval            4   52[COMRAM] unsigned long 
  4552 ;;  exp1            1   56[COMRAM] unsigned char 
  4553 ;;  sign1           1   51[COMRAM] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  4   42[COMRAM] long 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2, status,0
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4563 ;;      Params:         4       0       0       0       0       0       0       0       0
  4564 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4565 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4566 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4567 ;;Total ram usage:       15 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; This function calls:
  4570 ;;		Nothing
  4571 ;; This function is called by:
  4572 ;;		_printf
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text16
  4577  00203E                     __ptext16:
  4578                           	opt stack 0
  4579  00203E                     ___fttol:
  4580                           	opt stack 29
  4581                           
  4582                           ;incstack = 0
  4583  00203E  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4584  002042  6A30               	clrf	(??___fttol+1)& (0+255),c
  4585  002044  6A31               	clrf	(??___fttol+2)& (0+255),c
  4586  002046  342C               	rlcf	___fttol@f1+1,w,c
  4587  002048  362F               	rlcf	??___fttol& (0+255),f,c
  4588  00204A  E301               	bnc	u2911
  4589  00204C  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4590  00204E                     u2911:
  4591  00204E  502F               	movf	??___fttol,w,c
  4592  002050  6E39               	movwf	___fttol@exp1,c
  4593  002052  5039               	movf	___fttol@exp1,w,c
  4594  002054  A4D8               	btfss	status,2,c
  4595  002056  D009               	goto	l585
  4596  002058  0E00               	movlw	0
  4597  00205A  6E2B               	movwf	?___fttol,c
  4598  00205C  0E00               	movlw	0
  4599  00205E  6E2C               	movwf	?___fttol+1,c
  4600  002060  0E00               	movlw	0
  4601  002062  6E2D               	movwf	?___fttol+2,c
  4602  002064  0E00               	movlw	0
  4603  002066  6E2E               	movwf	?___fttol+3,c
  4604  002068  0012               	return	
  4605  00206A                     l585:
  4606  00206A  0E17               	movlw	23
  4607  00206C  6E2F               	movwf	??___fttol& (0+255),c
  4608  00206E  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4609  002072  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4610  002076  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4611  00207A  282F               	incf	??___fttol,w,c
  4612  00207C  6E33               	movwf	(??___fttol+4)& (0+255),c
  4613  00207E  D004               	goto	u2930
  4614  002080                     u2935:
  4615  002080  90D8               	bcf	status,0,c
  4616  002082  3232               	rrcf	??___fttol+3,f,c
  4617  002084  3231               	rrcf	??___fttol+2,f,c
  4618  002086  3230               	rrcf	??___fttol+1,f,c
  4619  002088                     u2930:
  4620  002088  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4621  00208A  D7FA               	goto	u2935
  4622  00208C  5030               	movf	??___fttol+1,w,c
  4623  00208E  6E34               	movwf	___fttol@sign1,c
  4624  002090  8E2C               	bsf	___fttol@f1+1,7,c
  4625  002092  0EFF               	movlw	255
  4626  002094  162B               	andwf	___fttol@f1,f,c
  4627  002096  0EFF               	movlw	255
  4628  002098  162C               	andwf	___fttol@f1+1,f,c
  4629  00209A  0E00               	movlw	0
  4630  00209C  162D               	andwf	___fttol@f1+2,f,c
  4631  00209E  502B               	movf	___fttol@f1,w,c
  4632  0020A0  6E35               	movwf	___fttol@lval,c
  4633  0020A2  502C               	movf	___fttol@f1+1,w,c
  4634  0020A4  6E36               	movwf	___fttol@lval+1,c
  4635  0020A6  502D               	movf	___fttol@f1+2,w,c
  4636  0020A8  6E37               	movwf	___fttol@lval+2,c
  4637  0020AA  6A38               	clrf	___fttol@lval+3,c
  4638  0020AC  0E8E               	movlw	142
  4639  0020AE  5E39               	subwf	___fttol@exp1,f,c
  4640  0020B0  AE39               	btfss	___fttol@exp1,7,c
  4641  0020B2  D016               	goto	l587
  4642  0020B4  5039               	movf	___fttol@exp1,w,c
  4643  0020B6  0A80               	xorlw	128
  4644  0020B8  0F8F               	addlw	143
  4645  0020BA  B0D8               	btfsc	status,0,c
  4646  0020BC  D009               	goto	l588
  4647  0020BE  0E00               	movlw	0
  4648  0020C0  6E2B               	movwf	?___fttol,c
  4649  0020C2  0E00               	movlw	0
  4650  0020C4  6E2C               	movwf	?___fttol+1,c
  4651  0020C6  0E00               	movlw	0
  4652  0020C8  6E2D               	movwf	?___fttol+2,c
  4653  0020CA  0E00               	movlw	0
  4654  0020CC  6E2E               	movwf	?___fttol+3,c
  4655  0020CE  0012               	return	
  4656  0020D0                     l588:
  4657  0020D0  90D8               	bcf	status,0,c
  4658  0020D2  3238               	rrcf	___fttol@lval+3,f,c
  4659  0020D4  3237               	rrcf	___fttol@lval+2,f,c
  4660  0020D6  3236               	rrcf	___fttol@lval+1,f,c
  4661  0020D8  3235               	rrcf	___fttol@lval,f,c
  4662  0020DA  3E39               	incfsz	___fttol@exp1,f,c
  4663  0020DC  D7F9               	goto	l588
  4664  0020DE  D015               	goto	u2970
  4665  0020E0                     l587:
  4666  0020E0  0E17               	movlw	23
  4667  0020E2  6439               	cpfsgt	___fttol@exp1,c
  4668  0020E4  D00F               	goto	l593
  4669  0020E6  0E00               	movlw	0
  4670  0020E8  6E2B               	movwf	?___fttol,c
  4671  0020EA  0E00               	movlw	0
  4672  0020EC  6E2C               	movwf	?___fttol+1,c
  4673  0020EE  0E00               	movlw	0
  4674  0020F0  6E2D               	movwf	?___fttol+2,c
  4675  0020F2  0E00               	movlw	0
  4676  0020F4  6E2E               	movwf	?___fttol+3,c
  4677  0020F6  0012               	return	
  4678  0020F8  90D8               	bcf	status,0,c
  4679  0020FA  3635               	rlcf	___fttol@lval,f,c
  4680  0020FC  3636               	rlcf	___fttol@lval+1,f,c
  4681  0020FE  3637               	rlcf	___fttol@lval+2,f,c
  4682  002100  3638               	rlcf	___fttol@lval+3,f,c
  4683  002102  0639               	decf	___fttol@exp1,f,c
  4684  002104                     l593:
  4685  002104  5039               	movf	___fttol@exp1,w,c
  4686  002106  A4D8               	btfss	status,2,c
  4687  002108  D7F7               	goto	l594
  4688  00210A                     u2970:
  4689  00210A  5034               	movf	___fttol@sign1,w,c
  4690  00210C  B4D8               	btfsc	status,2,c
  4691  00210E  D008               	goto	l596
  4692  002110  1E38               	comf	___fttol@lval+3,f,c
  4693  002112  1E37               	comf	___fttol@lval+2,f,c
  4694  002114  1E36               	comf	___fttol@lval+1,f,c
  4695  002116  6C35               	negf	___fttol@lval,c
  4696  002118  0E00               	movlw	0
  4697  00211A  2236               	addwfc	___fttol@lval+1,f,c
  4698  00211C  2237               	addwfc	___fttol@lval+2,f,c
  4699  00211E  2238               	addwfc	___fttol@lval+3,f,c
  4700  002120                     l596:
  4701  002120  C035  F02B         	movff	___fttol@lval,?___fttol
  4702  002124  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4703  002128  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4704  00212C  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4705  002130  0012               	return	
  4706  002132                     __end_of___fttol:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           prodh	equ	0xFF4
  4713                           prodl	equ	0xFF3
  4714                           wreg	equ	0xFE8
  4715                           postinc2	equ	0xFDE
  4716                           postdec2	equ	0xFDD
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function ___ftsub *****************
  4722 ;; Defined at:
  4723 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;  f1              3   57[COMRAM] float 
  4726 ;;  f2              3   60[COMRAM] float 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;		None
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  3   57[COMRAM] float 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4738 ;;      Params:         6       0       0       0       0       0       0       0       0
  4739 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4741 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4742 ;;Total ram usage:        6 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    2
  4745 ;; This function calls:
  4746 ;;		___ftadd
  4747 ;; This function is called by:
  4748 ;;		_printf
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           	psect	text17
  4753  00258E                     __ptext17:
  4754                           	opt stack 0
  4755  00258E                     ___ftsub:
  4756                           	opt stack 27
  4757                           
  4758                           ;incstack = 0
  4759  00258E  503D               	movf	___ftsub@f2,w,c
  4760  002590  103E               	iorwf	___ftsub@f2+1,w,c
  4761  002592  103F               	iorwf	___ftsub@f2+2,w,c
  4762  002594  B4D8               	btfsc	status,2,c
  4763  002596  D006               	goto	l581
  4764  002598  0E00               	movlw	0
  4765  00259A  1A3D               	xorwf	___ftsub@f2,f,c
  4766  00259C  0E00               	movlw	0
  4767  00259E  1A3E               	xorwf	___ftsub@f2+1,f,c
  4768  0025A0  0E80               	movlw	128
  4769  0025A2  1A3F               	xorwf	___ftsub@f2+2,f,c
  4770  0025A4                     l581:
  4771  0025A4  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4772  0025A8  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4773  0025AC  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4774  0025B0  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4775  0025B4  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4776  0025B8  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4777  0025BC  EC28  F00D         	call	___ftadd	;wreg free
  4778  0025C0  C02E  F03A         	movff	?___ftadd,?___ftsub
  4779  0025C4  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4780  0025C8  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4781  0025CC  0012               	return	
  4782  0025CE                     __end_of___ftsub:
  4783                           	opt stack 0
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           wreg	equ	0xFE8
  4791                           postinc2	equ	0xFDE
  4792                           postdec2	equ	0xFDD
  4793                           fsr2h	equ	0xFDA
  4794                           fsr2l	equ	0xFD9
  4795                           status	equ	0xFD8
  4796                           
  4797 ;; *************** function ___ftadd *****************
  4798 ;; Defined at:
  4799 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;  f1              3   45[COMRAM] float 
  4802 ;;  f2              3   48[COMRAM] float 
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;  exp1            1   56[COMRAM] unsigned char 
  4805 ;;  exp2            1   55[COMRAM] unsigned char 
  4806 ;;  sign            1   54[COMRAM] unsigned char 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  3   45[COMRAM] float 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4816 ;;      Params:         6       0       0       0       0       0       0       0       0
  4817 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4818 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4819 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4820 ;;Total ram usage:       12 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    1
  4823 ;; This function calls:
  4824 ;;		___ftpack
  4825 ;; This function is called by:
  4826 ;;		_printf
  4827 ;;		___ftsub
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	text18
  4832  001A50                     __ptext18:
  4833                           	opt stack 0
  4834  001A50                     ___ftadd:
  4835                           	opt stack 27
  4836                           
  4837                           ;incstack = 0
  4838  001A50  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4839  001A54  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4840  001A56  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4841  001A58  342F               	rlcf	___ftadd@f1+1,w,c
  4842  001A5A  3634               	rlcf	??___ftadd& (0+255),f,c
  4843  001A5C  E301               	bnc	u2221
  4844  001A5E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4845  001A60                     u2221:
  4846  001A60  5034               	movf	??___ftadd,w,c
  4847  001A62  6E39               	movwf	___ftadd@exp1,c
  4848  001A64  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4849  001A68  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4850  001A6A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4851  001A6C  3432               	rlcf	___ftadd@f2+1,w,c
  4852  001A6E  3634               	rlcf	??___ftadd& (0+255),f,c
  4853  001A70  E301               	bnc	u2231
  4854  001A72  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4855  001A74                     u2231:
  4856  001A74  5034               	movf	??___ftadd,w,c
  4857  001A76  6E38               	movwf	___ftadd@exp2,c
  4858  001A78  5039               	movf	___ftadd@exp1,w,c
  4859  001A7A  B4D8               	btfsc	status,2,c
  4860  001A7C  D00B               	goto	u2260
  4861  001A7E  5038               	movf	___ftadd@exp2,w,c
  4862  001A80  5C39               	subwf	___ftadd@exp1,w,c
  4863  001A82  B0D8               	btfsc	status,0,c
  4864  001A84  D00E               	goto	l499
  4865  001A86  5039               	movf	___ftadd@exp1,w,c
  4866  001A88  0800               	sublw	0
  4867  001A8A  2438               	addwf	___ftadd@exp2,w,c
  4868  001A8C  6E34               	movwf	??___ftadd& (0+255),c
  4869  001A8E  0E18               	movlw	24
  4870  001A90  6434               	cpfsgt	??___ftadd,c
  4871  001A92  D007               	goto	l499
  4872  001A94                     u2260:
  4873  001A94  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4874  001A98  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4875  001A9C  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4876  001AA0  0012               	return	
  4877  001AA2                     l499:
  4878  001AA2  5038               	movf	___ftadd@exp2,w,c
  4879  001AA4  B4D8               	btfsc	status,2,c
  4880  001AA6  D00B               	goto	u2290
  4881  001AA8  5039               	movf	___ftadd@exp1,w,c
  4882  001AAA  5C38               	subwf	___ftadd@exp2,w,c
  4883  001AAC  B0D8               	btfsc	status,0,c
  4884  001AAE  D00E               	goto	l503
  4885  001AB0  5038               	movf	___ftadd@exp2,w,c
  4886  001AB2  0800               	sublw	0
  4887  001AB4  2439               	addwf	___ftadd@exp1,w,c
  4888  001AB6  6E34               	movwf	??___ftadd& (0+255),c
  4889  001AB8  0E18               	movlw	24
  4890  001ABA  6434               	cpfsgt	??___ftadd,c
  4891  001ABC  D007               	goto	l503
  4892  001ABE                     u2290:
  4893  001ABE  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4894  001AC2  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4895  001AC6  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4896  001ACA  0012               	return	
  4897  001ACC                     l503:
  4898  001ACC  0E06               	movlw	6
  4899  001ACE  6E37               	movwf	___ftadd@sign,c
  4900  001AD0  BE30               	btfsc	___ftadd@f1+2,7,c
  4901  001AD2  8E37               	bsf	___ftadd@sign,7,c
  4902  001AD4  BE33               	btfsc	___ftadd@f2+2,7,c
  4903  001AD6  8C37               	bsf	___ftadd@sign,6,c
  4904  001AD8  8E2F               	bsf	___ftadd@f1+1,7,c
  4905  001ADA  0EFF               	movlw	255
  4906  001ADC  162E               	andwf	___ftadd@f1,f,c
  4907  001ADE  0EFF               	movlw	255
  4908  001AE0  162F               	andwf	___ftadd@f1+1,f,c
  4909  001AE2  0E00               	movlw	0
  4910  001AE4  1630               	andwf	___ftadd@f1+2,f,c
  4911  001AE6  8E32               	bsf	___ftadd@f2+1,7,c
  4912  001AE8  0EFF               	movlw	255
  4913  001AEA  1631               	andwf	___ftadd@f2,f,c
  4914  001AEC  0EFF               	movlw	255
  4915  001AEE  1632               	andwf	___ftadd@f2+1,f,c
  4916  001AF0  0E00               	movlw	0
  4917  001AF2  1633               	andwf	___ftadd@f2+2,f,c
  4918  001AF4  5038               	movf	___ftadd@exp2,w,c
  4919  001AF6  5C39               	subwf	___ftadd@exp1,w,c
  4920  001AF8  B0D8               	btfsc	status,0,c
  4921  001AFA  D01B               	goto	l508
  4922  001AFC                     u2320:
  4923  001AFC  90D8               	bcf	status,0,c
  4924  001AFE  3631               	rlcf	___ftadd@f2,f,c
  4925  001B00  3632               	rlcf	___ftadd@f2+1,f,c
  4926  001B02  3633               	rlcf	___ftadd@f2+2,f,c
  4927  001B04  0638               	decf	___ftadd@exp2,f,c
  4928  001B06  5039               	movf	___ftadd@exp1,w,c
  4929  001B08  1838               	xorwf	___ftadd@exp2,w,c
  4930  001B0A  B4D8               	btfsc	status,2,c
  4931  001B0C  D00D               	goto	l513
  4932  001B0E  0637               	decf	___ftadd@sign,f,c
  4933  001B10  C037  F034         	movff	___ftadd@sign,??___ftadd
  4934  001B14  0E07               	movlw	7
  4935  001B16  1634               	andwf	??___ftadd,f,c
  4936  001B18  B4D8               	btfsc	status,2,c
  4937  001B1A  D006               	goto	l513
  4938  001B1C  D7EF               	goto	u2320
  4939  001B1E  90D8               	bcf	status,0,c
  4940  001B20  3230               	rrcf	___ftadd@f1+2,f,c
  4941  001B22  322F               	rrcf	___ftadd@f1+1,f,c
  4942  001B24  322E               	rrcf	___ftadd@f1,f,c
  4943  001B26  2A39               	incf	___ftadd@exp1,f,c
  4944  001B28                     l513:
  4945  001B28  5038               	movf	___ftadd@exp2,w,c
  4946  001B2A  1839               	xorwf	___ftadd@exp1,w,c
  4947  001B2C  B4D8               	btfsc	status,2,c
  4948  001B2E  D01F               	goto	u2390
  4949  001B30  D7F6               	goto	l514
  4950  001B32                     l508:
  4951  001B32  5039               	movf	___ftadd@exp1,w,c
  4952  001B34  5C38               	subwf	___ftadd@exp2,w,c
  4953  001B36  B0D8               	btfsc	status,0,c
  4954  001B38  D01A               	goto	u2390
  4955  001B3A                     u2360:
  4956  001B3A  90D8               	bcf	status,0,c
  4957  001B3C  362E               	rlcf	___ftadd@f1,f,c
  4958  001B3E  362F               	rlcf	___ftadd@f1+1,f,c
  4959  001B40  3630               	rlcf	___ftadd@f1+2,f,c
  4960  001B42  0639               	decf	___ftadd@exp1,f,c
  4961  001B44  5039               	movf	___ftadd@exp1,w,c
  4962  001B46  1838               	xorwf	___ftadd@exp2,w,c
  4963  001B48  B4D8               	btfsc	status,2,c
  4964  001B4A  D00D               	goto	l522
  4965  001B4C  0637               	decf	___ftadd@sign,f,c
  4966  001B4E  C037  F034         	movff	___ftadd@sign,??___ftadd
  4967  001B52  0E07               	movlw	7
  4968  001B54  1634               	andwf	??___ftadd,f,c
  4969  001B56  B4D8               	btfsc	status,2,c
  4970  001B58  D006               	goto	l522
  4971  001B5A  D7EF               	goto	u2360
  4972  001B5C  90D8               	bcf	status,0,c
  4973  001B5E  3233               	rrcf	___ftadd@f2+2,f,c
  4974  001B60  3232               	rrcf	___ftadd@f2+1,f,c
  4975  001B62  3231               	rrcf	___ftadd@f2,f,c
  4976  001B64  2A38               	incf	___ftadd@exp2,f,c
  4977  001B66                     l522:
  4978  001B66  5038               	movf	___ftadd@exp2,w,c
  4979  001B68  1839               	xorwf	___ftadd@exp1,w,c
  4980  001B6A  A4D8               	btfss	status,2,c
  4981  001B6C  D7F7               	goto	l523
  4982  001B6E                     u2390:
  4983  001B6E  AE37               	btfss	___ftadd@sign,7,c
  4984  001B70  D00C               	goto	l525
  4985  001B72  0EFF               	movlw	255
  4986  001B74  1A2E               	xorwf	___ftadd@f1,f,c
  4987  001B76  0EFF               	movlw	255
  4988  001B78  1A2F               	xorwf	___ftadd@f1+1,f,c
  4989  001B7A  0EFF               	movlw	255
  4990  001B7C  1A30               	xorwf	___ftadd@f1+2,f,c
  4991  001B7E  0E01               	movlw	1
  4992  001B80  262E               	addwf	___ftadd@f1,f,c
  4993  001B82  0E00               	movlw	0
  4994  001B84  222F               	addwfc	___ftadd@f1+1,f,c
  4995  001B86  0E00               	movlw	0
  4996  001B88  2230               	addwfc	___ftadd@f1+2,f,c
  4997  001B8A                     l525:
  4998  001B8A  AC37               	btfss	___ftadd@sign,6,c
  4999  001B8C  D00C               	goto	l526
  5000  001B8E  0EFF               	movlw	255
  5001  001B90  1A31               	xorwf	___ftadd@f2,f,c
  5002  001B92  0EFF               	movlw	255
  5003  001B94  1A32               	xorwf	___ftadd@f2+1,f,c
  5004  001B96  0EFF               	movlw	255
  5005  001B98  1A33               	xorwf	___ftadd@f2+2,f,c
  5006  001B9A  0E01               	movlw	1
  5007  001B9C  2631               	addwf	___ftadd@f2,f,c
  5008  001B9E  0E00               	movlw	0
  5009  001BA0  2232               	addwfc	___ftadd@f2+1,f,c
  5010  001BA2  0E00               	movlw	0
  5011  001BA4  2233               	addwfc	___ftadd@f2+2,f,c
  5012  001BA6                     l526:
  5013  001BA6  0E00               	movlw	0
  5014  001BA8  6E37               	movwf	___ftadd@sign,c
  5015  001BAA  502E               	movf	___ftadd@f1,w,c
  5016  001BAC  2631               	addwf	___ftadd@f2,f,c
  5017  001BAE  502F               	movf	___ftadd@f1+1,w,c
  5018  001BB0  2232               	addwfc	___ftadd@f2+1,f,c
  5019  001BB2  5030               	movf	___ftadd@f1+2,w,c
  5020  001BB4  2233               	addwfc	___ftadd@f2+2,f,c
  5021  001BB6  AE33               	btfss	___ftadd@f2+2,7,c
  5022  001BB8  D00E               	goto	l527
  5023  001BBA  0EFF               	movlw	255
  5024  001BBC  1A31               	xorwf	___ftadd@f2,f,c
  5025  001BBE  0EFF               	movlw	255
  5026  001BC0  1A32               	xorwf	___ftadd@f2+1,f,c
  5027  001BC2  0EFF               	movlw	255
  5028  001BC4  1A33               	xorwf	___ftadd@f2+2,f,c
  5029  001BC6  0E01               	movlw	1
  5030  001BC8  2631               	addwf	___ftadd@f2,f,c
  5031  001BCA  0E00               	movlw	0
  5032  001BCC  2232               	addwfc	___ftadd@f2+1,f,c
  5033  001BCE  0E00               	movlw	0
  5034  001BD0  2233               	addwfc	___ftadd@f2+2,f,c
  5035  001BD2  0E01               	movlw	1
  5036  001BD4  6E37               	movwf	___ftadd@sign,c
  5037  001BD6                     l527:
  5038  001BD6  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5039  001BDA  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5040  001BDE  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5041  001BE2  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5042  001BE6  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5043  001BEA  EC0C  F011         	call	___ftpack	;wreg free
  5044  001BEE  C001  F02E         	movff	?___ftpack,?___ftadd
  5045  001BF2  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5046  001BF6  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5047  001BFA  0012               	return	
  5048  001BFC                     __end_of___ftadd:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           wreg	equ	0xFE8
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function ___ftneg *****************
  5064 ;; Defined at:
  5065 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;  f1              3    0[COMRAM] float 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;		None
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  3    0[COMRAM] float 
  5072 ;; Registers used:
  5073 ;;		wreg, status,2, status,0
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5079 ;;      Params:         3       0       0       0       0       0       0       0       0
  5080 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5081 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5082 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5083 ;;Total ram usage:        3 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; This function calls:
  5086 ;;		Nothing
  5087 ;; This function is called by:
  5088 ;;		_printf
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           	psect	text19
  5093  0026F4                     __ptext19:
  5094                           	opt stack 0
  5095  0026F4                     ___ftneg:
  5096                           	opt stack 29
  5097                           
  5098                           ;incstack = 0
  5099  0026F4  5001               	movf	___ftneg@f1,w,c
  5100  0026F6  1002               	iorwf	___ftneg@f1+1,w,c
  5101  0026F8  1003               	iorwf	___ftneg@f1+2,w,c
  5102  0026FA  B4D8               	btfsc	status,2,c
  5103  0026FC  D006               	goto	l575
  5104  0026FE  0E00               	movlw	0
  5105  002700  1A01               	xorwf	___ftneg@f1,f,c
  5106  002702  0E00               	movlw	0
  5107  002704  1A02               	xorwf	___ftneg@f1+1,f,c
  5108  002706  0E80               	movlw	128
  5109  002708  1A03               	xorwf	___ftneg@f1+2,f,c
  5110  00270A                     l575:
  5111  00270A  C001  F001         	movff	___ftneg@f1,?___ftneg
  5112  00270E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5113  002712  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5114  002716  0012               	return		;funcret
  5115  002718                     __end_of___ftneg:
  5116                           	opt stack 0
  5117                           tblptru	equ	0xFF8
  5118                           tblptrh	equ	0xFF7
  5119                           tblptrl	equ	0xFF6
  5120                           tablat	equ	0xFF5
  5121                           prodh	equ	0xFF4
  5122                           prodl	equ	0xFF3
  5123                           wreg	equ	0xFE8
  5124                           postinc2	equ	0xFDE
  5125                           postdec2	equ	0xFDD
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function ___ftge *****************
  5131 ;; Defined at:
  5132 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;  ff1             3    0[COMRAM] float 
  5135 ;;  ff2             3    3[COMRAM] float 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;		None
  5138 ;; Return value:  Size  Location     Type
  5139 ;;		None               void
  5140 ;; Registers used:
  5141 ;;		wreg, status,2, status,0
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5147 ;;      Params:         6       0       0       0       0       0       0       0       0
  5148 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5149 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5150 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5151 ;;Total ram usage:        9 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_main
  5157 ;;		_printf
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text20
  5162  0022C6                     __ptext20:
  5163                           	opt stack 0
  5164  0022C6                     ___ftge:
  5165                           	opt stack 29
  5166                           
  5167                           ;incstack = 0
  5168  0022C6  AE03               	btfss	___ftge@ff1+2,7,c
  5169  0022C8  D016               	goto	l557
  5170  0022CA  C001  F007         	movff	___ftge@ff1,??___ftge
  5171  0022CE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5172  0022D2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5173  0022D6  1E07               	comf	??___ftge,f,c
  5174  0022D8  1E08               	comf	??___ftge+1,f,c
  5175  0022DA  1E09               	comf	??___ftge+2,f,c
  5176  0022DC  2A07               	incf	??___ftge,f,c
  5177  0022DE  0E00               	movlw	0
  5178  0022E0  2208               	addwfc	??___ftge+1,f,c
  5179  0022E2  2209               	addwfc	??___ftge+2,f,c
  5180  0022E4  0E00               	movlw	0
  5181  0022E6  2407               	addwf	??___ftge,w,c
  5182  0022E8  6E01               	movwf	___ftge@ff1,c
  5183  0022EA  0E00               	movlw	0
  5184  0022EC  2008               	addwfc	??___ftge+1,w,c
  5185  0022EE  6E02               	movwf	___ftge@ff1+1,c
  5186  0022F0  0E80               	movlw	128
  5187  0022F2  2009               	addwfc	??___ftge+2,w,c
  5188  0022F4  6E03               	movwf	___ftge@ff1+2,c
  5189  0022F6                     l557:
  5190  0022F6  AE06               	btfss	___ftge@ff2+2,7,c
  5191  0022F8  D016               	goto	l558
  5192  0022FA  C004  F007         	movff	___ftge@ff2,??___ftge
  5193  0022FE  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5194  002302  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5195  002306  1E07               	comf	??___ftge,f,c
  5196  002308  1E08               	comf	??___ftge+1,f,c
  5197  00230A  1E09               	comf	??___ftge+2,f,c
  5198  00230C  2A07               	incf	??___ftge,f,c
  5199  00230E  0E00               	movlw	0
  5200  002310  2208               	addwfc	??___ftge+1,f,c
  5201  002312  2209               	addwfc	??___ftge+2,f,c
  5202  002314  0E00               	movlw	0
  5203  002316  2407               	addwf	??___ftge,w,c
  5204  002318  6E04               	movwf	___ftge@ff2,c
  5205  00231A  0E00               	movlw	0
  5206  00231C  2008               	addwfc	??___ftge+1,w,c
  5207  00231E  6E05               	movwf	___ftge@ff2+1,c
  5208  002320  0E80               	movlw	128
  5209  002322  2009               	addwfc	??___ftge+2,w,c
  5210  002324  6E06               	movwf	___ftge@ff2+2,c
  5211  002326                     l558:
  5212  002326  0E00               	movlw	0
  5213  002328  1A01               	xorwf	___ftge@ff1,f,c
  5214  00232A  0E00               	movlw	0
  5215  00232C  1A02               	xorwf	___ftge@ff1+1,f,c
  5216  00232E  0E80               	movlw	128
  5217  002330  1A03               	xorwf	___ftge@ff1+2,f,c
  5218  002332  0E00               	movlw	0
  5219  002334  1A04               	xorwf	___ftge@ff2,f,c
  5220  002336  0E00               	movlw	0
  5221  002338  1A05               	xorwf	___ftge@ff2+1,f,c
  5222  00233A  0E80               	movlw	128
  5223  00233C  1A06               	xorwf	___ftge@ff2+2,f,c
  5224  00233E  5004               	movf	___ftge@ff2,w,c
  5225  002340  5C01               	subwf	___ftge@ff1,w,c
  5226  002342  5005               	movf	___ftge@ff2+1,w,c
  5227  002344  5802               	subwfb	___ftge@ff1+1,w,c
  5228  002346  5006               	movf	___ftge@ff2+2,w,c
  5229  002348  5803               	subwfb	___ftge@ff1+2,w,c
  5230  00234A  B0D8               	btfsc	status,0,c
  5231  00234C  D002               	goto	l2025
  5232  00234E  90D8               	bcf	status,0,c
  5233  002350  0012               	return	
  5234  002352                     l2025:
  5235  002352  80D8               	bsf	status,0,c
  5236  002354  0012               	return	
  5237  002356                     __end_of___ftge:
  5238                           	opt stack 0
  5239                           tblptru	equ	0xFF8
  5240                           tblptrh	equ	0xFF7
  5241                           tblptrl	equ	0xFF6
  5242                           tablat	equ	0xFF5
  5243                           prodh	equ	0xFF4
  5244                           prodl	equ	0xFF3
  5245                           wreg	equ	0xFE8
  5246                           postinc2	equ	0xFDE
  5247                           postdec2	equ	0xFDD
  5248                           fsr2h	equ	0xFDA
  5249                           fsr2l	equ	0xFD9
  5250                           status	equ	0xFD8
  5251                           
  5252 ;; *************** function _posicionar_cursor *****************
  5253 ;; Defined at:
  5254 ;;		line 79 in file "newmain.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  linha           2    3[COMRAM] int 
  5257 ;;  coluna          2    5[COMRAM] int 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5269 ;;      Params:         4       0       0       0       0       0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5272 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5273 ;;Total ram usage:        4 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    2
  5276 ;; This function calls:
  5277 ;;		_enviar_comando_lcd
  5278 ;; This function is called by:
  5279 ;;		_main
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text21
  5284  0014E0                     __ptext21:
  5285                           	opt stack 0
  5286  0014E0                     _posicionar_cursor:
  5287                           	opt stack 28
  5288                           
  5289                           ;newmain.c: 82: if ((linha == 1) && (coluna == 1)) enviar_comando_lcd(0b10000000);
  5290                           
  5291                           ;incstack = 0
  5292  0014E0  0404               	decf	posicionar_cursor@linha,w,c
  5293  0014E2  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5294  0014E4  A4D8               	btfss	status,2,c
  5295  0014E6  D007               	goto	l70
  5296  0014E8  0406               	decf	posicionar_cursor@coluna,w,c
  5297  0014EA  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5298  0014EC  A4D8               	btfss	status,2,c
  5299  0014EE  D003               	goto	l70
  5300  0014F0  0E80               	movlw	128
  5301  0014F2  EC54  F013         	call	_enviar_comando_lcd
  5302  0014F6                     l70:
  5303                           
  5304                           ;newmain.c: 83: if ((linha == 1) && (coluna == 2)) enviar_comando_lcd(0b10000001);
  5305  0014F6  0404               	decf	posicionar_cursor@linha,w,c
  5306  0014F8  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5307  0014FA  A4D8               	btfss	status,2,c
  5308  0014FC  D008               	goto	l71
  5309  0014FE  0E02               	movlw	2
  5310  001500  1806               	xorwf	posicionar_cursor@coluna,w,c
  5311  001502  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5312  001504  A4D8               	btfss	status,2,c
  5313  001506  D003               	goto	l71
  5314  001508  0E81               	movlw	129
  5315  00150A  EC54  F013         	call	_enviar_comando_lcd
  5316  00150E                     l71:
  5317                           
  5318                           ;newmain.c: 84: if ((linha == 1) && (coluna == 3)) enviar_comando_lcd(0b10000010);
  5319  00150E  0404               	decf	posicionar_cursor@linha,w,c
  5320  001510  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5321  001512  A4D8               	btfss	status,2,c
  5322  001514  D008               	goto	l72
  5323  001516  0E03               	movlw	3
  5324  001518  1806               	xorwf	posicionar_cursor@coluna,w,c
  5325  00151A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5326  00151C  A4D8               	btfss	status,2,c
  5327  00151E  D003               	goto	l72
  5328  001520  0E82               	movlw	130
  5329  001522  EC54  F013         	call	_enviar_comando_lcd
  5330  001526                     l72:
  5331                           
  5332                           ;newmain.c: 85: if ((linha == 1) && (coluna == 4)) enviar_comando_lcd(0b10000011);
  5333  001526  0404               	decf	posicionar_cursor@linha,w,c
  5334  001528  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5335  00152A  A4D8               	btfss	status,2,c
  5336  00152C  D008               	goto	l73
  5337  00152E  0E04               	movlw	4
  5338  001530  1806               	xorwf	posicionar_cursor@coluna,w,c
  5339  001532  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5340  001534  A4D8               	btfss	status,2,c
  5341  001536  D003               	goto	l73
  5342  001538  0E83               	movlw	131
  5343  00153A  EC54  F013         	call	_enviar_comando_lcd
  5344  00153E                     l73:
  5345                           
  5346                           ;newmain.c: 86: if ((linha == 1) && (coluna == 5)) enviar_comando_lcd(0b10000100);
  5347  00153E  0404               	decf	posicionar_cursor@linha,w,c
  5348  001540  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5349  001542  A4D8               	btfss	status,2,c
  5350  001544  D008               	goto	l74
  5351  001546  0E05               	movlw	5
  5352  001548  1806               	xorwf	posicionar_cursor@coluna,w,c
  5353  00154A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5354  00154C  A4D8               	btfss	status,2,c
  5355  00154E  D003               	goto	l74
  5356  001550  0E84               	movlw	132
  5357  001552  EC54  F013         	call	_enviar_comando_lcd
  5358  001556                     l74:
  5359                           
  5360                           ;newmain.c: 87: if ((linha == 1) && (coluna == 6)) enviar_comando_lcd(0b10000101);
  5361  001556  0404               	decf	posicionar_cursor@linha,w,c
  5362  001558  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5363  00155A  A4D8               	btfss	status,2,c
  5364  00155C  D008               	goto	l75
  5365  00155E  0E06               	movlw	6
  5366  001560  1806               	xorwf	posicionar_cursor@coluna,w,c
  5367  001562  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5368  001564  A4D8               	btfss	status,2,c
  5369  001566  D003               	goto	l75
  5370  001568  0E85               	movlw	133
  5371  00156A  EC54  F013         	call	_enviar_comando_lcd
  5372  00156E                     l75:
  5373                           
  5374                           ;newmain.c: 88: if ((linha == 1) && (coluna == 7)) enviar_comando_lcd(0b10000110);
  5375  00156E  0404               	decf	posicionar_cursor@linha,w,c
  5376  001570  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5377  001572  A4D8               	btfss	status,2,c
  5378  001574  D008               	goto	l76
  5379  001576  0E07               	movlw	7
  5380  001578  1806               	xorwf	posicionar_cursor@coluna,w,c
  5381  00157A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5382  00157C  A4D8               	btfss	status,2,c
  5383  00157E  D003               	goto	l76
  5384  001580  0E86               	movlw	134
  5385  001582  EC54  F013         	call	_enviar_comando_lcd
  5386  001586                     l76:
  5387                           
  5388                           ;newmain.c: 89: if ((linha == 1) && (coluna == 8)) enviar_comando_lcd(0b10000111);
  5389  001586  0404               	decf	posicionar_cursor@linha,w,c
  5390  001588  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5391  00158A  A4D8               	btfss	status,2,c
  5392  00158C  D008               	goto	l77
  5393  00158E  0E08               	movlw	8
  5394  001590  1806               	xorwf	posicionar_cursor@coluna,w,c
  5395  001592  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5396  001594  A4D8               	btfss	status,2,c
  5397  001596  D003               	goto	l77
  5398  001598  0E87               	movlw	135
  5399  00159A  EC54  F013         	call	_enviar_comando_lcd
  5400  00159E                     l77:
  5401                           
  5402                           ;newmain.c: 90: if ((linha == 1) && (coluna == 9)) enviar_comando_lcd(0b10001000);
  5403  00159E  0404               	decf	posicionar_cursor@linha,w,c
  5404  0015A0  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5405  0015A2  A4D8               	btfss	status,2,c
  5406  0015A4  D008               	goto	l78
  5407  0015A6  0E09               	movlw	9
  5408  0015A8  1806               	xorwf	posicionar_cursor@coluna,w,c
  5409  0015AA  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5410  0015AC  A4D8               	btfss	status,2,c
  5411  0015AE  D003               	goto	l78
  5412  0015B0  0E88               	movlw	136
  5413  0015B2  EC54  F013         	call	_enviar_comando_lcd
  5414  0015B6                     l78:
  5415                           
  5416                           ;newmain.c: 91: if ((linha == 1) && (coluna == 10)) enviar_comando_lcd(0b10001001);
  5417  0015B6  0404               	decf	posicionar_cursor@linha,w,c
  5418  0015B8  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5419  0015BA  A4D8               	btfss	status,2,c
  5420  0015BC  D008               	goto	l79
  5421  0015BE  0E0A               	movlw	10
  5422  0015C0  1806               	xorwf	posicionar_cursor@coluna,w,c
  5423  0015C2  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5424  0015C4  A4D8               	btfss	status,2,c
  5425  0015C6  D003               	goto	l79
  5426  0015C8  0E89               	movlw	137
  5427  0015CA  EC54  F013         	call	_enviar_comando_lcd
  5428  0015CE                     l79:
  5429                           
  5430                           ;newmain.c: 92: if ((linha == 1) && (coluna == 11)) enviar_comando_lcd(0b10001010);
  5431  0015CE  0404               	decf	posicionar_cursor@linha,w,c
  5432  0015D0  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5433  0015D2  A4D8               	btfss	status,2,c
  5434  0015D4  D008               	goto	l80
  5435  0015D6  0E0B               	movlw	11
  5436  0015D8  1806               	xorwf	posicionar_cursor@coluna,w,c
  5437  0015DA  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5438  0015DC  A4D8               	btfss	status,2,c
  5439  0015DE  D003               	goto	l80
  5440  0015E0  0E8A               	movlw	138
  5441  0015E2  EC54  F013         	call	_enviar_comando_lcd
  5442  0015E6                     l80:
  5443                           
  5444                           ;newmain.c: 93: if ((linha == 1) && (coluna == 12)) enviar_comando_lcd(0b10001011);
  5445  0015E6  0404               	decf	posicionar_cursor@linha,w,c
  5446  0015E8  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5447  0015EA  A4D8               	btfss	status,2,c
  5448  0015EC  D008               	goto	l81
  5449  0015EE  0E0C               	movlw	12
  5450  0015F0  1806               	xorwf	posicionar_cursor@coluna,w,c
  5451  0015F2  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5452  0015F4  A4D8               	btfss	status,2,c
  5453  0015F6  D003               	goto	l81
  5454  0015F8  0E8B               	movlw	139
  5455  0015FA  EC54  F013         	call	_enviar_comando_lcd
  5456  0015FE                     l81:
  5457                           
  5458                           ;newmain.c: 94: if ((linha == 1) && (coluna == 13)) enviar_comando_lcd(0b10001100);
  5459  0015FE  0404               	decf	posicionar_cursor@linha,w,c
  5460  001600  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5461  001602  A4D8               	btfss	status,2,c
  5462  001604  D008               	goto	l82
  5463  001606  0E0D               	movlw	13
  5464  001608  1806               	xorwf	posicionar_cursor@coluna,w,c
  5465  00160A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5466  00160C  A4D8               	btfss	status,2,c
  5467  00160E  D003               	goto	l82
  5468  001610  0E8C               	movlw	140
  5469  001612  EC54  F013         	call	_enviar_comando_lcd
  5470  001616                     l82:
  5471                           
  5472                           ;newmain.c: 95: if ((linha == 1) && (coluna == 14)) enviar_comando_lcd(0b10001101);
  5473  001616  0404               	decf	posicionar_cursor@linha,w,c
  5474  001618  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5475  00161A  A4D8               	btfss	status,2,c
  5476  00161C  D008               	goto	l83
  5477  00161E  0E0E               	movlw	14
  5478  001620  1806               	xorwf	posicionar_cursor@coluna,w,c
  5479  001622  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5480  001624  A4D8               	btfss	status,2,c
  5481  001626  D003               	goto	l83
  5482  001628  0E8D               	movlw	141
  5483  00162A  EC54  F013         	call	_enviar_comando_lcd
  5484  00162E                     l83:
  5485                           
  5486                           ;newmain.c: 96: if ((linha == 1) && (coluna == 15)) enviar_comando_lcd(0b10001110);
  5487  00162E  0404               	decf	posicionar_cursor@linha,w,c
  5488  001630  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5489  001632  A4D8               	btfss	status,2,c
  5490  001634  D008               	goto	l84
  5491  001636  0E0F               	movlw	15
  5492  001638  1806               	xorwf	posicionar_cursor@coluna,w,c
  5493  00163A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5494  00163C  A4D8               	btfss	status,2,c
  5495  00163E  D003               	goto	l84
  5496  001640  0E8E               	movlw	142
  5497  001642  EC54  F013         	call	_enviar_comando_lcd
  5498  001646                     l84:
  5499                           
  5500                           ;newmain.c: 97: if ((linha == 1) && (coluna == 16)) enviar_comando_lcd(0b10001111);
  5501  001646  0404               	decf	posicionar_cursor@linha,w,c
  5502  001648  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5503  00164A  A4D8               	btfss	status,2,c
  5504  00164C  D008               	goto	l85
  5505  00164E  0E10               	movlw	16
  5506  001650  1806               	xorwf	posicionar_cursor@coluna,w,c
  5507  001652  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5508  001654  A4D8               	btfss	status,2,c
  5509  001656  D003               	goto	l85
  5510  001658  0E8F               	movlw	143
  5511  00165A  EC54  F013         	call	_enviar_comando_lcd
  5512  00165E                     l85:
  5513                           
  5514                           ;newmain.c: 99: if ((linha == 2) && (coluna == 1)) enviar_comando_lcd(0b11000000);
  5515  00165E  0E02               	movlw	2
  5516  001660  1804               	xorwf	posicionar_cursor@linha,w,c
  5517  001662  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5518  001664  A4D8               	btfss	status,2,c
  5519  001666  D007               	goto	l86
  5520  001668  0406               	decf	posicionar_cursor@coluna,w,c
  5521  00166A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5522  00166C  A4D8               	btfss	status,2,c
  5523  00166E  D003               	goto	l86
  5524  001670  0EC0               	movlw	192
  5525  001672  EC54  F013         	call	_enviar_comando_lcd
  5526  001676                     l86:
  5527                           
  5528                           ;newmain.c: 100: if ((linha == 2) && (coluna == 2)) enviar_comando_lcd(0b11000001);
  5529  001676  0E02               	movlw	2
  5530  001678  1804               	xorwf	posicionar_cursor@linha,w,c
  5531  00167A  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5532  00167C  A4D8               	btfss	status,2,c
  5533  00167E  D008               	goto	l87
  5534  001680  0E02               	movlw	2
  5535  001682  1806               	xorwf	posicionar_cursor@coluna,w,c
  5536  001684  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5537  001686  A4D8               	btfss	status,2,c
  5538  001688  D003               	goto	l87
  5539  00168A  0EC1               	movlw	193
  5540  00168C  EC54  F013         	call	_enviar_comando_lcd
  5541  001690                     l87:
  5542                           
  5543                           ;newmain.c: 101: if ((linha == 2) && (coluna == 3)) enviar_comando_lcd(0b11000010);
  5544  001690  0E02               	movlw	2
  5545  001692  1804               	xorwf	posicionar_cursor@linha,w,c
  5546  001694  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5547  001696  A4D8               	btfss	status,2,c
  5548  001698  D008               	goto	l88
  5549  00169A  0E03               	movlw	3
  5550  00169C  1806               	xorwf	posicionar_cursor@coluna,w,c
  5551  00169E  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5552  0016A0  A4D8               	btfss	status,2,c
  5553  0016A2  D003               	goto	l88
  5554  0016A4  0EC2               	movlw	194
  5555  0016A6  EC54  F013         	call	_enviar_comando_lcd
  5556  0016AA                     l88:
  5557                           
  5558                           ;newmain.c: 102: if ((linha == 2) && (coluna == 4)) enviar_comando_lcd(0b11000011);
  5559  0016AA  0E02               	movlw	2
  5560  0016AC  1804               	xorwf	posicionar_cursor@linha,w,c
  5561  0016AE  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5562  0016B0  A4D8               	btfss	status,2,c
  5563  0016B2  D008               	goto	l89
  5564  0016B4  0E04               	movlw	4
  5565  0016B6  1806               	xorwf	posicionar_cursor@coluna,w,c
  5566  0016B8  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5567  0016BA  A4D8               	btfss	status,2,c
  5568  0016BC  D003               	goto	l89
  5569  0016BE  0EC3               	movlw	195
  5570  0016C0  EC54  F013         	call	_enviar_comando_lcd
  5571  0016C4                     l89:
  5572                           
  5573                           ;newmain.c: 103: if ((linha == 2) && (coluna == 5)) enviar_comando_lcd(0b11000100);
  5574  0016C4  0E02               	movlw	2
  5575  0016C6  1804               	xorwf	posicionar_cursor@linha,w,c
  5576  0016C8  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5577  0016CA  A4D8               	btfss	status,2,c
  5578  0016CC  D008               	goto	l90
  5579  0016CE  0E05               	movlw	5
  5580  0016D0  1806               	xorwf	posicionar_cursor@coluna,w,c
  5581  0016D2  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5582  0016D4  A4D8               	btfss	status,2,c
  5583  0016D6  D003               	goto	l90
  5584  0016D8  0EC4               	movlw	196
  5585  0016DA  EC54  F013         	call	_enviar_comando_lcd
  5586  0016DE                     l90:
  5587                           
  5588                           ;newmain.c: 104: if ((linha == 2) && (coluna == 6)) enviar_comando_lcd(0b11000101);
  5589  0016DE  0E02               	movlw	2
  5590  0016E0  1804               	xorwf	posicionar_cursor@linha,w,c
  5591  0016E2  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5592  0016E4  A4D8               	btfss	status,2,c
  5593  0016E6  D008               	goto	l91
  5594  0016E8  0E06               	movlw	6
  5595  0016EA  1806               	xorwf	posicionar_cursor@coluna,w,c
  5596  0016EC  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5597  0016EE  A4D8               	btfss	status,2,c
  5598  0016F0  D003               	goto	l91
  5599  0016F2  0EC5               	movlw	197
  5600  0016F4  EC54  F013         	call	_enviar_comando_lcd
  5601  0016F8                     l91:
  5602                           
  5603                           ;newmain.c: 105: if ((linha == 2) && (coluna == 7)) enviar_comando_lcd(0b11000110);
  5604  0016F8  0E02               	movlw	2
  5605  0016FA  1804               	xorwf	posicionar_cursor@linha,w,c
  5606  0016FC  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5607  0016FE  A4D8               	btfss	status,2,c
  5608  001700  D008               	goto	l92
  5609  001702  0E07               	movlw	7
  5610  001704  1806               	xorwf	posicionar_cursor@coluna,w,c
  5611  001706  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5612  001708  A4D8               	btfss	status,2,c
  5613  00170A  D003               	goto	l92
  5614  00170C  0EC6               	movlw	198
  5615  00170E  EC54  F013         	call	_enviar_comando_lcd
  5616  001712                     l92:
  5617                           
  5618                           ;newmain.c: 106: if ((linha == 2) && (coluna == 8)) enviar_comando_lcd(0b11000111);
  5619  001712  0E02               	movlw	2
  5620  001714  1804               	xorwf	posicionar_cursor@linha,w,c
  5621  001716  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5622  001718  A4D8               	btfss	status,2,c
  5623  00171A  D008               	goto	l93
  5624  00171C  0E08               	movlw	8
  5625  00171E  1806               	xorwf	posicionar_cursor@coluna,w,c
  5626  001720  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5627  001722  A4D8               	btfss	status,2,c
  5628  001724  D003               	goto	l93
  5629  001726  0EC7               	movlw	199
  5630  001728  EC54  F013         	call	_enviar_comando_lcd
  5631  00172C                     l93:
  5632                           
  5633                           ;newmain.c: 107: if ((linha == 2) && (coluna == 9)) enviar_comando_lcd(0b11001000);
  5634  00172C  0E02               	movlw	2
  5635  00172E  1804               	xorwf	posicionar_cursor@linha,w,c
  5636  001730  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5637  001732  A4D8               	btfss	status,2,c
  5638  001734  D008               	goto	l94
  5639  001736  0E09               	movlw	9
  5640  001738  1806               	xorwf	posicionar_cursor@coluna,w,c
  5641  00173A  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5642  00173C  A4D8               	btfss	status,2,c
  5643  00173E  D003               	goto	l94
  5644  001740  0EC8               	movlw	200
  5645  001742  EC54  F013         	call	_enviar_comando_lcd
  5646  001746                     l94:
  5647                           
  5648                           ;newmain.c: 108: if ((linha == 2) && (coluna == 10)) enviar_comando_lcd(0b11001001);
  5649  001746  0E02               	movlw	2
  5650  001748  1804               	xorwf	posicionar_cursor@linha,w,c
  5651  00174A  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5652  00174C  A4D8               	btfss	status,2,c
  5653  00174E  D008               	goto	l95
  5654  001750  0E0A               	movlw	10
  5655  001752  1806               	xorwf	posicionar_cursor@coluna,w,c
  5656  001754  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5657  001756  A4D8               	btfss	status,2,c
  5658  001758  D003               	goto	l95
  5659  00175A  0EC9               	movlw	201
  5660  00175C  EC54  F013         	call	_enviar_comando_lcd
  5661  001760                     l95:
  5662                           
  5663                           ;newmain.c: 109: if ((linha == 2) && (coluna == 11)) enviar_comando_lcd(0b11001010);
  5664  001760  0E02               	movlw	2
  5665  001762  1804               	xorwf	posicionar_cursor@linha,w,c
  5666  001764  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5667  001766  A4D8               	btfss	status,2,c
  5668  001768  D008               	goto	l96
  5669  00176A  0E0B               	movlw	11
  5670  00176C  1806               	xorwf	posicionar_cursor@coluna,w,c
  5671  00176E  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5672  001770  A4D8               	btfss	status,2,c
  5673  001772  D003               	goto	l96
  5674  001774  0ECA               	movlw	202
  5675  001776  EC54  F013         	call	_enviar_comando_lcd
  5676  00177A                     l96:
  5677                           
  5678                           ;newmain.c: 110: if ((linha == 2) && (coluna == 12)) enviar_comando_lcd(0b11001011);
  5679  00177A  0E02               	movlw	2
  5680  00177C  1804               	xorwf	posicionar_cursor@linha,w,c
  5681  00177E  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5682  001780  A4D8               	btfss	status,2,c
  5683  001782  D008               	goto	l97
  5684  001784  0E0C               	movlw	12
  5685  001786  1806               	xorwf	posicionar_cursor@coluna,w,c
  5686  001788  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5687  00178A  A4D8               	btfss	status,2,c
  5688  00178C  D003               	goto	l97
  5689  00178E  0ECB               	movlw	203
  5690  001790  EC54  F013         	call	_enviar_comando_lcd
  5691  001794                     l97:
  5692                           
  5693                           ;newmain.c: 111: if ((linha == 2) && (coluna == 13)) enviar_comando_lcd(0b11001100);
  5694  001794  0E02               	movlw	2
  5695  001796  1804               	xorwf	posicionar_cursor@linha,w,c
  5696  001798  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5697  00179A  A4D8               	btfss	status,2,c
  5698  00179C  D008               	goto	l98
  5699  00179E  0E0D               	movlw	13
  5700  0017A0  1806               	xorwf	posicionar_cursor@coluna,w,c
  5701  0017A2  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5702  0017A4  A4D8               	btfss	status,2,c
  5703  0017A6  D003               	goto	l98
  5704  0017A8  0ECC               	movlw	204
  5705  0017AA  EC54  F013         	call	_enviar_comando_lcd
  5706  0017AE                     l98:
  5707                           
  5708                           ;newmain.c: 112: if ((linha == 2) && (coluna == 14)) enviar_comando_lcd(0b11001101);
  5709  0017AE  0E02               	movlw	2
  5710  0017B0  1804               	xorwf	posicionar_cursor@linha,w,c
  5711  0017B2  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5712  0017B4  A4D8               	btfss	status,2,c
  5713  0017B6  D008               	goto	l99
  5714  0017B8  0E0E               	movlw	14
  5715  0017BA  1806               	xorwf	posicionar_cursor@coluna,w,c
  5716  0017BC  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5717  0017BE  A4D8               	btfss	status,2,c
  5718  0017C0  D003               	goto	l99
  5719  0017C2  0ECD               	movlw	205
  5720  0017C4  EC54  F013         	call	_enviar_comando_lcd
  5721  0017C8                     l99:
  5722                           
  5723                           ;newmain.c: 113: if ((linha == 2) && (coluna == 15)) enviar_comando_lcd(0b11001110);
  5724  0017C8  0E02               	movlw	2
  5725  0017CA  1804               	xorwf	posicionar_cursor@linha,w,c
  5726  0017CC  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5727  0017CE  A4D8               	btfss	status,2,c
  5728  0017D0  D008               	goto	l100
  5729  0017D2  0E0F               	movlw	15
  5730  0017D4  1806               	xorwf	posicionar_cursor@coluna,w,c
  5731  0017D6  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5732  0017D8  A4D8               	btfss	status,2,c
  5733  0017DA  D003               	goto	l100
  5734  0017DC  0ECE               	movlw	206
  5735  0017DE  EC54  F013         	call	_enviar_comando_lcd
  5736  0017E2                     l100:
  5737                           
  5738                           ;newmain.c: 114: if ((linha == 2) && (coluna == 16)) enviar_comando_lcd(0b11001111);
  5739  0017E2  0E02               	movlw	2
  5740  0017E4  1804               	xorwf	posicionar_cursor@linha,w,c
  5741  0017E6  1005               	iorwf	posicionar_cursor@linha+1,w,c
  5742  0017E8  A4D8               	btfss	status,2,c
  5743  0017EA  0012               	return	
  5744  0017EC  0E10               	movlw	16
  5745  0017EE  1806               	xorwf	posicionar_cursor@coluna,w,c
  5746  0017F0  1007               	iorwf	posicionar_cursor@coluna+1,w,c
  5747  0017F2  A4D8               	btfss	status,2,c
  5748  0017F4  0012               	return	
  5749  0017F6  0ECF               	movlw	207
  5750  0017F8  EC54  F013         	call	_enviar_comando_lcd
  5751  0017FC  0012               	return	
  5752  0017FE                     __end_of_posicionar_cursor:
  5753                           	opt stack 0
  5754                           tblptru	equ	0xFF8
  5755                           tblptrh	equ	0xFF7
  5756                           tblptrl	equ	0xFF6
  5757                           tablat	equ	0xFF5
  5758                           prodh	equ	0xFF4
  5759                           prodl	equ	0xFF3
  5760                           wreg	equ	0xFE8
  5761                           postinc2	equ	0xFDE
  5762                           postdec2	equ	0xFDD
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function _inicializa_pinos *****************
  5768 ;; Defined at:
  5769 ;;		line 135 in file "newmain.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, status,2
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5783 ;;      Params:         0       0       0       0       0       0       0       0       0
  5784 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5785 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5786 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5787 ;;Total ram usage:        0 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; This function calls:
  5790 ;;		Nothing
  5791 ;; This function is called by:
  5792 ;;		_main
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           	psect	text22
  5797  002736                     __ptext22:
  5798                           	opt stack 0
  5799  002736                     _inicializa_pinos:
  5800                           	opt stack 30
  5801                           
  5802                           ;newmain.c: 137: TRISC = 0b01110000;
  5803                           
  5804                           ;incstack = 0
  5805  002736  0E70               	movlw	112
  5806  002738  6E94               	movwf	3988,c	;volatile
  5807                           
  5808                           ;newmain.c: 138: TRISD = 0;
  5809  00273A  0E00               	movlw	0
  5810  00273C  6E95               	movwf	3989,c	;volatile
  5811                           
  5812                           ;newmain.c: 139: TRISA = 0b00010000;
  5813  00273E  0E10               	movlw	16
  5814  002740  6E92               	movwf	3986,c	;volatile
  5815                           
  5816                           ;newmain.c: 140: PORTC = 0;
  5817  002742  0E00               	movlw	0
  5818  002744  6E82               	movwf	3970,c	;volatile
  5819                           
  5820                           ;newmain.c: 141: PORTD = 0;
  5821  002746  0E00               	movlw	0
  5822  002748  6E83               	movwf	3971,c	;volatile
  5823  00274A  0012               	return		;funcret
  5824  00274C                     __end_of_inicializa_pinos:
  5825                           	opt stack 0
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           wreg	equ	0xFE8
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           fsr2h	equ	0xFDA
  5836                           fsr2l	equ	0xFD9
  5837                           status	equ	0xFD8
  5838                           
  5839 ;; *************** function _inicializa_lcd *****************
  5840 ;; Defined at:
  5841 ;;		line 58 in file "newmain.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      void 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0, cstack
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5855 ;;      Params:         0       0       0       0       0       0       0       0       0
  5856 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5857 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5858 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5859 ;;Total ram usage:        0 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    2
  5862 ;; This function calls:
  5863 ;;		_delay_ms
  5864 ;;		_enviar_comando_lcd
  5865 ;; This function is called by:
  5866 ;;		_main
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           	psect	text23
  5871  002682                     __ptext23:
  5872                           	opt stack 0
  5873  002682                     _inicializa_lcd:
  5874                           	opt stack 28
  5875                           
  5876                           ;newmain.c: 71: enviar_comando_lcd(0b00111000);
  5877                           
  5878                           ;incstack = 0
  5879  002682  0E38               	movlw	56
  5880  002684  EC54  F013         	call	_enviar_comando_lcd
  5881                           
  5882                           ;newmain.c: 72: enviar_comando_lcd(0b00001100);
  5883  002688  0E0C               	movlw	12
  5884  00268A  EC54  F013         	call	_enviar_comando_lcd
  5885                           
  5886                           ;newmain.c: 73: enviar_comando_lcd(0b00000110);
  5887  00268E  0E06               	movlw	6
  5888  002690  EC54  F013         	call	_enviar_comando_lcd
  5889                           
  5890                           ;newmain.c: 74: enviar_comando_lcd(0b00000001);
  5891  002694  0E01               	movlw	1
  5892  002696  EC54  F013         	call	_enviar_comando_lcd
  5893                           
  5894                           ;newmain.c: 75: delay_ms(5);
  5895  00269A  0E00               	movlw	0
  5896  00269C  6E02               	movwf	delay_ms@tempo+1,c
  5897  00269E  0E05               	movlw	5
  5898  0026A0  6E01               	movwf	delay_ms@tempo,c
  5899  0026A2  EC03  F013         	call	_delay_ms	;wreg free
  5900  0026A6  0012               	return		;funcret
  5901  0026A8                     __end_of_inicializa_lcd:
  5902                           	opt stack 0
  5903                           tblptru	equ	0xFF8
  5904                           tblptrh	equ	0xFF7
  5905                           tblptrl	equ	0xFF6
  5906                           tablat	equ	0xFF5
  5907                           prodh	equ	0xFF4
  5908                           prodl	equ	0xFF3
  5909                           wreg	equ	0xFE8
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function _enviar_comando_lcd *****************
  5917 ;; Defined at:
  5918 ;;		line 33 in file "newmain.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  valor           1    wreg     unsigned char 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  valor           1    2[COMRAM] unsigned char 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      void 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5932 ;;      Params:         0       0       0       0       0       0       0       0       0
  5933 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5934 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5935 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5936 ;;Total ram usage:        1 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:    1
  5939 ;; This function calls:
  5940 ;;		_delay_ms
  5941 ;; This function is called by:
  5942 ;;		_inicializa_lcd
  5943 ;;		_posicionar_cursor
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           	psect	text24
  5948  0026A8                     __ptext24:
  5949                           	opt stack 0
  5950  0026A8                     _enviar_comando_lcd:
  5951                           	opt stack 28
  5952                           
  5953                           ;incstack = 0
  5954                           ;enviar_comando_lcd@valor stored from wreg
  5955  0026A8  6E03               	movwf	enviar_comando_lcd@valor,c
  5956                           
  5957                           ;newmain.c: 35: PORTD = valor;
  5958  0026AA  C003  FF83         	movff	enviar_comando_lcd@valor,3971	;volatile
  5959                           
  5960                           ;newmain.c: 36: PORTCbits.RC0 = 0;
  5961  0026AE  9082               	bcf	3970,0,c	;volatile
  5962                           
  5963                           ;newmain.c: 37: PORTCbits.RC1 = 1;
  5964  0026B0  8282               	bsf	3970,1,c	;volatile
  5965                           
  5966                           ;newmain.c: 38: delay_ms(1);
  5967  0026B2  0E00               	movlw	0
  5968  0026B4  6E02               	movwf	delay_ms@tempo+1,c
  5969  0026B6  0E01               	movlw	1
  5970  0026B8  6E01               	movwf	delay_ms@tempo,c
  5971  0026BA  EC03  F013         	call	_delay_ms	;wreg free
  5972                           
  5973                           ;newmain.c: 39: PORTCbits.RC1 = 0;
  5974  0026BE  9282               	bcf	3970,1,c	;volatile
  5975                           
  5976                           ;newmain.c: 40: delay_ms(1);
  5977  0026C0  0E00               	movlw	0
  5978  0026C2  6E02               	movwf	delay_ms@tempo+1,c
  5979  0026C4  0E01               	movlw	1
  5980  0026C6  6E01               	movwf	delay_ms@tempo,c
  5981  0026C8  EC03  F013         	call	_delay_ms	;wreg free
  5982  0026CC  0012               	return		;funcret
  5983  0026CE                     __end_of_enviar_comando_lcd:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodh	equ	0xFF4
  5990                           prodl	equ	0xFF3
  5991                           wreg	equ	0xFE8
  5992                           postinc2	equ	0xFDE
  5993                           postdec2	equ	0xFDD
  5994                           fsr2h	equ	0xFDA
  5995                           fsr2l	equ	0xFD9
  5996                           status	equ	0xFD8
  5997                           
  5998 ;; *************** function _delay_ms *****************
  5999 ;; Defined at:
  6000 ;;		line 14 in file "newmain.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;  tempo           2    0[COMRAM] int 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;		None
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  1    wreg      void 
  6007 ;; Registers used:
  6008 ;;		wreg, status,2, status,0
  6009 ;; Tracked objects:
  6010 ;;		On entry : 0/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6014 ;;      Params:         2       0       0       0       0       0       0       0       0
  6015 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6017 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6018 ;;Total ram usage:        2 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; This function calls:
  6021 ;;		Nothing
  6022 ;; This function is called by:
  6023 ;;		_enviar_comando_lcd
  6024 ;;		_escrever_lcd
  6025 ;;		_inicializa_lcd
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text25
  6030  002606                     __ptext25:
  6031                           	opt stack 0
  6032  002606                     _delay_ms:
  6033                           	opt stack 27
  6034                           
  6035                           ;newmain.c: 16: while (tempo > 0)
  6036                           
  6037                           ;incstack = 0
  6038  002606  D00F               	goto	l49
  6039  002608                     l50:
  6040                           
  6041                           ;newmain.c: 17: {
  6042                           ;newmain.c: 18: T0CS = 0;
  6043  002608  9AD5               	bcf	4053,5,c	;volatile
  6044                           
  6045                           ;newmain.c: 19: PSA = 0;
  6046  00260A  96D5               	bcf	4053,3,c	;volatile
  6047                           
  6048                           ;newmain.c: 20: T0PS0 = 1;
  6049  00260C  80D5               	bsf	4053,0,c	;volatile
  6050                           
  6051                           ;newmain.c: 21: T0PS1 = 0;
  6052  00260E  92D5               	bcf	4053,1,c	;volatile
  6053                           
  6054                           ;newmain.c: 22: T0PS2 = 0;
  6055  002610  94D5               	bcf	4053,2,c	;volatile
  6056                           
  6057                           ;newmain.c: 23: TMR0IF = 0;
  6058  002612  94F2               	bcf	intcon,2,c	;volatile
  6059                           
  6060                           ;newmain.c: 24: T08BIT = 1;
  6061  002614  8CD5               	bsf	4053,6,c	;volatile
  6062                           
  6063                           ;newmain.c: 25: TMR0L = 0;
  6064  002616  0E00               	movlw	0
  6065  002618  6ED6               	movwf	4054,c	;volatile
  6066                           
  6067                           ;newmain.c: 26: TMR0ON = 1;
  6068  00261A  8ED5               	bsf	4053,7,c	;volatile
  6069  00261C  A4F2               	btfss	intcon,2,c	;volatile
  6070  00261E  D7FE               	goto	l52
  6071                           
  6072                           ;newmain.c: 28: --tempo;
  6073  002620  0601               	decf	delay_ms@tempo,f,c
  6074  002622  A0D8               	btfss	status,0,c
  6075  002624  0602               	decf	delay_ms@tempo+1,f,c
  6076  002626                     l49:
  6077  002626  BE02               	btfsc	delay_ms@tempo+1,7,c
  6078  002628  0012               	return	
  6079  00262A  5002               	movf	delay_ms@tempo+1,w,c
  6080  00262C  E1ED               	bnz	l50
  6081  00262E  0401               	decf	delay_ms@tempo,w,c
  6082  002630  A0D8               	btfss	status,0,c
  6083  002632  0012               	return	
  6084  002634  D7E9               	goto	l50
  6085  002636                     __end_of_delay_ms:
  6086                           	opt stack 0
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           prodh	equ	0xFF4
  6092                           prodl	equ	0xFF3
  6093                           intcon	equ	0xFF2
  6094                           wreg	equ	0xFE8
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101 ;; *************** function _inicializa_ad *****************
  6102 ;; Defined at:
  6103 ;;		line 118 in file "newmain.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;		None
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;		None
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      void 
  6110 ;; Registers used:
  6111 ;;		wreg, status,2
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6117 ;;      Params:         0       0       0       0       0       0       0       0       0
  6118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6121 ;;Total ram usage:        0 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_main
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           	psect	text26
  6131  00274C                     __ptext26:
  6132                           	opt stack 0
  6133  00274C                     _inicializa_ad:
  6134                           	opt stack 30
  6135                           
  6136                           ;newmain.c: 120: ADCON0 = 0b00000001;
  6137                           
  6138                           ;incstack = 0
  6139  00274C  0E01               	movlw	1
  6140  00274E  6EC2               	movwf	4034,c	;volatile
  6141                           
  6142                           ;newmain.c: 121: ADCON1 = 0b00001110;
  6143  002750  0E0E               	movlw	14
  6144  002752  6EC1               	movwf	4033,c	;volatile
  6145                           
  6146                           ;newmain.c: 122: ADCON2 = 0b10010110;
  6147  002754  0E96               	movlw	150
  6148  002756  6EC0               	movwf	4032,c	;volatile
  6149  002758  0012               	return		;funcret
  6150  00275A                     __end_of_inicializa_ad:
  6151                           	opt stack 0
  6152                           tblptru	equ	0xFF8
  6153                           tblptrh	equ	0xFF7
  6154                           tblptrl	equ	0xFF6
  6155                           tablat	equ	0xFF5
  6156                           prodh	equ	0xFF4
  6157                           prodl	equ	0xFF3
  6158                           intcon	equ	0xFF2
  6159                           wreg	equ	0xFE8
  6160                           postinc2	equ	0xFDE
  6161                           postdec2	equ	0xFDD
  6162                           fsr2h	equ	0xFDA
  6163                           fsr2l	equ	0xFD9
  6164                           status	equ	0xFD8
  6165                           
  6166 ;; *************** function _capturar_ad *****************
  6167 ;; Defined at:
  6168 ;;		line 125 in file "newmain.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;		None
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  resultado       2    4[COMRAM] int 
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  2    0[COMRAM] int 
  6175 ;; Registers used:
  6176 ;;		wreg, status,2, status,0
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6182 ;;      Params:         2       0       0       0       0       0       0       0       0
  6183 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6184 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6185 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6186 ;;Total ram usage:        6 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_main
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text27
  6196  0026CE                     __ptext27:
  6197                           	opt stack 0
  6198  0026CE                     _capturar_ad:
  6199                           	opt stack 30
  6200                           
  6201                           ;newmain.c: 127: int resultado;
  6202                           ;newmain.c: 129: GO_DONE = 1;
  6203                           
  6204                           ;incstack = 0
  6205  0026CE  82C2               	bsf	4034,1,c	;volatile
  6206  0026D0  B2C2               	btfsc	4034,1,c	;volatile
  6207  0026D2  D7FE               	goto	l109
  6208                           
  6209                           ;newmain.c: 131: resultado = (ADRESH << 8) | ADRESL;
  6210  0026D4  50C3               	movf	4035,w,c	;volatile
  6211  0026D6  CFC4 F003          	movff	4036,??_capturar_ad	;volatile
  6212  0026DA  6A04               	clrf	(??_capturar_ad+1)& (0+255),c
  6213  0026DC  C003  F004         	movff	??_capturar_ad,??_capturar_ad+1
  6214  0026E0  6A03               	clrf	??_capturar_ad,c
  6215  0026E2  1003               	iorwf	??_capturar_ad,w,c
  6216  0026E4  6E05               	movwf	capturar_ad@resultado,c
  6217  0026E6  5004               	movf	??_capturar_ad+1,w,c
  6218  0026E8  6E06               	movwf	capturar_ad@resultado+1,c
  6219                           
  6220                           ;newmain.c: 132: return (resultado);
  6221  0026EA  C005  F001         	movff	capturar_ad@resultado,?_capturar_ad
  6222  0026EE  C006  F002         	movff	capturar_ad@resultado+1,?_capturar_ad+1
  6223  0026F2  0012               	return	
  6224  0026F4                     __end_of_capturar_ad:
  6225                           	opt stack 0
  6226                           tblptru	equ	0xFF8
  6227                           tblptrh	equ	0xFF7
  6228                           tblptrl	equ	0xFF6
  6229                           tablat	equ	0xFF5
  6230                           prodh	equ	0xFF4
  6231                           prodl	equ	0xFF3
  6232                           intcon	equ	0xFF2
  6233                           wreg	equ	0xFE8
  6234                           postinc2	equ	0xFDE
  6235                           postdec2	equ	0xFDD
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function ___ftdiv *****************
  6241 ;; Defined at:
  6242 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  f1              3    8[COMRAM] float 
  6245 ;;  f2              3   11[COMRAM] float 
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  f3              3   18[COMRAM] float 
  6248 ;;  sign            1   22[COMRAM] unsigned char 
  6249 ;;  exp             1   21[COMRAM] unsigned char 
  6250 ;;  cntr            1   17[COMRAM] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  3    8[COMRAM] float 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6260 ;;      Params:         6       0       0       0       0       0       0       0       0
  6261 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6262 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6263 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6264 ;;Total ram usage:       15 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    1
  6267 ;; This function calls:
  6268 ;;		___ftpack
  6269 ;; This function is called by:
  6270 ;;		_main
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           	psect	text28
  6275  002132                     __ptext28:
  6276                           	opt stack 0
  6277  002132                     ___ftdiv:
  6278                           	opt stack 29
  6279                           
  6280                           ;incstack = 0
  6281  002132  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  6282  002136  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6283  002138  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6284  00213A  340A               	rlcf	___ftdiv@f1+1,w,c
  6285  00213C  360F               	rlcf	??___ftdiv& (0+255),f,c
  6286  00213E  E301               	bnc	u4161
  6287  002140  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6288  002142                     u4161:
  6289  002142  500F               	movf	??___ftdiv,w,c
  6290  002144  6E16               	movwf	___ftdiv@exp,c
  6291  002146  5016               	movf	___ftdiv@exp,w,c
  6292  002148  A4D8               	btfss	status,2,c
  6293  00214A  D007               	goto	l532
  6294  00214C  0E00               	movlw	0
  6295  00214E  6E09               	movwf	?___ftdiv,c
  6296  002150  0E00               	movlw	0
  6297  002152  6E0A               	movwf	?___ftdiv+1,c
  6298  002154  0E00               	movlw	0
  6299  002156  6E0B               	movwf	?___ftdiv+2,c
  6300  002158  0012               	return	
  6301  00215A                     l532:
  6302  00215A  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  6303  00215E  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6304  002160  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6305  002162  340D               	rlcf	___ftdiv@f2+1,w,c
  6306  002164  360F               	rlcf	??___ftdiv& (0+255),f,c
  6307  002166  E301               	bnc	u4181
  6308  002168  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6309  00216A                     u4181:
  6310  00216A  500F               	movf	??___ftdiv,w,c
  6311  00216C  6E17               	movwf	___ftdiv@sign,c
  6312  00216E  5017               	movf	___ftdiv@sign,w,c
  6313  002170  A4D8               	btfss	status,2,c
  6314  002172  D007               	goto	l534
  6315  002174  0E00               	movlw	0
  6316  002176  6E09               	movwf	?___ftdiv,c
  6317  002178  0E00               	movlw	0
  6318  00217A  6E0A               	movwf	?___ftdiv+1,c
  6319  00217C  0E00               	movlw	0
  6320  00217E  6E0B               	movwf	?___ftdiv+2,c
  6321  002180  0012               	return	
  6322  002182                     l534:
  6323  002182  0E00               	movlw	0
  6324  002184  6E13               	movwf	___ftdiv@f3,c
  6325  002186  0E00               	movlw	0
  6326  002188  6E14               	movwf	___ftdiv@f3+1,c
  6327  00218A  0E00               	movlw	0
  6328  00218C  6E15               	movwf	___ftdiv@f3+2,c
  6329  00218E  5017               	movf	___ftdiv@sign,w,c
  6330  002190  0F89               	addlw	137
  6331  002192  5E16               	subwf	___ftdiv@exp,f,c
  6332  002194  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  6333  002198  500E               	movf	___ftdiv@f2+2,w,c
  6334  00219A  1A17               	xorwf	___ftdiv@sign,f,c
  6335  00219C  0E80               	movlw	128
  6336  00219E  1617               	andwf	___ftdiv@sign,f,c
  6337  0021A0  8E0A               	bsf	___ftdiv@f1+1,7,c
  6338  0021A2  0EFF               	movlw	255
  6339  0021A4  1609               	andwf	___ftdiv@f1,f,c
  6340  0021A6  0EFF               	movlw	255
  6341  0021A8  160A               	andwf	___ftdiv@f1+1,f,c
  6342  0021AA  0E00               	movlw	0
  6343  0021AC  160B               	andwf	___ftdiv@f1+2,f,c
  6344  0021AE  8E0D               	bsf	___ftdiv@f2+1,7,c
  6345  0021B0  0EFF               	movlw	255
  6346  0021B2  160C               	andwf	___ftdiv@f2,f,c
  6347  0021B4  0EFF               	movlw	255
  6348  0021B6  160D               	andwf	___ftdiv@f2+1,f,c
  6349  0021B8  0E00               	movlw	0
  6350  0021BA  160E               	andwf	___ftdiv@f2+2,f,c
  6351  0021BC  0E18               	movlw	24
  6352  0021BE  6E12               	movwf	___ftdiv@cntr,c
  6353  0021C0  90D8               	bcf	status,0,c
  6354  0021C2  3613               	rlcf	___ftdiv@f3,f,c
  6355  0021C4  3614               	rlcf	___ftdiv@f3+1,f,c
  6356  0021C6  3615               	rlcf	___ftdiv@f3+2,f,c
  6357  0021C8  500C               	movf	___ftdiv@f2,w,c
  6358  0021CA  5C09               	subwf	___ftdiv@f1,w,c
  6359  0021CC  500D               	movf	___ftdiv@f2+1,w,c
  6360  0021CE  580A               	subwfb	___ftdiv@f1+1,w,c
  6361  0021D0  500E               	movf	___ftdiv@f2+2,w,c
  6362  0021D2  580B               	subwfb	___ftdiv@f1+2,w,c
  6363  0021D4  A0D8               	btfss	status,0,c
  6364  0021D6  D007               	goto	l536
  6365  0021D8  500C               	movf	___ftdiv@f2,w,c
  6366  0021DA  5E09               	subwf	___ftdiv@f1,f,c
  6367  0021DC  500D               	movf	___ftdiv@f2+1,w,c
  6368  0021DE  5A0A               	subwfb	___ftdiv@f1+1,f,c
  6369  0021E0  500E               	movf	___ftdiv@f2+2,w,c
  6370  0021E2  5A0B               	subwfb	___ftdiv@f1+2,f,c
  6371  0021E4  8013               	bsf	___ftdiv@f3,0,c
  6372  0021E6                     l536:
  6373  0021E6  90D8               	bcf	status,0,c
  6374  0021E8  3609               	rlcf	___ftdiv@f1,f,c
  6375  0021EA  360A               	rlcf	___ftdiv@f1+1,f,c
  6376  0021EC  360B               	rlcf	___ftdiv@f1+2,f,c
  6377  0021EE  2E12               	decfsz	___ftdiv@cntr,f,c
  6378  0021F0  D7E7               	goto	l535
  6379  0021F2  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  6380  0021F6  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6381  0021FA  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6382  0021FE  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  6383  002202  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  6384  002206  EC0C  F011         	call	___ftpack	;wreg free
  6385  00220A  C001  F009         	movff	?___ftpack,?___ftdiv
  6386  00220E  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6387  002212  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6388  002216  0012               	return	
  6389  002218                     __end_of___ftdiv:
  6390                           	opt stack 0
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon	equ	0xFF2
  6398                           wreg	equ	0xFE8
  6399                           postinc2	equ	0xFDE
  6400                           postdec2	equ	0xFDD
  6401                           fsr2h	equ	0xFDA
  6402                           fsr2l	equ	0xFD9
  6403                           status	equ	0xFD8
  6404                           
  6405 ;; *************** function ___awtoft *****************
  6406 ;; Defined at:
  6407 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  c               2    8[COMRAM] int 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;  sign            1   11[COMRAM] unsigned char 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  3    8[COMRAM] float 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2, status,0, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6421 ;;      Params:         3       0       0       0       0       0       0       0       0
  6422 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6423 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6424 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6425 ;;Total ram usage:        4 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    1
  6428 ;; This function calls:
  6429 ;;		___ftpack
  6430 ;; This function is called by:
  6431 ;;		_main
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text29
  6436  0025CE                     __ptext29:
  6437                           	opt stack 0
  6438  0025CE                     ___awtoft:
  6439                           	opt stack 29
  6440                           
  6441                           ;incstack = 0
  6442  0025CE  0E00               	movlw	0
  6443  0025D0  6E0C               	movwf	___awtoft@sign,c
  6444  0025D2  AE0A               	btfss	___awtoft@c+1,7,c
  6445  0025D4  D006               	goto	l432
  6446  0025D6  6C09               	negf	___awtoft@c,c
  6447  0025D8  1E0A               	comf	___awtoft@c+1,f,c
  6448  0025DA  B0D8               	btfsc	status,0,c
  6449  0025DC  2A0A               	incf	___awtoft@c+1,f,c
  6450  0025DE  0E01               	movlw	1
  6451  0025E0  6E0C               	movwf	___awtoft@sign,c
  6452  0025E2                     l432:
  6453  0025E2  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6454  0025E6  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6455  0025EA  6A03               	clrf	___ftpack@arg+2,c
  6456  0025EC  0E8E               	movlw	142
  6457  0025EE  6E04               	movwf	___ftpack@exp,c
  6458  0025F0  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6459  0025F4  EC0C  F011         	call	___ftpack	;wreg free
  6460  0025F8  C001  F009         	movff	?___ftpack,?___awtoft
  6461  0025FC  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6462  002600  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6463  002604  0012               	return	
  6464  002606                     __end_of___awtoft:
  6465                           	opt stack 0
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           intcon	equ	0xFF2
  6473                           wreg	equ	0xFE8
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function ___ftpack *****************
  6481 ;; Defined at:
  6482 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  arg             3    0[COMRAM] unsigned um
  6485 ;;  exp             1    3[COMRAM] unsigned char 
  6486 ;;  sign            1    4[COMRAM] unsigned char 
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  3    0[COMRAM] float 
  6491 ;; Registers used:
  6492 ;;		wreg, status,2, status,0
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6498 ;;      Params:         5       0       0       0       0       0       0       0       0
  6499 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6500 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6501 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6502 ;;Total ram usage:        8 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; This function calls:
  6505 ;;		Nothing
  6506 ;; This function is called by:
  6507 ;;		___awtoft
  6508 ;;		___ftadd
  6509 ;;		___ftdiv
  6510 ;;		___ftmul
  6511 ;;		___lltoft
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text30
  6516  002218                     __ptext30:
  6517                           	opt stack 0
  6518  002218                     ___ftpack:
  6519                           	opt stack 27
  6520                           
  6521                           ;incstack = 0
  6522  002218  5004               	movf	___ftpack@exp,w,c
  6523  00221A  B4D8               	btfsc	status,2,c
  6524  00221C  D005               	goto	u2150
  6525  00221E  5001               	movf	___ftpack@arg,w,c
  6526  002220  1002               	iorwf	___ftpack@arg+1,w,c
  6527  002222  1003               	iorwf	___ftpack@arg+2,w,c
  6528  002224  A4D8               	btfss	status,2,c
  6529  002226  D00C               	goto	l468
  6530  002228                     u2150:
  6531  002228  0E00               	movlw	0
  6532  00222A  6E01               	movwf	?___ftpack,c
  6533  00222C  0E00               	movlw	0
  6534  00222E  6E02               	movwf	?___ftpack+1,c
  6535  002230  0E00               	movlw	0
  6536  002232  6E03               	movwf	?___ftpack+2,c
  6537  002234  0012               	return	
  6538  002236  2A04               	incf	___ftpack@exp,f,c
  6539  002238  90D8               	bcf	status,0,c
  6540  00223A  3203               	rrcf	___ftpack@arg+2,f,c
  6541  00223C  3202               	rrcf	___ftpack@arg+1,f,c
  6542  00223E  3201               	rrcf	___ftpack@arg,f,c
  6543  002240                     l468:
  6544  002240  0E00               	movlw	0
  6545  002242  1401               	andwf	___ftpack@arg,w,c
  6546  002244  6E06               	movwf	??___ftpack& (0+255),c
  6547  002246  0E00               	movlw	0
  6548  002248  1402               	andwf	___ftpack@arg+1,w,c
  6549  00224A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6550  00224C  0EFE               	movlw	254
  6551  00224E  1403               	andwf	___ftpack@arg+2,w,c
  6552  002250  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6553  002252  5006               	movf	??___ftpack,w,c
  6554  002254  1007               	iorwf	??___ftpack+1,w,c
  6555  002256  1008               	iorwf	??___ftpack+2,w,c
  6556  002258  B4D8               	btfsc	status,2,c
  6557  00225A  D00C               	goto	l471
  6558  00225C  D7EC               	goto	l469
  6559  00225E  2A04               	incf	___ftpack@exp,f,c
  6560  002260  0E01               	movlw	1
  6561  002262  2601               	addwf	___ftpack@arg,f,c
  6562  002264  0E00               	movlw	0
  6563  002266  2202               	addwfc	___ftpack@arg+1,f,c
  6564  002268  0E00               	movlw	0
  6565  00226A  2203               	addwfc	___ftpack@arg+2,f,c
  6566  00226C  90D8               	bcf	status,0,c
  6567  00226E  3203               	rrcf	___ftpack@arg+2,f,c
  6568  002270  3202               	rrcf	___ftpack@arg+1,f,c
  6569  002272  3201               	rrcf	___ftpack@arg,f,c
  6570  002274                     l471:
  6571  002274  0E00               	movlw	0
  6572  002276  1401               	andwf	___ftpack@arg,w,c
  6573  002278  6E06               	movwf	??___ftpack& (0+255),c
  6574  00227A  0E00               	movlw	0
  6575  00227C  1402               	andwf	___ftpack@arg+1,w,c
  6576  00227E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6577  002280  0EFF               	movlw	255
  6578  002282  1403               	andwf	___ftpack@arg+2,w,c
  6579  002284  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6580  002286  5006               	movf	??___ftpack,w,c
  6581  002288  1007               	iorwf	??___ftpack+1,w,c
  6582  00228A  1008               	iorwf	??___ftpack+2,w,c
  6583  00228C  B4D8               	btfsc	status,2,c
  6584  00228E  D006               	goto	l474
  6585  002290  D7E6               	goto	l472
  6586  002292  0604               	decf	___ftpack@exp,f,c
  6587  002294  90D8               	bcf	status,0,c
  6588  002296  3601               	rlcf	___ftpack@arg,f,c
  6589  002298  3602               	rlcf	___ftpack@arg+1,f,c
  6590  00229A  3603               	rlcf	___ftpack@arg+2,f,c
  6591  00229C                     l474:
  6592  00229C  BE02               	btfsc	___ftpack@arg+1,7,c
  6593  00229E  D003               	goto	u2190
  6594  0022A0  0E02               	movlw	2
  6595  0022A2  6004               	cpfslt	___ftpack@exp,c
  6596  0022A4  D7F6               	goto	l475
  6597  0022A6                     u2190:
  6598  0022A6  A004               	btfss	___ftpack@exp,0,c
  6599  0022A8  9E02               	bcf	___ftpack@arg+1,7,c
  6600  0022AA  90D8               	bcf	status,0,c
  6601  0022AC  3204               	rrcf	___ftpack@exp,f,c
  6602  0022AE  5004               	movf	___ftpack@exp,w,c
  6603  0022B0  1203               	iorwf	___ftpack@arg+2,f,c
  6604  0022B2  5005               	movf	___ftpack@sign,w,c
  6605  0022B4  A4D8               	btfss	status,2,c
  6606  0022B6  8E03               	bsf	___ftpack@arg+2,7,c
  6607  0022B8  C001  F001         	movff	___ftpack@arg,?___ftpack
  6608  0022BC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6609  0022C0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6610  0022C4  0012               	return	
  6611  0022C6                     __end_of___ftpack:
  6612                           	opt stack 0
  6613                           tblptru	equ	0xFF8
  6614                           tblptrh	equ	0xFF7
  6615                           tblptrl	equ	0xFF6
  6616                           tablat	equ	0xFF5
  6617                           prodh	equ	0xFF4
  6618                           prodl	equ	0xFF3
  6619                           intcon	equ	0xFF2
  6620                           wreg	equ	0xFE8
  6621                           postinc2	equ	0xFDE
  6622                           postdec2	equ	0xFDD
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           tblptru	equ	0xFF8
  6627                           tblptrh	equ	0xFF7
  6628                           tblptrl	equ	0xFF6
  6629                           tablat	equ	0xFF5
  6630                           prodh	equ	0xFF4
  6631                           prodl	equ	0xFF3
  6632                           intcon	equ	0xFF2
  6633                           wreg	equ	0xFE8
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640                           	psect	rparam
  6641  0000                     tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           intcon	equ	0xFF2
  6648                           wreg	equ	0xFE8
  6649                           postinc2	equ	0xFDE
  6650                           postdec2	equ	0xFDD
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      79
    BANK0           160     25      25
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[9]), STR_1(CODE[12]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_escrever_lcd
    _escrever_lcd->_delay_ms
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _posicionar_cursor->_enviar_comando_lcd
    _inicializa_lcd->_enviar_comando_lcd
    _enviar_comando_lcd->_delay_ms
    ___ftdiv->___ftpack
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   65540
                                             74 COMRAM     5     5      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                        _capturar_ad
                      _inicializa_ad
                     _inicializa_lcd
                   _inicializa_pinos
                  _posicionar_cursor
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   50722
                                             63 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12059
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     447
                                              3 COMRAM     1     1      0
                       _escrever_lcd
 ---------------------------------------------------------------------------------
 (3) _escrever_lcd                                         1     1      0     425
                                              2 COMRAM     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11861
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _posicionar_cursor                                    4     0      4    2137
                                              3 COMRAM     4     0      4
                 _enviar_comando_lcd
 ---------------------------------------------------------------------------------
 (1) _inicializa_pinos                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_lcd                                       0     0      0     828
                           _delay_ms
                 _enviar_comando_lcd
 ---------------------------------------------------------------------------------
 (2) _enviar_comando_lcd                                   1     1      0     425
                                              2 COMRAM     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             2     0      2     403
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _inicializa_ad                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _capturar_ad                                          6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3063
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftpack
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _capturar_ad
   _inicializa_ad
   _inicializa_lcd
     _delay_ms
     _enviar_comando_lcd
       _delay_ms
   _inicializa_pinos
   _posicionar_cursor
     _enviar_comando_lcd
       _delay_ms
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _escrever_lcd
         _delay_ms
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     4F      4F       1       83.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      19       5       15.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 02 21:54:46 2018

__size_of_enviar_comando_lcd 0026                           l50 2608                           l52 261C  
                         l70 14F6                           l71 150E                           l80 15E6  
                         l72 1526                           l49 2626                           l81 15FE  
                         l73 153E                           l90 16DE                           l82 1616  
                         l74 1556                           l91 16F8                           l83 162E  
                         l75 156E                           l92 1712                           l84 1646  
                         l76 1586                           l93 172C                           l85 165E  
                         l77 159E                           l94 1746                           l86 1676  
                         l78 15B6                           l95 1760                           l87 1690  
                         l79 15CE                           l96 177A                           l88 16AA  
                         l97 1794                           l89 16C4                           l98 17AE  
                         l99 17C8                 ___awdiv@sign 000C          ___wmul@multiplicand 0011  
               ___ftadd@exp1 0039                 ___ftadd@exp2 0038                 ___ftadd@sign 0037  
                        l100 17E2                          l200 0D32                          l120 1F46  
                        l210 0E18                          l202 0D56                          l203 0D48  
                        l212 0E4A                          l109 26D0                          l221 0FCE  
                        l213 0E4E                          l230 1082                          l222 0FEA  
                        l214 0E66                          l206 0E0C                          l151 12E0  
                        l215 0F92                          l207 0D80                          l119 1E82  
                        l152 120C                          l224 100A                          l216 0EB8  
                        l145 1944                          l225 102C                          l209 0E26  
                        l234 10BA                          l218 0FAC                          l162 089C  
                        l411 23B8                          l155 12BC                          l227 104E  
                        l219 0F9E                          l163 08AE                          l412 23C2  
                        l404 236A                          l420 2492                          l148 1A10  
                        l156 140C                          l228 1056                          l180 0A3A  
                        l172 09C0                          l413 23D0                          l405 237A  
                        l421 248A                          l229 107A                          l165 08DE  
                        l158 14BC                          l190 0C08                          l182 0ACC  
                        l503 1ACC                          l407 2398                          l183 0B32  
                        l175 09BC                          l167 09AE                          l432 25E2  
                        l440 1DDC                          l408 2390                          l424 24AA  
                        l600 272E                          l176 09E4                          l168 0998  
                        l513 1B28                          l425 24B4                          l417 2470  
                        l185 0B58                          l169 0960                          l522 1B66  
                        l514 1B1E                          l442 1E1A                          l426 24C2  
                        l418 247C                          l178 0FB6                          l186 0B98  
                        l523 1B5C                          l443 1E0A                          l187 0C60  
                        l179 09F8                          l532 215A                          l508 1B32  
                        l436 1D4C                          l540 1C28                          l196 0CC6  
                        l525 1B8A                          l534 2182                          l526 1BA6  
                        l630 243C                          l438 1D6A                          l542 1C54  
                        l471 2274                          l535 21C0                          l527 1BD6  
                        l631 244A                          l439 1DAC                          l543 1C8E  
                        l472 225E                          l536 21E6                          l640 2512  
                        l448 1E3E                          l552 1D16                          l544 1CB6  
                        l641 2520                          l449 1E32                          l553 1D0A  
                        l474 229C                          l626 2408                          l546 1CF2  
                        l570 1FF4                          l475 2292                          l627 23FC  
                        l547 1CE2                          l571 2004                          l468 2240  
                        l636 24EA                          l564 1F72                          l469 2236  
                        l557 22F6                          l581 25A4                          l637 24DE  
                        l558 2326                          l566 1F9A                          l575 270A  
                        l647 2544                          l567 1FCC                          l648 2538  
                        l568 1FDC                          l593 2104                          l585 206A  
                        l594 20F8                          l499 1AA2                          l587 20E0  
                        l596 2120                          l588 20D0                          _RC2 007C12  
                        _PSA 007EAB                 ___awmod@sign 0006                          wreg 000FE8  
          ?_inicializa_pinos 0001                 ___ftdiv@cntr 0012                 ___ftdiv@sign 0017  
               __CFG_WDT$OFF 000000                         l2025 2352                         l2917 0BE2  
                       l2909 0B98                         l2937 0CCA                         l2957 0D48  
                       l2975 0E18                         STR_1 0877                         STR_2 0883  
                       _T0CS 007EAD                         u3000 240C                         u2221 1A60  
                       u2150 2228                         u3030 24EE                         u2231 1A74  
                       u2320 1AFC                         u2260 1A94                         u2190 22A6  
                       u2431 1F5A                         u2360 1B3A                         u2520 239C  
                       u4120 108A                         u2290 1ABE                         u4130 10A0  
                       u2451 1F82                         u2701 1C0C                         u2390 1B6E  
                       u4161 2142                         u2721 1C38                 printf@tmpval 006D  
                       u2580 2496                         u4181 216A                         u2911 204E  
                       u3800 0A72                         u2930 2088                         u2850 1E44  
                       u3730 093C                         u2780 1D1C                         u3805 0A68  
                       u2935 2080                         u3920 0D02                         u3840 0B6A  
                       u2970 210A                         u3850 0BAA                         u3950 0D64  
                       u3880 0BE2                         u3980 0E34                         u3990 0E44  
         ??_inicializa_pinos 0001                         _main 1E56                 ___ftpack@arg 0001  
               ___ftpack@exp 0004                         fsr2h 000FDA                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
               ___ftmul@cntr 0022                 ___param_bank 000000                 ___ftmul@sign 0023  
               ___fttol@exp1 0039                 ___fttol@lval 0035                        ?_main 0001  
            __end_of___awdiv 23DA              __end_of___ftadd 1BFC              __end_of___awmod 24CC  
            __end_of___ftdiv 2218              __end_of___ftneg 2718              __end_of___lldiv 245C  
            __end_of___ftmul 203E              ___awdiv@divisor 0009              __end_of___llmod 2532  
            __end_of___ftsub 25CE              __end_of___fttol 2132                        _T0PS0 007EA8  
                      _T0PS1 007EA9                        _T0PS2 007EAA              ___awdiv@counter 000B  
     __size_of_inicializa_ad 000E                        _TMR0L 000FD6                        _PORTC 000F82  
                      _PORTD 000F83                        _TRISA 000F92                        _TRISC 000F94  
                      _TRISD 000F95                 ___lltoft@exp 0011                ?_escrever_lcd 0001  
              ___awtoft@sign 000C              __end_of_dpowers 0829                        _scale 10D8  
            __end_of_isdigit 2736                ___ftpack@sign 0005                        _putch 2764  
                      tablat 000FF5                        status 000FD8              __initialization 275A  
               __end_of_main 1F4A         __size_of_capturar_ad 0026                       ??_main 004B  
              ___fttol@sign1 0034                __activetblptr 000002         __size_of__tdiv_to_l_ 0132  
             ??_escrever_lcd 0003                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0             ___llmod@dividend 0001                       ?_scale 0024  
                     _ADRESH 000FC4                       _ADRESL 000FC3                       _T08BIT 007EAE  
           ___awdiv@dividend 0007             __end_of___awtoft 2606                       ?_putch 0001  
           __end_of___ftpack 22C6             __end_of___lltoft 258E                       _TMR0IF 007F92  
                     _TMR0ON 007EAF      __size_of_inicializa_lcd 0026                _inicializa_ad 274C  
           __end_of_delay_ms 2636             __end_of__powers_ 0850                       ___ftge 22C6  
                     ___wmul 265C                    ??___awdiv 000B                    ??___ftadd 0034  
                  ??___awmod 0005                    ??___ftdiv 000F                    ??___ftneg 0004  
                  ??___lldiv 0009                    ??___ftmul 001B                    ??___llmod 0009  
                  ??___ftsub 0040                    ??___fttol 002F                       _fround 17FE  
           ___awdiv@quotient 000D              ___awmod@divisor 0003              ___awmod@counter 0005  
                     _printf 088E        ___ftmul@f3_as_product 001F                    ??_isdigit 0001  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                       putch@x 0004                   __accesstop 0060  
    __end_of__initialization 275A              __CFG_FOSC$XT_XT 000000                   ___ftadd@f1 002E  
                 ___ftadd@f2 0031               ?_inicializa_ad 0001                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                ___rparam_used 000001                   ___ftdiv@f1 0009  
                 ___ftdiv@f2 000C                   ___ftdiv@f3 0013                   ___ftneg@f1 0001  
                 ___awtoft@c 0009                   ___ftmul@f1 0015                   ___ftmul@f2 0018  
                 ___ftsub@f1 003A                   ___ftsub@f2 003D                   ___fttol@f1 002B  
             __pcstackCOMRAM 0001                   ___lltoft@c 0009                __end_of_scale 14E0  
              __end_of_putch 276E                   __div_to_l_ 1D2E              __div_to_l_@exp1 000C  
            __div_to_l_@cntr 000B                      ??_scale 0027              __div_to_l_@quot 0007  
                    ??_putch 0004                __div_to_l_@f1 0001                __div_to_l_@f2 0004  
 __end_of_enviar_comando_lcd 26CE         __end_of_escrever_lcd 265C    __size_of_inicializa_pinos 0016  
                    ?___ftge 0001                      ?___wmul 000F                      ?_fround 0024  
                  ?___awtoft 0009                    ?___ftpack 0001                      ?_printf 0040  
                  ?___lltoft 0009                      _GO_DONE 007E11                    ?_delay_ms 0001  
            ??_inicializa_ad 0001               _inicializa_lcd 2682            __end_of__npowers_ 0877  
                    __Hparam 0000                      __Lparam 0000              __size_of___ftge 0090  
                    ___awdiv 2356                      ___ftadd 1A50                      ___awmod 245C  
                    ___ftdiv 2132                      ___ftneg 26F4                      ___lldiv 23DA  
            __size_of___wmul 0026                      ___ftmul 1F4A                      ___llmod 24CC  
                    ___ftsub 258E                      ___fttol 203E                   _fround$781 002A  
                 _fround$782 0027                 __psmallconst 0800                      __pcinit 275A  
                 ??___awtoft 000C                   ??___ftpack 0006              __size_of_fround 0252  
                    __ramtop 0800                   ??___lltoft 000D                      __ptext0 1E56  
                    __ptext1 088E                      __ptext2 10D8                      __ptext3 2764  
                    __ptext4 2636                      __ptext5 2718                      __ptext6 17FE  
                    __ptext7 265C                      __ptext8 1F4A                      __ptext9 245C  
            __size_of_printf 084A                  ?__div_to_l_ 0001                      _dpowers 0801  
                    _isdigit 2718             ___awmod@dividend 0001                   ??_delay_ms 0003  
    enviar_comando_lcd@valor 0003                      main@adc 004B       __end_of_inicializa_lcd 26A8  
       end_of_initialization 275A                __Lmediumconst 0000              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                ??_capturar_ad 0003                      printf@c 0078  
                    printf@f 0040                      postdec2 000FDD                      postinc2 000FDE  
             __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004                   _printf$784 0060  
              ??__tdiv_to_l_ 0007                    _PORTCbits 000F82              ?_inicializa_lcd 0001  
      __size_of_escrever_lcd 0026                  ___ftdiv@exp 0016                  printf@width 006B  
        __size_of__div_to_l_ 0128         capturar_ad@resultado 0005                  ___ftmul@exp 001E  
           _inicializa_pinos 2736               __end_of___ftge 2356               __end_of___wmul 2682  
              delay_ms@tempo 0001          __end_of_capturar_ad 26F4               __end_of_fround 1A50  
             __end_of_printf 10D8          start_initialization 275A                 _escrever_lcd 2636  
        __end_of__tdiv_to_l_ 1D2E              ___llmod@divisor 0005              ___llmod@counter 0009  
          _posicionar_cursor 14E0                     ??___ftge 0007                     ??___wmul 0013  
         ?_posicionar_cursor 0004                     ??_fround 0027            escrever_lcd@valor 0003  
                   ??_printf 0045           _enviar_comando_lcd 26A8                   fround@prec 002D  
          __size_of___awtoft 0038            __size_of___ftpack 00AE          ??_posicionar_cursor 0008  
          __size_of___lltoft 005C                __pcstackBANK0 0060      posicionar_cursor@coluna 0006  
        ?_enviar_comando_lcd 0001            __size_of_delay_ms 0030    __end_of_posicionar_cursor 17FE  
                _capturar_ad 26CE         ??_enviar_comando_lcd 0003                     ?___awdiv 0007  
                   ?___ftadd 002E                     ?___awmod 0001                     ?___ftdiv 0009  
                   ?___ftneg 0001                     ?___lldiv 0001                     ?___ftmul 0015  
                   ?___llmod 0001                     ?___ftsub 003A                    __npowers_ 0850  
                   ?___fttol 002B                  __tdiv_to_l_ 1BFC                 ??__div_to_l_ 0007  
                __smallconst 0800                     ?_isdigit 0001                    _scale$783 0027  
             __size_of_scale 0408               __size_of_putch 000A               ___wmul@product 0013  
      __end_of_inicializa_ad 275A           __end_of__div_to_l_ 1E56            ___wmul@multiplier 000F  
                 printf@flag 0069                   printf@fval 0073                   printf@prec 0076  
           ??_inicializa_lcd 0004     __end_of_inicializa_pinos 274C   __size_of_posicionar_cursor 031E  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___awdiv 0084  
           __size_of___ftadd 01AC             __size_of___awmod 0070             __size_of___ftdiv 00E6  
           __size_of___ftneg 0024             __size_of___lldiv 0082             __size_of___ftmul 00F4  
           __size_of___llmod 0066             __size_of___ftsub 0040             __size_of___fttol 00F4  
                   ___awtoft 25CE                     ___ftpack 2218                     ___lltoft 2532  
                _isdigit$436 0002       posicionar_cursor@linha 0004             __size_of_isdigit 001E  
                   _delay_ms 2606                     __ptext10 2356                     __ptext11 1BFC  
                   __ptext20 22C6                     __ptext12 1D2E                     __ptext21 14E0  
                   __ptext13 2532                     __ptext30 2218                     __ptext22 2736  
                   __ptext14 24CC                     __ptext23 2682                     __ptext15 23DA  
                   __ptext24 26A8                     __ptext16 203E                     __ptext25 2606  
                   __ptext17 258E                     __ptext26 274C                     __ptext18 1A50  
                   __ptext27 26CE                     __ptext19 26F4                     __ptext28 2132  
                   __ptext29 25CE                     __powers_ 0829                __size_of_main 00F4  
                  printf@exp 0071                    printf@val 0065                     main@temp 004D  
                   isdigit@c 0003                     scale@scl 002A             __tdiv_to_l_@exp1 000F  
           __tdiv_to_l_@cntr 000E             __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001  
               ?_capturar_ad 0001                     printf@ap 0063                 ?__tdiv_to_l_ 0001  
           ___lldiv@quotient 0009  
